
archi22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049d0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  08004b58  08004b58  00005b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050e0  080050e0  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  080050e0  080050e0  000060e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050e8  080050e8  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050e8  080050e8  000060e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050ec  080050ec  000060ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080050f0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000000c  080050fc  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  080050fc  00007160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f05c  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026b1  00000000  00000000  00016098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  00018750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009cc  00000000  00000000  00019420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026112  00000000  00000000  00019dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010dd5  00000000  00000000  0003fefe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6eac  00000000  00000000  00050cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00137b7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032f8  00000000  00000000  00137bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  0013aebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004b40 	.word	0x08004b40

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004b40 	.word	0x08004b40

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004be:	4b0c      	ldr	r3, [pc, #48]	@ (80004f0 <MX_DMA_Init+0x38>)
 80004c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004c2:	4a0b      	ldr	r2, [pc, #44]	@ (80004f0 <MX_DMA_Init+0x38>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	6493      	str	r3, [r2, #72]	@ 0x48
 80004ca:	4b09      	ldr	r3, [pc, #36]	@ (80004f0 <MX_DMA_Init+0x38>)
 80004cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2100      	movs	r1, #0
 80004da:	200c      	movs	r0, #12
 80004dc:	f000 ffd1 	bl	8001482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80004e0:	200c      	movs	r0, #12
 80004e2:	f000 ffea 	bl	80014ba <HAL_NVIC_EnableIRQ>

}
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000

080004f4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 030c 	add.w	r3, r7, #12
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	4b29      	ldr	r3, [pc, #164]	@ (80005b0 <MX_GPIO_Init+0xbc>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800050e:	4a28      	ldr	r2, [pc, #160]	@ (80005b0 <MX_GPIO_Init+0xbc>)
 8000510:	f043 0304 	orr.w	r3, r3, #4
 8000514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000516:	4b26      	ldr	r3, [pc, #152]	@ (80005b0 <MX_GPIO_Init+0xbc>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051a:	f003 0304 	and.w	r3, r3, #4
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	4b23      	ldr	r3, [pc, #140]	@ (80005b0 <MX_GPIO_Init+0xbc>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000526:	4a22      	ldr	r2, [pc, #136]	@ (80005b0 <MX_GPIO_Init+0xbc>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052e:	4b20      	ldr	r3, [pc, #128]	@ (80005b0 <MX_GPIO_Init+0xbc>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	4b1d      	ldr	r3, [pc, #116]	@ (80005b0 <MX_GPIO_Init+0xbc>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053e:	4a1c      	ldr	r2, [pc, #112]	@ (80005b0 <MX_GPIO_Init+0xbc>)
 8000540:	f043 0302 	orr.w	r3, r3, #2
 8000544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000546:	4b1a      	ldr	r3, [pc, #104]	@ (80005b0 <MX_GPIO_Init+0xbc>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800054a:	f003 0302 	and.w	r3, r3, #2
 800054e:	603b      	str	r3, [r7, #0]
 8000550:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_PIN_Pin|LCD_RST_PIN_Pin|LCD_DC_PIN_Pin, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8000558:	4816      	ldr	r0, [pc, #88]	@ (80005b4 <MX_GPIO_Init+0xc0>)
 800055a:	f001 fb59 	bl	8001c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800055e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000562:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000564:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000568:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800056e:	f107 030c 	add.w	r3, r7, #12
 8000572:	4619      	mov	r1, r3
 8000574:	4810      	ldr	r0, [pc, #64]	@ (80005b8 <MX_GPIO_Init+0xc4>)
 8000576:	f001 f9a1 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_PIN_Pin LCD_RST_PIN_Pin LCD_DC_PIN_Pin */
  GPIO_InitStruct.Pin = LCD_CS_PIN_Pin|LCD_RST_PIN_Pin|LCD_DC_PIN_Pin;
 800057a:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800057e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000580:	2301      	movs	r3, #1
 8000582:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000588:	2300      	movs	r3, #0
 800058a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	4619      	mov	r1, r3
 8000592:	4808      	ldr	r0, [pc, #32]	@ (80005b4 <MX_GPIO_Init+0xc0>)
 8000594:	f001 f992 	bl	80018bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000598:	2200      	movs	r2, #0
 800059a:	2100      	movs	r1, #0
 800059c:	2028      	movs	r0, #40	@ 0x28
 800059e:	f000 ff70 	bl	8001482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005a2:	2028      	movs	r0, #40	@ 0x28
 80005a4:	f000 ff89 	bl	80014ba <HAL_NVIC_EnableIRQ>

}
 80005a8:	bf00      	nop
 80005aa:	3720      	adds	r7, #32
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40021000 	.word	0x40021000
 80005b4:	48000400 	.word	0x48000400
 80005b8:	48000800 	.word	0x48000800

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f000 fde3 	bl	800118c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f851 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f7ff ff93 	bl	80004f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ce:	f7ff ff73 	bl	80004b8 <MX_DMA_Init>
  MX_SPI1_Init();
 80005d2:	f000 f8a3 	bl	800071c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80005d6:	f000 fd1b 	bl	8001010 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  ST7735_Init();
 80005da:	f000 f985 	bl	80008e8 <ST7735_Init>
  ST7735_FillScreen(ST7735_BLACK);
 80005de:	2000      	movs	r0, #0
 80005e0:	f000 fc44 	bl	8000e6c <ST7735_FillScreen>
  //ST7735_DrawString(1, 7, "Wikcia to fajna siostra", ST7735_GREEN);
  //ST7735_DrawCharS(1*6, 7*10, "Wikcia to fajna siostra", ST7735_GREEN, ST7735_BLACK, 1);

  int16_t x = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	81fb      	strh	r3, [r7, #14]
  int16_t y = 7;
 80005e8:	2307      	movs	r3, #7
 80005ea:	80fb      	strh	r3, [r7, #6]
  const char* text = "Wiktoria Ulazka - Aleksandra Janczarek - Natalia Moczydlowska - ";
 80005ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000668 <main+0xac>)
 80005ee:	603b      	str	r3, [r7, #0]
  int16_t offset = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	81bb      	strh	r3, [r7, #12]

  while(1) {
	  offset += 1;
 80005f4:	89bb      	ldrh	r3, [r7, #12]
 80005f6:	3301      	adds	r3, #1
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	81bb      	strh	r3, [r7, #12]

	  const char* pt = text;
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	60bb      	str	r3, [r7, #8]

	  if(y>15) return 0;
 8000600:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000604:	2b0f      	cmp	r3, #15
 8000606:	dd23      	ble.n	8000650 <main+0x94>
 8000608:	2300      	movs	r3, #0
 800060a:	e029      	b.n	8000660 <main+0xa4>
	      while(*pt){
	        ST7735_DrawCharS(x*6 + offset, y*10, *pt, ST7735_GREEN, ST7735_BLACK, 1);
 800060c:	89fb      	ldrh	r3, [r7, #14]
 800060e:	461a      	mov	r2, r3
 8000610:	0052      	lsls	r2, r2, #1
 8000612:	4413      	add	r3, r2
 8000614:	005b      	lsls	r3, r3, #1
 8000616:	b29a      	uxth	r2, r3
 8000618:	89bb      	ldrh	r3, [r7, #12]
 800061a:	4413      	add	r3, r2
 800061c:	b29b      	uxth	r3, r3
 800061e:	b218      	sxth	r0, r3
 8000620:	88fb      	ldrh	r3, [r7, #6]
 8000622:	461a      	mov	r2, r3
 8000624:	0092      	lsls	r2, r2, #2
 8000626:	4413      	add	r3, r2
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	b29b      	uxth	r3, r3
 800062c:	b219      	sxth	r1, r3
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	781a      	ldrb	r2, [r3, #0]
 8000632:	2301      	movs	r3, #1
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	2300      	movs	r3, #0
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800063e:	f000 fad3 	bl	8000be8 <ST7735_DrawCharS>
	        pt++;
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	3301      	adds	r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
	        x = x+1;
 8000648:	89fb      	ldrh	r3, [r7, #14]
 800064a:	3301      	adds	r3, #1
 800064c:	b29b      	uxth	r3, r3
 800064e:	81fb      	strh	r3, [r7, #14]
	      while(*pt){
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d1d9      	bne.n	800060c <main+0x50>
	    }
	  HAL_Delay(1);
 8000658:	2001      	movs	r0, #1
 800065a:	f000 fe13 	bl	8001284 <HAL_Delay>
  while(1) {
 800065e:	e7c9      	b.n	80005f4 <main+0x38>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//  /* Program never reaches here */
  /* USER CODE END 3 */
}
 8000660:	4618      	mov	r0, r3
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	08004b58 	.word	0x08004b58

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b096      	sub	sp, #88	@ 0x58
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	2244      	movs	r2, #68	@ 0x44
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f004 fa33 	bl	8004ae6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	463b      	mov	r3, r7
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800068e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000692:	f001 fb07 	bl	8001ca4 <HAL_PWREx_ControlVoltageScaling>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800069c:	f000 f837 	bl	800070e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a0:	2302      	movs	r3, #2
 80006a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006aa:	2310      	movs	r3, #16
 80006ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ae:	2302      	movs	r3, #2
 80006b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b2:	2302      	movs	r3, #2
 80006b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b6:	2301      	movs	r3, #1
 80006b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006ba:	230a      	movs	r3, #10
 80006bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006be:	2307      	movs	r3, #7
 80006c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 fb3e 	bl	8001d50 <HAL_RCC_OscConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006da:	f000 f818 	bl	800070e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006de:	230f      	movs	r3, #15
 80006e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e2:	2303      	movs	r3, #3
 80006e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006f2:	463b      	mov	r3, r7
 80006f4:	2104      	movs	r1, #4
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 ff06 	bl	8002508 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000702:	f000 f804 	bl	800070e <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3758      	adds	r7, #88	@ 0x58
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000712:	b672      	cpsid	i
}
 8000714:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000716:	bf00      	nop
 8000718:	e7fd      	b.n	8000716 <Error_Handler+0x8>
	...

0800071c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000720:	4b1b      	ldr	r3, [pc, #108]	@ (8000790 <MX_SPI1_Init+0x74>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <MX_SPI1_Init+0x78>)
 8000724:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000726:	4b1a      	ldr	r3, [pc, #104]	@ (8000790 <MX_SPI1_Init+0x74>)
 8000728:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800072c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072e:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <MX_SPI1_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000734:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <MX_SPI1_Init+0x74>)
 8000736:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800073a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800073c:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <MX_SPI1_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000742:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <MX_SPI1_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000748:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <MX_SPI1_Init+0x74>)
 800074a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800074e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000750:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <MX_SPI1_Init+0x74>)
 8000752:	2210      	movs	r2, #16
 8000754:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000756:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <MX_SPI1_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800075c:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <MX_SPI1_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <MX_SPI1_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000768:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <MX_SPI1_Init+0x74>)
 800076a:	2207      	movs	r2, #7
 800076c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800076e:	4b08      	ldr	r3, [pc, #32]	@ (8000790 <MX_SPI1_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000774:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <MX_SPI1_Init+0x74>)
 8000776:	2208      	movs	r2, #8
 8000778:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	@ (8000790 <MX_SPI1_Init+0x74>)
 800077c:	f002 fda4 	bl	80032c8 <HAL_SPI_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000786:	f7ff ffc2 	bl	800070e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000028 	.word	0x20000028
 8000794:	40013000 	.word	0x40013000

08000798 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	@ 0x28
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a2c      	ldr	r2, [pc, #176]	@ (8000868 <HAL_SPI_MspInit+0xd0>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d151      	bne.n	800085e <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007ba:	4b2c      	ldr	r3, [pc, #176]	@ (800086c <HAL_SPI_MspInit+0xd4>)
 80007bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007be:	4a2b      	ldr	r2, [pc, #172]	@ (800086c <HAL_SPI_MspInit+0xd4>)
 80007c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80007c6:	4b29      	ldr	r3, [pc, #164]	@ (800086c <HAL_SPI_MspInit+0xd4>)
 80007c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	4b26      	ldr	r3, [pc, #152]	@ (800086c <HAL_SPI_MspInit+0xd4>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d6:	4a25      	ldr	r2, [pc, #148]	@ (800086c <HAL_SPI_MspInit+0xd4>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007de:	4b23      	ldr	r3, [pc, #140]	@ (800086c <HAL_SPI_MspInit+0xd4>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80007ea:	23e0      	movs	r3, #224	@ 0xe0
 80007ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f6:	2303      	movs	r3, #3
 80007f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007fa:	2305      	movs	r3, #5
 80007fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	4619      	mov	r1, r3
 8000804:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000808:	f001 f858 	bl	80018bc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 800080c:	4b18      	ldr	r3, [pc, #96]	@ (8000870 <HAL_SPI_MspInit+0xd8>)
 800080e:	4a19      	ldr	r2, [pc, #100]	@ (8000874 <HAL_SPI_MspInit+0xdc>)
 8000810:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8000812:	4b17      	ldr	r3, [pc, #92]	@ (8000870 <HAL_SPI_MspInit+0xd8>)
 8000814:	2201      	movs	r2, #1
 8000816:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000818:	4b15      	ldr	r3, [pc, #84]	@ (8000870 <HAL_SPI_MspInit+0xd8>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800081e:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <HAL_SPI_MspInit+0xd8>)
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000824:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <HAL_SPI_MspInit+0xd8>)
 8000826:	2280      	movs	r2, #128	@ 0x80
 8000828:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800082a:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <HAL_SPI_MspInit+0xd8>)
 800082c:	2200      	movs	r2, #0
 800082e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000830:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <HAL_SPI_MspInit+0xd8>)
 8000832:	2200      	movs	r2, #0
 8000834:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000836:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <HAL_SPI_MspInit+0xd8>)
 8000838:	2200      	movs	r2, #0
 800083a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800083c:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <HAL_SPI_MspInit+0xd8>)
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000842:	480b      	ldr	r0, [pc, #44]	@ (8000870 <HAL_SPI_MspInit+0xd8>)
 8000844:	f000 fe54 	bl	80014f0 <HAL_DMA_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 800084e:	f7ff ff5e 	bl	800070e <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4a06      	ldr	r2, [pc, #24]	@ (8000870 <HAL_SPI_MspInit+0xd8>)
 8000856:	659a      	str	r2, [r3, #88]	@ 0x58
 8000858:	4a05      	ldr	r2, [pc, #20]	@ (8000870 <HAL_SPI_MspInit+0xd8>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800085e:	bf00      	nop
 8000860:	3728      	adds	r7, #40	@ 0x28
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40013000 	.word	0x40013000
 800086c:	40021000 	.word	0x40021000
 8000870:	2000008c 	.word	0x2000008c
 8000874:	4002001c 	.word	0x4002001c

08000878 <ST7735_SetAddressWindow>:
int32_t Ymax,Ymin,X;        // X goes from 0 to 127
int32_t Yrange; //YrangeDiv2;
int TimeIndex;
uint16_t PlotBGColor;
 
static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4604      	mov	r4, r0
 8000880:	4608      	mov	r0, r1
 8000882:	4611      	mov	r1, r2
 8000884:	461a      	mov	r2, r3
 8000886:	4623      	mov	r3, r4
 8000888:	71fb      	strb	r3, [r7, #7]
 800088a:	4603      	mov	r3, r0
 800088c:	71bb      	strb	r3, [r7, #6]
 800088e:	460b      	mov	r3, r1
 8000890:	717b      	strb	r3, [r7, #5]
 8000892:	4613      	mov	r3, r2
 8000894:	713b      	strb	r3, [r7, #4]
    lcd7735_sendCmd(ST7735_CASET); // Column addr set
 8000896:	202a      	movs	r0, #42	@ 0x2a
 8000898:	f000 fafa 	bl	8000e90 <lcd7735_sendCmd>
		lcd7735_sendData(0x00);            // XS15 ~ XS8
 800089c:	2000      	movs	r0, #0
 800089e:	f000 fb0d 	bl	8000ebc <lcd7735_sendData>
		lcd7735_sendData(x0+ST7735_XSTART);     // XSTART       XS7 ~ XS0
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f000 fb09 	bl	8000ebc <lcd7735_sendData>
		lcd7735_sendData(0x00);            // XE15 ~ XE8
 80008aa:	2000      	movs	r0, #0
 80008ac:	f000 fb06 	bl	8000ebc <lcd7735_sendData>
		lcd7735_sendData(x1+ST7735_XSTART);     // XEND         XE7 ~ XE0
 80008b0:	797b      	ldrb	r3, [r7, #5]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 fb02 	bl	8000ebc <lcd7735_sendData>
 
		lcd7735_sendCmd(ST7735_RASET); // Row addr set
 80008b8:	202b      	movs	r0, #43	@ 0x2b
 80008ba:	f000 fae9 	bl	8000e90 <lcd7735_sendCmd>
		lcd7735_sendData(0x00);
 80008be:	2000      	movs	r0, #0
 80008c0:	f000 fafc 	bl	8000ebc <lcd7735_sendData>
		lcd7735_sendData(y0+ST7735_YSTART);     // YSTART
 80008c4:	79bb      	ldrb	r3, [r7, #6]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 faf8 	bl	8000ebc <lcd7735_sendData>
		lcd7735_sendData(0x00);
 80008cc:	2000      	movs	r0, #0
 80008ce:	f000 faf5 	bl	8000ebc <lcd7735_sendData>
		lcd7735_sendData(y1+ST7735_YSTART);     // YEND
 80008d2:	793b      	ldrb	r3, [r7, #4]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 faf1 	bl	8000ebc <lcd7735_sendData>
	
		lcd7735_sendCmd(ST7735_RAMWR); 
 80008da:	202c      	movs	r0, #44	@ 0x2c
 80008dc:	f000 fad8 	bl	8000e90 <lcd7735_sendCmd>
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd90      	pop	{r4, r7, pc}

080008e8 <ST7735_Init>:
void ST7735_Init() {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
    //ST7735_Select();
	  LCD_CS0;
 80008ec:	2200      	movs	r2, #0
 80008ee:	2140      	movs	r1, #64	@ 0x40
 80008f0:	480e      	ldr	r0, [pc, #56]	@ (800092c <ST7735_Init+0x44>)
 80008f2:	f001 f98d 	bl	8001c10 <HAL_GPIO_WritePin>
    //ST7735_Reset();
	  LCD_RST0;
 80008f6:	2200      	movs	r2, #0
 80008f8:	2180      	movs	r1, #128	@ 0x80
 80008fa:	480c      	ldr	r0, [pc, #48]	@ (800092c <ST7735_Init+0x44>)
 80008fc:	f001 f988 	bl	8001c10 <HAL_GPIO_WritePin>
		HAL_Delay(7);
 8000900:	2007      	movs	r0, #7
 8000902:	f000 fcbf 	bl	8001284 <HAL_Delay>
		LCD_RST1;
 8000906:	2201      	movs	r2, #1
 8000908:	2180      	movs	r1, #128	@ 0x80
 800090a:	4808      	ldr	r0, [pc, #32]	@ (800092c <ST7735_Init+0x44>)
 800090c:	f001 f980 	bl	8001c10 <HAL_GPIO_WritePin>
	
    //ST7735_ExecuteCommandList(init_cmds1);
		ST7735_Init_Command1();
 8000910:	f000 f80e 	bl	8000930 <ST7735_Init_Command1>
    //ST7735_ExecuteCommandList(init_cmds2);
		ST7735_Init_Command2();
 8000914:	f000 f892 	bl	8000a3c <ST7735_Init_Command2>
    //ST7735_ExecuteCommandList(init_cmds3);
		ST7735_Init_Command3();
 8000918:	f000 f8b2 	bl	8000a80 <ST7735_Init_Command3>
	
    //ST7735_Unselect();
		LCD_CS1;		
 800091c:	2201      	movs	r2, #1
 800091e:	2140      	movs	r1, #64	@ 0x40
 8000920:	4802      	ldr	r0, [pc, #8]	@ (800092c <ST7735_Init+0x44>)
 8000922:	f001 f975 	bl	8001c10 <HAL_GPIO_WritePin>
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	48000400 	.word	0x48000400

08000930 <ST7735_Init_Command1>:
 
void ST7735_Init_Command1(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	lcd7735_sendCmd(ST7735_SWRESET);		//  1: Software reset
 8000934:	2001      	movs	r0, #1
 8000936:	f000 faab 	bl	8000e90 <lcd7735_sendCmd>
	HAL_Delay(150);
 800093a:	2096      	movs	r0, #150	@ 0x96
 800093c:	f000 fca2 	bl	8001284 <HAL_Delay>
	lcd7735_sendCmd(ST7735_SLPOUT);			//  2: Out of sleep mode
 8000940:	2011      	movs	r0, #17
 8000942:	f000 faa5 	bl	8000e90 <lcd7735_sendCmd>
	HAL_Delay(500);
 8000946:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800094a:	f000 fc9b 	bl	8001284 <HAL_Delay>
	lcd7735_sendCmd(ST7735_FRMCTR1);		//  3: Frame rate ctrl - normal mode
 800094e:	20b1      	movs	r0, #177	@ 0xb1
 8000950:	f000 fa9e 	bl	8000e90 <lcd7735_sendCmd>
	lcd7735_sendData(0x01);							//     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 8000954:	2001      	movs	r0, #1
 8000956:	f000 fab1 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 800095a:	202c      	movs	r0, #44	@ 0x2c
 800095c:	f000 faae 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8000960:	202d      	movs	r0, #45	@ 0x2d
 8000962:	f000 faab 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_FRMCTR2);		//  4: Frame rate control - idle mode
 8000966:	20b2      	movs	r0, #178	@ 0xb2
 8000968:	f000 fa92 	bl	8000e90 <lcd7735_sendCmd>
	lcd7735_sendData(0x01);							//  Rate = fosc/(1x2+40) * (LINE+2C+2D)
 800096c:	2001      	movs	r0, #1
 800096e:	f000 faa5 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 8000972:	202c      	movs	r0, #44	@ 0x2c
 8000974:	f000 faa2 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8000978:	202d      	movs	r0, #45	@ 0x2d
 800097a:	f000 fa9f 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_FRMCTR3);		//  5: Frame rate ctrl - partial mode
 800097e:	20b3      	movs	r0, #179	@ 0xb3
 8000980:	f000 fa86 	bl	8000e90 <lcd7735_sendCmd>
	lcd7735_sendData(0x01);							//     Dot inversion mode
 8000984:	2001      	movs	r0, #1
 8000986:	f000 fa99 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 800098a:	202c      	movs	r0, #44	@ 0x2c
 800098c:	f000 fa96 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8000990:	202d      	movs	r0, #45	@ 0x2d
 8000992:	f000 fa93 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x01);							//     Line inversion mode
 8000996:	2001      	movs	r0, #1
 8000998:	f000 fa90 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 800099c:	202c      	movs	r0, #44	@ 0x2c
 800099e:	f000 fa8d 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 80009a2:	202d      	movs	r0, #45	@ 0x2d
 80009a4:	f000 fa8a 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_INVCTR);			//  6: Display inversion ctrl
 80009a8:	20b4      	movs	r0, #180	@ 0xb4
 80009aa:	f000 fa71 	bl	8000e90 <lcd7735_sendCmd>
	lcd7735_sendData(0x07);							//     No inversion
 80009ae:	2007      	movs	r0, #7
 80009b0:	f000 fa84 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR1);			//  7: Power control
 80009b4:	20c0      	movs	r0, #192	@ 0xc0
 80009b6:	f000 fa6b 	bl	8000e90 <lcd7735_sendCmd>
	lcd7735_sendData(0xA2);
 80009ba:	20a2      	movs	r0, #162	@ 0xa2
 80009bc:	f000 fa7e 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x02);							//     -4.6V
 80009c0:	2002      	movs	r0, #2
 80009c2:	f000 fa7b 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x84);							//     AUTO mode
 80009c6:	2084      	movs	r0, #132	@ 0x84
 80009c8:	f000 fa78 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR2);			//  8: Power control
 80009cc:	20c1      	movs	r0, #193	@ 0xc1
 80009ce:	f000 fa5f 	bl	8000e90 <lcd7735_sendCmd>
	lcd7735_sendData(0xC5);							//     VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD
 80009d2:	20c5      	movs	r0, #197	@ 0xc5
 80009d4:	f000 fa72 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR3);			//  9: Power control
 80009d8:	20c2      	movs	r0, #194	@ 0xc2
 80009da:	f000 fa59 	bl	8000e90 <lcd7735_sendCmd>
	lcd7735_sendData(0x0A);							//     Opamp current small
 80009de:	200a      	movs	r0, #10
 80009e0:	f000 fa6c 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x00);							//     Boost frequency
 80009e4:	2000      	movs	r0, #0
 80009e6:	f000 fa69 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR4);			// 10: Power control
 80009ea:	20c3      	movs	r0, #195	@ 0xc3
 80009ec:	f000 fa50 	bl	8000e90 <lcd7735_sendCmd>
	lcd7735_sendData(0x8A);							//     BCLK/2, Opamp current small & Medium low
 80009f0:	208a      	movs	r0, #138	@ 0x8a
 80009f2:	f000 fa63 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x2A);
 80009f6:	202a      	movs	r0, #42	@ 0x2a
 80009f8:	f000 fa60 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR5);			// 11: Power control
 80009fc:	20c4      	movs	r0, #196	@ 0xc4
 80009fe:	f000 fa47 	bl	8000e90 <lcd7735_sendCmd>
	lcd7735_sendData(0x8A);
 8000a02:	208a      	movs	r0, #138	@ 0x8a
 8000a04:	f000 fa5a 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0xEE);
 8000a08:	20ee      	movs	r0, #238	@ 0xee
 8000a0a:	f000 fa57 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_VMCTR1);			// 12: Power control
 8000a0e:	20c5      	movs	r0, #197	@ 0xc5
 8000a10:	f000 fa3e 	bl	8000e90 <lcd7735_sendCmd>
	lcd7735_sendData(0x0E);
 8000a14:	200e      	movs	r0, #14
 8000a16:	f000 fa51 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_INVOFF);			// 13: Don't invert display
 8000a1a:	2020      	movs	r0, #32
 8000a1c:	f000 fa38 	bl	8000e90 <lcd7735_sendCmd>
	lcd7735_sendCmd(ST7735_MADCTL);			// 14: Memory access control (directions)
 8000a20:	2036      	movs	r0, #54	@ 0x36
 8000a22:	f000 fa35 	bl	8000e90 <lcd7735_sendCmd>
	lcd7735_sendData(ST7735_ROTATION);	//     row addr/col addr, bottom to top refresh
 8000a26:	20c0      	movs	r0, #192	@ 0xc0
 8000a28:	f000 fa48 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_COLMOD);			// 15: set color mode
 8000a2c:	203a      	movs	r0, #58	@ 0x3a
 8000a2e:	f000 fa2f 	bl	8000e90 <lcd7735_sendCmd>
	lcd7735_sendData(0x05);							//     16-bit color
 8000a32:	2005      	movs	r0, #5
 8000a34:	f000 fa42 	bl	8000ebc <lcd7735_sendData>
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <ST7735_Init_Command2>:
 
void ST7735_Init_Command2(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	lcd7735_sendCmd(ST7735_CASET);			//  1: Column addr set
 8000a40:	202a      	movs	r0, #42	@ 0x2a
 8000a42:	f000 fa25 	bl	8000e90 <lcd7735_sendCmd>
	lcd7735_sendData(0x00);							//     XSTART = 0
 8000a46:	2000      	movs	r0, #0
 8000a48:	f000 fa38 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f000 fa35 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x00);							//     XEND = 127
 8000a52:	2000      	movs	r0, #0
 8000a54:	f000 fa32 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x7F);
 8000a58:	207f      	movs	r0, #127	@ 0x7f
 8000a5a:	f000 fa2f 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_RASET);			//  2: Row addr set
 8000a5e:	202b      	movs	r0, #43	@ 0x2b
 8000a60:	f000 fa16 	bl	8000e90 <lcd7735_sendCmd>
	lcd7735_sendData(0x00);							//     XSTART = 0
 8000a64:	2000      	movs	r0, #0
 8000a66:	f000 fa29 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f000 fa26 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x00);							//     XEND = 127
 8000a70:	2000      	movs	r0, #0
 8000a72:	f000 fa23 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x7F);
 8000a76:	207f      	movs	r0, #127	@ 0x7f
 8000a78:	f000 fa20 	bl	8000ebc <lcd7735_sendData>
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <ST7735_Init_Command3>:
 
void ST7735_Init_Command3(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	lcd7735_sendCmd(ST7735_GMCTRP1);  //  1: Magical unicorn dust
 8000a84:	20e0      	movs	r0, #224	@ 0xe0
 8000a86:	f000 fa03 	bl	8000e90 <lcd7735_sendCmd>
	lcd7735_sendData(0x02);
 8000a8a:	2002      	movs	r0, #2
 8000a8c:	f000 fa16 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x1C);
 8000a90:	201c      	movs	r0, #28
 8000a92:	f000 fa13 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x07);
 8000a96:	2007      	movs	r0, #7
 8000a98:	f000 fa10 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x12);
 8000a9c:	2012      	movs	r0, #18
 8000a9e:	f000 fa0d 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x37);
 8000aa2:	2037      	movs	r0, #55	@ 0x37
 8000aa4:	f000 fa0a 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x32);
 8000aa8:	2032      	movs	r0, #50	@ 0x32
 8000aaa:	f000 fa07 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x29);
 8000aae:	2029      	movs	r0, #41	@ 0x29
 8000ab0:	f000 fa04 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8000ab4:	202d      	movs	r0, #45	@ 0x2d
 8000ab6:	f000 fa01 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x29);
 8000aba:	2029      	movs	r0, #41	@ 0x29
 8000abc:	f000 f9fe 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x25);
 8000ac0:	2025      	movs	r0, #37	@ 0x25
 8000ac2:	f000 f9fb 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x2B);
 8000ac6:	202b      	movs	r0, #43	@ 0x2b
 8000ac8:	f000 f9f8 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x39);
 8000acc:	2039      	movs	r0, #57	@ 0x39
 8000ace:	f000 f9f5 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f000 f9f2 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x01);
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f000 f9ef 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x03);
 8000ade:	2003      	movs	r0, #3
 8000ae0:	f000 f9ec 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x10);
 8000ae4:	2010      	movs	r0, #16
 8000ae6:	f000 f9e9 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_GMCTRN1);  //  2: Sparkles and rainbows
 8000aea:	20e1      	movs	r0, #225	@ 0xe1
 8000aec:	f000 f9d0 	bl	8000e90 <lcd7735_sendCmd>
	lcd7735_sendData(0x03);
 8000af0:	2003      	movs	r0, #3
 8000af2:	f000 f9e3 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x1D);
 8000af6:	201d      	movs	r0, #29
 8000af8:	f000 f9e0 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x07);
 8000afc:	2007      	movs	r0, #7
 8000afe:	f000 f9dd 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x06);
 8000b02:	2006      	movs	r0, #6
 8000b04:	f000 f9da 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x2E);
 8000b08:	202e      	movs	r0, #46	@ 0x2e
 8000b0a:	f000 f9d7 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 8000b0e:	202c      	movs	r0, #44	@ 0x2c
 8000b10:	f000 f9d4 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x29);
 8000b14:	2029      	movs	r0, #41	@ 0x29
 8000b16:	f000 f9d1 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8000b1a:	202d      	movs	r0, #45	@ 0x2d
 8000b1c:	f000 f9ce 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x2E);
 8000b20:	202e      	movs	r0, #46	@ 0x2e
 8000b22:	f000 f9cb 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x2E);
 8000b26:	202e      	movs	r0, #46	@ 0x2e
 8000b28:	f000 f9c8 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x37);
 8000b2c:	2037      	movs	r0, #55	@ 0x37
 8000b2e:	f000 f9c5 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x3F);
 8000b32:	203f      	movs	r0, #63	@ 0x3f
 8000b34:	f000 f9c2 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f000 f9bf 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f000 f9bc 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x02);
 8000b44:	2002      	movs	r0, #2
 8000b46:	f000 f9b9 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendData(0x10);
 8000b4a:	2010      	movs	r0, #16
 8000b4c:	f000 f9b6 	bl	8000ebc <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_NORON);
 8000b50:	2013      	movs	r0, #19
 8000b52:	f000 f99d 	bl	8000e90 <lcd7735_sendCmd>
	HAL_Delay(10);
 8000b56:	200a      	movs	r0, #10
 8000b58:	f000 fb94 	bl	8001284 <HAL_Delay>
	lcd7735_sendCmd(ST7735_DISPON);
 8000b5c:	2029      	movs	r0, #41	@ 0x29
 8000b5e:	f000 f997 	bl	8000e90 <lcd7735_sendCmd>
	HAL_Delay(100);
 8000b62:	2064      	movs	r0, #100	@ 0x64
 8000b64:	f000 fb8e 	bl	8001284 <HAL_Delay>
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <ST7735_DrawPixel>:
    TimeIndex = 0;
  }
  ST7735_DrawFastVLine(TimeIndex + 11, 17, 100, PlotBGColor);
}

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	80fb      	strh	r3, [r7, #6]
 8000b76:	460b      	mov	r3, r1
 8000b78:	80bb      	strh	r3, [r7, #4]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 8000b7e:	88fb      	ldrh	r3, [r7, #6]
 8000b80:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b82:	d82b      	bhi.n	8000bdc <ST7735_DrawPixel+0x70>
 8000b84:	88bb      	ldrh	r3, [r7, #4]
 8000b86:	2b9f      	cmp	r3, #159	@ 0x9f
 8000b88:	d828      	bhi.n	8000bdc <ST7735_DrawPixel+0x70>
        return;
 
    LCD_CS0;
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2140      	movs	r1, #64	@ 0x40
 8000b8e:	4815      	ldr	r0, [pc, #84]	@ (8000be4 <ST7735_DrawPixel+0x78>)
 8000b90:	f001 f83e 	bl	8001c10 <HAL_GPIO_WritePin>
 
    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8000b94:	88fb      	ldrh	r3, [r7, #6]
 8000b96:	b2d8      	uxtb	r0, r3
 8000b98:	88bb      	ldrh	r3, [r7, #4]
 8000b9a:	b2d9      	uxtb	r1, r3
 8000b9c:	88fb      	ldrh	r3, [r7, #6]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	88bb      	ldrh	r3, [r7, #4]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	3301      	adds	r3, #1
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	f7ff fe64 	bl	8000878 <ST7735_SetAddressWindow>
    uint8_t data[2];
		data[0] = color >> 8;
 8000bb0:	887b      	ldrh	r3, [r7, #2]
 8000bb2:	0a1b      	lsrs	r3, r3, #8
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	733b      	strb	r3, [r7, #12]
		data[1] = color & 0xFF;
 8000bba:	887b      	ldrh	r3, [r7, #2]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	737b      	strb	r3, [r7, #13]
		lcd7735_sendData(data[0]);
 8000bc0:	7b3b      	ldrb	r3, [r7, #12]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f97a 	bl	8000ebc <lcd7735_sendData>
		lcd7735_sendData(data[1]);
 8000bc8:	7b7b      	ldrb	r3, [r7, #13]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 f976 	bl	8000ebc <lcd7735_sendData>
 
    LCD_CS1;  //unselect
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2140      	movs	r1, #64	@ 0x40
 8000bd4:	4803      	ldr	r0, [pc, #12]	@ (8000be4 <ST7735_DrawPixel+0x78>)
 8000bd6:	f001 f81b 	bl	8001c10 <HAL_GPIO_WritePin>
 8000bda:	e000      	b.n	8000bde <ST7735_DrawPixel+0x72>
        return;
 8000bdc:	bf00      	nop
}
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	48000400 	.word	0x48000400

08000be8 <ST7735_DrawCharS>:
    if(x>20) return count;  // number of characters printed
    count++;
  }
  return count;  // number of characters printed
}
void ST7735_DrawCharS(int16_t x, int16_t y, char c, int16_t textColor, int16_t bgColor, uint8_t size){
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b089      	sub	sp, #36	@ 0x24
 8000bec:	af02      	add	r7, sp, #8
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4623      	mov	r3, r4
 8000bf8:	80fb      	strh	r3, [r7, #6]
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	80bb      	strh	r3, [r7, #4]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	70fb      	strb	r3, [r7, #3]
 8000c02:	4613      	mov	r3, r2
 8000c04:	803b      	strh	r3, [r7, #0]
  uint8_t line; 
  int32_t i, j;
  if((x >= ST7735_WIDTH)            || 
 8000c06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c0c:	f300 80b3 	bgt.w	8000d76 <ST7735_DrawCharS+0x18e>
 8000c10:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c14:	2b9f      	cmp	r3, #159	@ 0x9f
 8000c16:	f300 80ae 	bgt.w	8000d76 <ST7735_DrawCharS+0x18e>
     (y >= ST7735_HEIGHT)           || 
     ((x + 5 * size - 1) < 0) || 
 8000c1a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000c1e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000c22:	4613      	mov	r3, r2
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	4413      	add	r3, r2
 8000c28:	440b      	add	r3, r1
     (y >= ST7735_HEIGHT)           || 
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f340 80a3 	ble.w	8000d76 <ST7735_DrawCharS+0x18e>
     ((y + 8 * size - 1) < 0))   
 8000c30:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000c34:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	4413      	add	r3, r2
     ((x + 5 * size - 1) < 0) || 
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	f340 809a 	ble.w	8000d76 <ST7735_DrawCharS+0x18e>
    return;
 
  for (i=0; i<6; i++ ) {
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	e091      	b.n	8000d6c <ST7735_DrawCharS+0x184>
    if (i == 5)
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	2b05      	cmp	r3, #5
 8000c4c:	d102      	bne.n	8000c54 <ST7735_DrawCharS+0x6c>
      line = 0x0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	75fb      	strb	r3, [r7, #23]
 8000c52:	e008      	b.n	8000c66 <ST7735_DrawCharS+0x7e>
    else
      line = Font[(c*5)+i];
 8000c54:	78fa      	ldrb	r2, [r7, #3]
 8000c56:	4613      	mov	r3, r2
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	441a      	add	r2, r3
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	4413      	add	r3, r2
 8000c60:	4a47      	ldr	r2, [pc, #284]	@ (8000d80 <ST7735_DrawCharS+0x198>)
 8000c62:	5cd3      	ldrb	r3, [r2, r3]
 8000c64:	75fb      	strb	r3, [r7, #23]
    for (j = 0; j<8; j++) {
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	e079      	b.n	8000d60 <ST7735_DrawCharS+0x178>
      if (line & 0x1) {
 8000c6c:	7dfb      	ldrb	r3, [r7, #23]
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d034      	beq.n	8000ce0 <ST7735_DrawCharS+0xf8>
        if (size == 1) 
 8000c76:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d10e      	bne.n	8000c9c <ST7735_DrawCharS+0xb4>
          ST7735_DrawPixel(x+i, y+j, textColor);
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	88fb      	ldrh	r3, [r7, #6]
 8000c84:	4413      	add	r3, r2
 8000c86:	b298      	uxth	r0, r3
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	88bb      	ldrh	r3, [r7, #4]
 8000c8e:	4413      	add	r3, r2
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	883a      	ldrh	r2, [r7, #0]
 8000c94:	4619      	mov	r1, r3
 8000c96:	f7ff ff69 	bl	8000b6c <ST7735_DrawPixel>
 8000c9a:	e05b      	b.n	8000d54 <ST7735_DrawCharS+0x16c>
        else {  
          ST7735_FillRectangle(x+(i*size), y+(j*size), size, size, textColor);
 8000c9c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000ca0:	b29a      	uxth	r2, r3
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	fb12 f303 	smulbb	r3, r2, r3
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	88fb      	ldrh	r3, [r7, #6]
 8000cae:	4413      	add	r3, r2
 8000cb0:	b298      	uxth	r0, r3
 8000cb2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	fb12 f303 	smulbb	r3, r2, r3
 8000cc0:	b29a      	uxth	r2, r3
 8000cc2:	88bb      	ldrh	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	b299      	uxth	r1, r3
 8000cc8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000ccc:	b29a      	uxth	r2, r3
 8000cce:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000cd2:	b29c      	uxth	r4, r3
 8000cd4:	883b      	ldrh	r3, [r7, #0]
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	4623      	mov	r3, r4
 8000cda:	f000 f853 	bl	8000d84 <ST7735_FillRectangle>
 8000cde:	e039      	b.n	8000d54 <ST7735_DrawCharS+0x16c>
        }
      } else if (bgColor != textColor) {
 8000ce0:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 8000ce4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d033      	beq.n	8000d54 <ST7735_DrawCharS+0x16c>
        if (size == 1) // default size
 8000cec:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d10e      	bne.n	8000d12 <ST7735_DrawCharS+0x12a>
          ST7735_DrawPixel(x+i, y+j, bgColor);
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	b298      	uxth	r0, r3
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	88bb      	ldrh	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	f7ff ff2e 	bl	8000b6c <ST7735_DrawPixel>
 8000d10:	e020      	b.n	8000d54 <ST7735_DrawCharS+0x16c>
        else {  // big size
         ST7735_FillRectangle(x+i*size, y+j*size, size, size, bgColor);
 8000d12:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000d16:	b29a      	uxth	r2, r3
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	fb12 f303 	smulbb	r3, r2, r3
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	88fb      	ldrh	r3, [r7, #6]
 8000d24:	4413      	add	r3, r2
 8000d26:	b298      	uxth	r0, r3
 8000d28:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	fb12 f303 	smulbb	r3, r2, r3
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	88bb      	ldrh	r3, [r7, #4]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	b299      	uxth	r1, r3
 8000d3e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000d48:	b29c      	uxth	r4, r3
 8000d4a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	4623      	mov	r3, r4
 8000d50:	f000 f818 	bl	8000d84 <ST7735_FillRectangle>
        }
      }
      line >>= 1;
 8000d54:	7dfb      	ldrb	r3, [r7, #23]
 8000d56:	085b      	lsrs	r3, r3, #1
 8000d58:	75fb      	strb	r3, [r7, #23]
    for (j = 0; j<8; j++) {
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	2b07      	cmp	r3, #7
 8000d64:	dd82      	ble.n	8000c6c <ST7735_DrawCharS+0x84>
  for (i=0; i<6; i++ ) {
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	2b05      	cmp	r3, #5
 8000d70:	f77f af6a 	ble.w	8000c48 <ST7735_DrawCharS+0x60>
 8000d74:	e000      	b.n	8000d78 <ST7735_DrawCharS+0x190>
    return;
 8000d76:	bf00      	nop
    }
  }
}
 8000d78:	371c      	adds	r7, #28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd90      	pop	{r4, r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	08004b9c 	.word	0x08004b9c

08000d84 <ST7735_FillRectangle>:
    lcd7735_sendData(lo);
  }
	LCD_CS1;
}
	
void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	4611      	mov	r1, r2
 8000d90:	461a      	mov	r2, r3
 8000d92:	4623      	mov	r3, r4
 8000d94:	80fb      	strh	r3, [r7, #6]
 8000d96:	4603      	mov	r3, r0
 8000d98:	80bb      	strh	r3, [r7, #4]
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	807b      	strh	r3, [r7, #2]
 8000d9e:	4613      	mov	r3, r2
 8000da0:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	2b7f      	cmp	r3, #127	@ 0x7f
 8000da6:	d85a      	bhi.n	8000e5e <ST7735_FillRectangle+0xda>
 8000da8:	88bb      	ldrh	r3, [r7, #4]
 8000daa:	2b9f      	cmp	r3, #159	@ 0x9f
 8000dac:	d857      	bhi.n	8000e5e <ST7735_FillRectangle+0xda>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000dae:	88fa      	ldrh	r2, [r7, #6]
 8000db0:	887b      	ldrh	r3, [r7, #2]
 8000db2:	4413      	add	r3, r2
 8000db4:	2b80      	cmp	r3, #128	@ 0x80
 8000db6:	dd03      	ble.n	8000dc0 <ST7735_FillRectangle+0x3c>
 8000db8:	88fb      	ldrh	r3, [r7, #6]
 8000dba:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000dbe:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000dc0:	88ba      	ldrh	r2, [r7, #4]
 8000dc2:	883b      	ldrh	r3, [r7, #0]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	2ba0      	cmp	r3, #160	@ 0xa0
 8000dc8:	dd03      	ble.n	8000dd2 <ST7735_FillRectangle+0x4e>
 8000dca:	88bb      	ldrh	r3, [r7, #4]
 8000dcc:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8000dd0:	803b      	strh	r3, [r7, #0]
 
    LCD_CS0;
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2140      	movs	r1, #64	@ 0x40
 8000dd6:	4824      	ldr	r0, [pc, #144]	@ (8000e68 <ST7735_FillRectangle+0xe4>)
 8000dd8:	f000 ff1a 	bl	8001c10 <HAL_GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	b2d8      	uxtb	r0, r3
 8000de0:	88bb      	ldrh	r3, [r7, #4]
 8000de2:	b2d9      	uxtb	r1, r3
 8000de4:	88fb      	ldrh	r3, [r7, #6]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	887b      	ldrh	r3, [r7, #2]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	4413      	add	r3, r2
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	3b01      	subs	r3, #1
 8000df2:	b2dc      	uxtb	r4, r3
 8000df4:	88bb      	ldrh	r3, [r7, #4]
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	883b      	ldrh	r3, [r7, #0]
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	4413      	add	r3, r2
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	3b01      	subs	r3, #1
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	4622      	mov	r2, r4
 8000e06:	f7ff fd37 	bl	8000878 <ST7735_SetAddressWindow>
    LCD_DC1;
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e10:	4815      	ldr	r0, [pc, #84]	@ (8000e68 <ST7735_FillRectangle+0xe4>)
 8000e12:	f000 fefd 	bl	8001c10 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000e16:	883b      	ldrh	r3, [r7, #0]
 8000e18:	80bb      	strh	r3, [r7, #4]
 8000e1a:	e017      	b.n	8000e4c <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {            
 8000e1c:	887b      	ldrh	r3, [r7, #2]
 8000e1e:	80fb      	strh	r3, [r7, #6]
 8000e20:	e00e      	b.n	8000e40 <ST7735_FillRectangle+0xbc>
					lcd7735_sendData(color>>8);
 8000e22:	8b3b      	ldrh	r3, [r7, #24]
 8000e24:	0a1b      	lsrs	r3, r3, #8
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 f846 	bl	8000ebc <lcd7735_sendData>
					lcd7735_sendData(color);
 8000e30:	8b3b      	ldrh	r3, [r7, #24]
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 f841 	bl	8000ebc <lcd7735_sendData>
        for(x = w; x > 0; x--) {            
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	80fb      	strh	r3, [r7, #6]
 8000e40:	88fb      	ldrh	r3, [r7, #6]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d1ed      	bne.n	8000e22 <ST7735_FillRectangle+0x9e>
    for(y = h; y > 0; y--) {
 8000e46:	88bb      	ldrh	r3, [r7, #4]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	80bb      	strh	r3, [r7, #4]
 8000e4c:	88bb      	ldrh	r3, [r7, #4]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d1e4      	bne.n	8000e1c <ST7735_FillRectangle+0x98>
        }
    }
		
		LCD_CS1;  //Unselect
 8000e52:	2201      	movs	r2, #1
 8000e54:	2140      	movs	r1, #64	@ 0x40
 8000e56:	4804      	ldr	r0, [pc, #16]	@ (8000e68 <ST7735_FillRectangle+0xe4>)
 8000e58:	f000 feda 	bl	8001c10 <HAL_GPIO_WritePin>
 8000e5c:	e000      	b.n	8000e60 <ST7735_FillRectangle+0xdc>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000e5e:	bf00      	nop
}
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd90      	pop	{r4, r7, pc}
 8000e66:	bf00      	nop
 8000e68:	48000400 	.word	0x48000400

08000e6c <ST7735_FillScreen>:
void ST7735_FillScreen(uint16_t color) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af02      	add	r7, sp, #8
 8000e72:	4603      	mov	r3, r0
 8000e74:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	23a0      	movs	r3, #160	@ 0xa0
 8000e7c:	2280      	movs	r2, #128	@ 0x80
 8000e7e:	2100      	movs	r1, #0
 8000e80:	2000      	movs	r0, #0
 8000e82:	f7ff ff7f 	bl	8000d84 <ST7735_FillRectangle>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <lcd7735_sendCmd>:
  //ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
	lcd7735_sendCmd(invert ? ST7735_INVON : ST7735_INVOFF);
  LCD_CS1;  //Unselect
}
 
void lcd7735_sendCmd(uint8_t cmd) {  //uint8_t       //unsigned char
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
   LCD_DC0; //Set DC low
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ea0:	4805      	ldr	r0, [pc, #20]	@ (8000eb8 <lcd7735_sendCmd+0x28>)
 8000ea2:	f000 feb5 	bl	8001c10 <HAL_GPIO_WritePin>
   lcd7735_senddata(cmd);
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 f81d 	bl	8000ee8 <lcd7735_senddata>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	48000400 	.word	0x48000400

08000ebc <lcd7735_sendData>:
 
 
void lcd7735_sendData(uint8_t data) {  //uint8_t      //unsigned char
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
   LCD_DC1;//Set DC HIGH
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ecc:	4805      	ldr	r0, [pc, #20]	@ (8000ee4 <lcd7735_sendData+0x28>)
 8000ece:	f000 fe9f 	bl	8001c10 <HAL_GPIO_WritePin>
   lcd7735_senddata(data);
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 f807 	bl	8000ee8 <lcd7735_senddata>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	48000400 	.word	0x48000400

08000ee8 <lcd7735_senddata>:
 
void lcd7735_senddata(uint8_t data) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi1, &data,sizeof(data),0x1);
 8000ef2:	1df9      	adds	r1, r7, #7
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	4803      	ldr	r0, [pc, #12]	@ (8000f08 <lcd7735_senddata+0x20>)
 8000efa:	f002 fa88 	bl	800340e <HAL_SPI_Transmit>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000028 	.word	0x20000028

08000f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	4b0f      	ldr	r3, [pc, #60]	@ (8000f50 <HAL_MspInit+0x44>)
 8000f14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f16:	4a0e      	ldr	r2, [pc, #56]	@ (8000f50 <HAL_MspInit+0x44>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f50 <HAL_MspInit+0x44>)
 8000f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2a:	4b09      	ldr	r3, [pc, #36]	@ (8000f50 <HAL_MspInit+0x44>)
 8000f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f2e:	4a08      	ldr	r2, [pc, #32]	@ (8000f50 <HAL_MspInit+0x44>)
 8000f30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f34:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f36:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <HAL_MspInit+0x44>)
 8000f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40021000 	.word	0x40021000

08000f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <NMI_Handler+0x4>

08000f5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <HardFault_Handler+0x4>

08000f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <MemManage_Handler+0x4>

08000f6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <BusFault_Handler+0x4>

08000f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <UsageFault_Handler+0x4>

08000f7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000faa:	f000 f94b 	bl	8001244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000fb8:	4802      	ldr	r0, [pc, #8]	@ (8000fc4 <DMA1_Channel2_IRQHandler+0x10>)
 8000fba:	f000 fbd0 	bl	800175e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2000008c 	.word	0x2000008c

08000fc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fcc:	4802      	ldr	r0, [pc, #8]	@ (8000fd8 <USART2_IRQHandler+0x10>)
 8000fce:	f002 fd47 	bl	8003a60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200000d4 	.word	0x200000d4

08000fdc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8000fe0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000fe4:	f000 fe2c 	bl	8001c40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}

08000fec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ff0:	4b06      	ldr	r3, [pc, #24]	@ (800100c <SystemInit+0x20>)
 8000ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ff6:	4a05      	ldr	r2, [pc, #20]	@ (800100c <SystemInit+0x20>)
 8000ff8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ffc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001014:	4b14      	ldr	r3, [pc, #80]	@ (8001068 <MX_USART2_UART_Init+0x58>)
 8001016:	4a15      	ldr	r2, [pc, #84]	@ (800106c <MX_USART2_UART_Init+0x5c>)
 8001018:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800101a:	4b13      	ldr	r3, [pc, #76]	@ (8001068 <MX_USART2_UART_Init+0x58>)
 800101c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001020:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001022:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <MX_USART2_UART_Init+0x58>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001028:	4b0f      	ldr	r3, [pc, #60]	@ (8001068 <MX_USART2_UART_Init+0x58>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800102e:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <MX_USART2_UART_Init+0x58>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001034:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <MX_USART2_UART_Init+0x58>)
 8001036:	220c      	movs	r2, #12
 8001038:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103a:	4b0b      	ldr	r3, [pc, #44]	@ (8001068 <MX_USART2_UART_Init+0x58>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001040:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <MX_USART2_UART_Init+0x58>)
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001046:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <MX_USART2_UART_Init+0x58>)
 8001048:	2200      	movs	r2, #0
 800104a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800104c:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <MX_USART2_UART_Init+0x58>)
 800104e:	2200      	movs	r2, #0
 8001050:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001052:	4805      	ldr	r0, [pc, #20]	@ (8001068 <MX_USART2_UART_Init+0x58>)
 8001054:	f002 fcb6 	bl	80039c4 <HAL_UART_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800105e:	f7ff fb56 	bl	800070e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200000d4 	.word	0x200000d4
 800106c:	40004400 	.word	0x40004400

08001070 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b0ac      	sub	sp, #176	@ 0xb0
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	2288      	movs	r2, #136	@ 0x88
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f003 fd28 	bl	8004ae6 <memset>
  if(uartHandle->Instance==USART2)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a25      	ldr	r2, [pc, #148]	@ (8001130 <HAL_UART_MspInit+0xc0>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d143      	bne.n	8001128 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010a0:	2302      	movs	r3, #2
 80010a2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	4618      	mov	r0, r3
 80010ae:	f001 fc4f 	bl	8002950 <HAL_RCCEx_PeriphCLKConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010b8:	f7ff fb29 	bl	800070e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001134 <HAL_UART_MspInit+0xc4>)
 80010be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001134 <HAL_UART_MspInit+0xc4>)
 80010c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80010c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001134 <HAL_UART_MspInit+0xc4>)
 80010ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	4b17      	ldr	r3, [pc, #92]	@ (8001134 <HAL_UART_MspInit+0xc4>)
 80010d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d8:	4a16      	ldr	r2, [pc, #88]	@ (8001134 <HAL_UART_MspInit+0xc4>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010e0:	4b14      	ldr	r3, [pc, #80]	@ (8001134 <HAL_UART_MspInit+0xc4>)
 80010e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010ec:	230c      	movs	r3, #12
 80010ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	2302      	movs	r3, #2
 80010f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fe:	2303      	movs	r3, #3
 8001100:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001104:	2307      	movs	r3, #7
 8001106:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800110e:	4619      	mov	r1, r3
 8001110:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001114:	f000 fbd2 	bl	80018bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001118:	2200      	movs	r2, #0
 800111a:	2100      	movs	r1, #0
 800111c:	2026      	movs	r0, #38	@ 0x26
 800111e:	f000 f9b0 	bl	8001482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001122:	2026      	movs	r0, #38	@ 0x26
 8001124:	f000 f9c9 	bl	80014ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001128:	bf00      	nop
 800112a:	37b0      	adds	r7, #176	@ 0xb0
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40004400 	.word	0x40004400
 8001134:	40021000 	.word	0x40021000

08001138 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001138:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001170 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800113c:	f7ff ff56 	bl	8000fec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001140:	480c      	ldr	r0, [pc, #48]	@ (8001174 <LoopForever+0x6>)
  ldr r1, =_edata
 8001142:	490d      	ldr	r1, [pc, #52]	@ (8001178 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001144:	4a0d      	ldr	r2, [pc, #52]	@ (800117c <LoopForever+0xe>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001148:	e002      	b.n	8001150 <LoopCopyDataInit>

0800114a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800114c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114e:	3304      	adds	r3, #4

08001150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001154:	d3f9      	bcc.n	800114a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001156:	4a0a      	ldr	r2, [pc, #40]	@ (8001180 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001158:	4c0a      	ldr	r4, [pc, #40]	@ (8001184 <LoopForever+0x16>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800115c:	e001      	b.n	8001162 <LoopFillZerobss>

0800115e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001160:	3204      	adds	r2, #4

08001162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001164:	d3fb      	bcc.n	800115e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001166:	f003 fcc7 	bl	8004af8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800116a:	f7ff fa27 	bl	80005bc <main>

0800116e <LoopForever>:

LoopForever:
    b LoopForever
 800116e:	e7fe      	b.n	800116e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001170:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001178:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800117c:	080050f0 	.word	0x080050f0
  ldr r2, =_sbss
 8001180:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001184:	20000160 	.word	0x20000160

08001188 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001188:	e7fe      	b.n	8001188 <ADC1_2_IRQHandler>
	...

0800118c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001196:	4b0c      	ldr	r3, [pc, #48]	@ (80011c8 <HAL_Init+0x3c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a0b      	ldr	r2, [pc, #44]	@ (80011c8 <HAL_Init+0x3c>)
 800119c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011a0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a2:	2003      	movs	r0, #3
 80011a4:	f000 f962 	bl	800146c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011a8:	2000      	movs	r0, #0
 80011aa:	f000 f80f 	bl	80011cc <HAL_InitTick>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d002      	beq.n	80011ba <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	71fb      	strb	r3, [r7, #7]
 80011b8:	e001      	b.n	80011be <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011ba:	f7ff fea7 	bl	8000f0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011be:	79fb      	ldrb	r3, [r7, #7]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40022000 	.word	0x40022000

080011cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011d8:	4b17      	ldr	r3, [pc, #92]	@ (8001238 <HAL_InitTick+0x6c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d023      	beq.n	8001228 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011e0:	4b16      	ldr	r3, [pc, #88]	@ (800123c <HAL_InitTick+0x70>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b14      	ldr	r3, [pc, #80]	@ (8001238 <HAL_InitTick+0x6c>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4619      	mov	r1, r3
 80011ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80011f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 f96d 	bl	80014d6 <HAL_SYSTICK_Config>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d10f      	bne.n	8001222 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b0f      	cmp	r3, #15
 8001206:	d809      	bhi.n	800121c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001208:	2200      	movs	r2, #0
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f000 f937 	bl	8001482 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001214:	4a0a      	ldr	r2, [pc, #40]	@ (8001240 <HAL_InitTick+0x74>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	e007      	b.n	800122c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	73fb      	strb	r3, [r7, #15]
 8001220:	e004      	b.n	800122c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	73fb      	strb	r3, [r7, #15]
 8001226:	e001      	b.n	800122c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800122c:	7bfb      	ldrb	r3, [r7, #15]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000008 	.word	0x20000008
 800123c:	20000000 	.word	0x20000000
 8001240:	20000004 	.word	0x20000004

08001244 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001248:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <HAL_IncTick+0x20>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <HAL_IncTick+0x24>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4413      	add	r3, r2
 8001254:	4a04      	ldr	r2, [pc, #16]	@ (8001268 <HAL_IncTick+0x24>)
 8001256:	6013      	str	r3, [r2, #0]
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000008 	.word	0x20000008
 8001268:	2000015c 	.word	0x2000015c

0800126c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return uwTick;
 8001270:	4b03      	ldr	r3, [pc, #12]	@ (8001280 <HAL_GetTick+0x14>)
 8001272:	681b      	ldr	r3, [r3, #0]
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	2000015c 	.word	0x2000015c

08001284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800128c:	f7ff ffee 	bl	800126c <HAL_GetTick>
 8001290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800129c:	d005      	beq.n	80012aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800129e:	4b0a      	ldr	r3, [pc, #40]	@ (80012c8 <HAL_Delay+0x44>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4413      	add	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012aa:	bf00      	nop
 80012ac:	f7ff ffde 	bl	800126c <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d8f7      	bhi.n	80012ac <HAL_Delay+0x28>
  {
  }
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000008 	.word	0x20000008

080012cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012e8:	4013      	ands	r3, r2
 80012ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fe:	4a04      	ldr	r2, [pc, #16]	@ (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	60d3      	str	r3, [r2, #12]
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001318:	4b04      	ldr	r3, [pc, #16]	@ (800132c <__NVIC_GetPriorityGrouping+0x18>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	0a1b      	lsrs	r3, r3, #8
 800131e:	f003 0307 	and.w	r3, r3, #7
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	2b00      	cmp	r3, #0
 8001340:	db0b      	blt.n	800135a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	f003 021f 	and.w	r2, r3, #31
 8001348:	4907      	ldr	r1, [pc, #28]	@ (8001368 <__NVIC_EnableIRQ+0x38>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	095b      	lsrs	r3, r3, #5
 8001350:	2001      	movs	r0, #1
 8001352:	fa00 f202 	lsl.w	r2, r0, r2
 8001356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000e100 	.word	0xe000e100

0800136c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	6039      	str	r1, [r7, #0]
 8001376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137c:	2b00      	cmp	r3, #0
 800137e:	db0a      	blt.n	8001396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	b2da      	uxtb	r2, r3
 8001384:	490c      	ldr	r1, [pc, #48]	@ (80013b8 <__NVIC_SetPriority+0x4c>)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	0112      	lsls	r2, r2, #4
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	440b      	add	r3, r1
 8001390:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001394:	e00a      	b.n	80013ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4908      	ldr	r1, [pc, #32]	@ (80013bc <__NVIC_SetPriority+0x50>)
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	3b04      	subs	r3, #4
 80013a4:	0112      	lsls	r2, r2, #4
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	440b      	add	r3, r1
 80013aa:	761a      	strb	r2, [r3, #24]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000e100 	.word	0xe000e100
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b089      	sub	sp, #36	@ 0x24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f1c3 0307 	rsb	r3, r3, #7
 80013da:	2b04      	cmp	r3, #4
 80013dc:	bf28      	it	cs
 80013de:	2304      	movcs	r3, #4
 80013e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3304      	adds	r3, #4
 80013e6:	2b06      	cmp	r3, #6
 80013e8:	d902      	bls.n	80013f0 <NVIC_EncodePriority+0x30>
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3b03      	subs	r3, #3
 80013ee:	e000      	b.n	80013f2 <NVIC_EncodePriority+0x32>
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f4:	f04f 32ff 	mov.w	r2, #4294967295
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43da      	mvns	r2, r3
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	401a      	ands	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001408:	f04f 31ff 	mov.w	r1, #4294967295
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	fa01 f303 	lsl.w	r3, r1, r3
 8001412:	43d9      	mvns	r1, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	4313      	orrs	r3, r2
         );
}
 800141a:	4618      	mov	r0, r3
 800141c:	3724      	adds	r7, #36	@ 0x24
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001438:	d301      	bcc.n	800143e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143a:	2301      	movs	r3, #1
 800143c:	e00f      	b.n	800145e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143e:	4a0a      	ldr	r2, [pc, #40]	@ (8001468 <SysTick_Config+0x40>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001446:	210f      	movs	r1, #15
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	f7ff ff8e 	bl	800136c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001450:	4b05      	ldr	r3, [pc, #20]	@ (8001468 <SysTick_Config+0x40>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001456:	4b04      	ldr	r3, [pc, #16]	@ (8001468 <SysTick_Config+0x40>)
 8001458:	2207      	movs	r2, #7
 800145a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	e000e010 	.word	0xe000e010

0800146c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff ff29 	bl	80012cc <__NVIC_SetPriorityGrouping>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b086      	sub	sp, #24
 8001486:	af00      	add	r7, sp, #0
 8001488:	4603      	mov	r3, r0
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
 800148e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001494:	f7ff ff3e 	bl	8001314 <__NVIC_GetPriorityGrouping>
 8001498:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	68b9      	ldr	r1, [r7, #8]
 800149e:	6978      	ldr	r0, [r7, #20]
 80014a0:	f7ff ff8e 	bl	80013c0 <NVIC_EncodePriority>
 80014a4:	4602      	mov	r2, r0
 80014a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff5d 	bl	800136c <__NVIC_SetPriority>
}
 80014b2:	bf00      	nop
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff31 	bl	8001330 <__NVIC_EnableIRQ>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ffa2 	bl	8001428 <SysTick_Config>
 80014e4:	4603      	mov	r3, r0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e098      	b.n	8001634 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	4b4d      	ldr	r3, [pc, #308]	@ (8001640 <HAL_DMA_Init+0x150>)
 800150a:	429a      	cmp	r2, r3
 800150c:	d80f      	bhi.n	800152e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	461a      	mov	r2, r3
 8001514:	4b4b      	ldr	r3, [pc, #300]	@ (8001644 <HAL_DMA_Init+0x154>)
 8001516:	4413      	add	r3, r2
 8001518:	4a4b      	ldr	r2, [pc, #300]	@ (8001648 <HAL_DMA_Init+0x158>)
 800151a:	fba2 2303 	umull	r2, r3, r2, r3
 800151e:	091b      	lsrs	r3, r3, #4
 8001520:	009a      	lsls	r2, r3, #2
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a48      	ldr	r2, [pc, #288]	@ (800164c <HAL_DMA_Init+0x15c>)
 800152a:	641a      	str	r2, [r3, #64]	@ 0x40
 800152c:	e00e      	b.n	800154c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	461a      	mov	r2, r3
 8001534:	4b46      	ldr	r3, [pc, #280]	@ (8001650 <HAL_DMA_Init+0x160>)
 8001536:	4413      	add	r3, r2
 8001538:	4a43      	ldr	r2, [pc, #268]	@ (8001648 <HAL_DMA_Init+0x158>)
 800153a:	fba2 2303 	umull	r2, r3, r2, r3
 800153e:	091b      	lsrs	r3, r3, #4
 8001540:	009a      	lsls	r2, r3, #2
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a42      	ldr	r2, [pc, #264]	@ (8001654 <HAL_DMA_Init+0x164>)
 800154a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2202      	movs	r2, #2
 8001550:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001566:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001570:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800157c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001588:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a1b      	ldr	r3, [r3, #32]
 800158e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001590:	68fa      	ldr	r2, [r7, #12]
 8001592:	4313      	orrs	r3, r2
 8001594:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80015a6:	d039      	beq.n	800161c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ac:	4a27      	ldr	r2, [pc, #156]	@ (800164c <HAL_DMA_Init+0x15c>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d11a      	bne.n	80015e8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80015b2:	4b29      	ldr	r3, [pc, #164]	@ (8001658 <HAL_DMA_Init+0x168>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ba:	f003 031c 	and.w	r3, r3, #28
 80015be:	210f      	movs	r1, #15
 80015c0:	fa01 f303 	lsl.w	r3, r1, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	4924      	ldr	r1, [pc, #144]	@ (8001658 <HAL_DMA_Init+0x168>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80015cc:	4b22      	ldr	r3, [pc, #136]	@ (8001658 <HAL_DMA_Init+0x168>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6859      	ldr	r1, [r3, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d8:	f003 031c 	and.w	r3, r3, #28
 80015dc:	fa01 f303 	lsl.w	r3, r1, r3
 80015e0:	491d      	ldr	r1, [pc, #116]	@ (8001658 <HAL_DMA_Init+0x168>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]
 80015e6:	e019      	b.n	800161c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80015e8:	4b1c      	ldr	r3, [pc, #112]	@ (800165c <HAL_DMA_Init+0x16c>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f0:	f003 031c 	and.w	r3, r3, #28
 80015f4:	210f      	movs	r1, #15
 80015f6:	fa01 f303 	lsl.w	r3, r1, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	4917      	ldr	r1, [pc, #92]	@ (800165c <HAL_DMA_Init+0x16c>)
 80015fe:	4013      	ands	r3, r2
 8001600:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001602:	4b16      	ldr	r3, [pc, #88]	@ (800165c <HAL_DMA_Init+0x16c>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6859      	ldr	r1, [r3, #4]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160e:	f003 031c 	and.w	r3, r3, #28
 8001612:	fa01 f303 	lsl.w	r3, r1, r3
 8001616:	4911      	ldr	r1, [pc, #68]	@ (800165c <HAL_DMA_Init+0x16c>)
 8001618:	4313      	orrs	r3, r2
 800161a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2201      	movs	r2, #1
 8001626:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	40020407 	.word	0x40020407
 8001644:	bffdfff8 	.word	0xbffdfff8
 8001648:	cccccccd 	.word	0xcccccccd
 800164c:	40020000 	.word	0x40020000
 8001650:	bffdfbf8 	.word	0xbffdfbf8
 8001654:	40020400 	.word	0x40020400
 8001658:	400200a8 	.word	0x400200a8
 800165c:	400204a8 	.word	0x400204a8

08001660 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001668:	2300      	movs	r3, #0
 800166a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001672:	b2db      	uxtb	r3, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d008      	beq.n	800168a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2204      	movs	r2, #4
 800167c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e022      	b.n	80016d0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 020e 	bic.w	r2, r2, #14
 8001698:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 0201 	bic.w	r2, r2, #1
 80016a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ae:	f003 021c 	and.w	r2, r3, #28
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b6:	2101      	movs	r1, #1
 80016b8:	fa01 f202 	lsl.w	r2, r1, r2
 80016bc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d005      	beq.n	8001700 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2204      	movs	r2, #4
 80016f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	73fb      	strb	r3, [r7, #15]
 80016fe:	e029      	b.n	8001754 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 020e 	bic.w	r2, r2, #14
 800170e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0201 	bic.w	r2, r2, #1
 800171e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001724:	f003 021c 	and.w	r2, r3, #28
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172c:	2101      	movs	r1, #1
 800172e:	fa01 f202 	lsl.w	r2, r1, r2
 8001732:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	4798      	blx	r3
    }
  }
  return status;
 8001754:	7bfb      	ldrb	r3, [r7, #15]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b084      	sub	sp, #16
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177a:	f003 031c 	and.w	r3, r3, #28
 800177e:	2204      	movs	r2, #4
 8001780:	409a      	lsls	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4013      	ands	r3, r2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d026      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x7a>
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d021      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0320 	and.w	r3, r3, #32
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d107      	bne.n	80017b2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0204 	bic.w	r2, r2, #4
 80017b0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b6:	f003 021c 	and.w	r2, r3, #28
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017be:	2104      	movs	r1, #4
 80017c0:	fa01 f202 	lsl.w	r2, r1, r2
 80017c4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d071      	beq.n	80018b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80017d6:	e06c      	b.n	80018b2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017dc:	f003 031c 	and.w	r3, r3, #28
 80017e0:	2202      	movs	r2, #2
 80017e2:	409a      	lsls	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4013      	ands	r3, r2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d02e      	beq.n	800184a <HAL_DMA_IRQHandler+0xec>
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d029      	beq.n	800184a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0320 	and.w	r3, r3, #32
 8001800:	2b00      	cmp	r3, #0
 8001802:	d10b      	bne.n	800181c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 020a 	bic.w	r2, r2, #10
 8001812:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001820:	f003 021c 	and.w	r2, r3, #28
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001828:	2102      	movs	r1, #2
 800182a:	fa01 f202 	lsl.w	r2, r1, r2
 800182e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800183c:	2b00      	cmp	r3, #0
 800183e:	d038      	beq.n	80018b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001848:	e033      	b.n	80018b2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800184e:	f003 031c 	and.w	r3, r3, #28
 8001852:	2208      	movs	r2, #8
 8001854:	409a      	lsls	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4013      	ands	r3, r2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d02a      	beq.n	80018b4 <HAL_DMA_IRQHandler+0x156>
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	f003 0308 	and.w	r3, r3, #8
 8001864:	2b00      	cmp	r3, #0
 8001866:	d025      	beq.n	80018b4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 020e 	bic.w	r2, r2, #14
 8001876:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187c:	f003 021c 	and.w	r2, r3, #28
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001884:	2101      	movs	r1, #1
 8001886:	fa01 f202 	lsl.w	r2, r1, r2
 800188a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d004      	beq.n	80018b4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018b2:	bf00      	nop
 80018b4:	bf00      	nop
}
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018bc:	b480      	push	{r7}
 80018be:	b087      	sub	sp, #28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ca:	e17f      	b.n	8001bcc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	2101      	movs	r1, #1
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	fa01 f303 	lsl.w	r3, r1, r3
 80018d8:	4013      	ands	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 8171 	beq.w	8001bc6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d005      	beq.n	80018fc <HAL_GPIO_Init+0x40>
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 0303 	and.w	r3, r3, #3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d130      	bne.n	800195e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	2203      	movs	r2, #3
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	68da      	ldr	r2, [r3, #12]
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	4313      	orrs	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001932:	2201      	movs	r2, #1
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	091b      	lsrs	r3, r3, #4
 8001948:	f003 0201 	and.w	r2, r3, #1
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	2b03      	cmp	r3, #3
 8001968:	d118      	bne.n	800199c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800196e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001970:	2201      	movs	r2, #1
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	08db      	lsrs	r3, r3, #3
 8001986:	f003 0201 	and.w	r2, r3, #1
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	2b03      	cmp	r3, #3
 80019a6:	d017      	beq.n	80019d8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	2203      	movs	r2, #3
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d123      	bne.n	8001a2c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	08da      	lsrs	r2, r3, #3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3208      	adds	r2, #8
 80019ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	220f      	movs	r2, #15
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4013      	ands	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	691a      	ldr	r2, [r3, #16]
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	08da      	lsrs	r2, r3, #3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3208      	adds	r2, #8
 8001a26:	6939      	ldr	r1, [r7, #16]
 8001a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	2203      	movs	r2, #3
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0203 	and.w	r2, r3, #3
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 80ac 	beq.w	8001bc6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6e:	4b5f      	ldr	r3, [pc, #380]	@ (8001bec <HAL_GPIO_Init+0x330>)
 8001a70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a72:	4a5e      	ldr	r2, [pc, #376]	@ (8001bec <HAL_GPIO_Init+0x330>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a7a:	4b5c      	ldr	r3, [pc, #368]	@ (8001bec <HAL_GPIO_Init+0x330>)
 8001a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a86:	4a5a      	ldr	r2, [pc, #360]	@ (8001bf0 <HAL_GPIO_Init+0x334>)
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	089b      	lsrs	r3, r3, #2
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a92:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	220f      	movs	r2, #15
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ab0:	d025      	beq.n	8001afe <HAL_GPIO_Init+0x242>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a4f      	ldr	r2, [pc, #316]	@ (8001bf4 <HAL_GPIO_Init+0x338>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d01f      	beq.n	8001afa <HAL_GPIO_Init+0x23e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a4e      	ldr	r2, [pc, #312]	@ (8001bf8 <HAL_GPIO_Init+0x33c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d019      	beq.n	8001af6 <HAL_GPIO_Init+0x23a>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a4d      	ldr	r2, [pc, #308]	@ (8001bfc <HAL_GPIO_Init+0x340>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d013      	beq.n	8001af2 <HAL_GPIO_Init+0x236>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a4c      	ldr	r2, [pc, #304]	@ (8001c00 <HAL_GPIO_Init+0x344>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d00d      	beq.n	8001aee <HAL_GPIO_Init+0x232>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a4b      	ldr	r2, [pc, #300]	@ (8001c04 <HAL_GPIO_Init+0x348>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d007      	beq.n	8001aea <HAL_GPIO_Init+0x22e>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a4a      	ldr	r2, [pc, #296]	@ (8001c08 <HAL_GPIO_Init+0x34c>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d101      	bne.n	8001ae6 <HAL_GPIO_Init+0x22a>
 8001ae2:	2306      	movs	r3, #6
 8001ae4:	e00c      	b.n	8001b00 <HAL_GPIO_Init+0x244>
 8001ae6:	2307      	movs	r3, #7
 8001ae8:	e00a      	b.n	8001b00 <HAL_GPIO_Init+0x244>
 8001aea:	2305      	movs	r3, #5
 8001aec:	e008      	b.n	8001b00 <HAL_GPIO_Init+0x244>
 8001aee:	2304      	movs	r3, #4
 8001af0:	e006      	b.n	8001b00 <HAL_GPIO_Init+0x244>
 8001af2:	2303      	movs	r3, #3
 8001af4:	e004      	b.n	8001b00 <HAL_GPIO_Init+0x244>
 8001af6:	2302      	movs	r3, #2
 8001af8:	e002      	b.n	8001b00 <HAL_GPIO_Init+0x244>
 8001afa:	2301      	movs	r3, #1
 8001afc:	e000      	b.n	8001b00 <HAL_GPIO_Init+0x244>
 8001afe:	2300      	movs	r3, #0
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	f002 0203 	and.w	r2, r2, #3
 8001b06:	0092      	lsls	r2, r2, #2
 8001b08:	4093      	lsls	r3, r2
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b10:	4937      	ldr	r1, [pc, #220]	@ (8001bf0 <HAL_GPIO_Init+0x334>)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	089b      	lsrs	r3, r3, #2
 8001b16:	3302      	adds	r3, #2
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b1e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c0c <HAL_GPIO_Init+0x350>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b42:	4a32      	ldr	r2, [pc, #200]	@ (8001c0c <HAL_GPIO_Init+0x350>)
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b48:	4b30      	ldr	r3, [pc, #192]	@ (8001c0c <HAL_GPIO_Init+0x350>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b6c:	4a27      	ldr	r2, [pc, #156]	@ (8001c0c <HAL_GPIO_Init+0x350>)
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b72:	4b26      	ldr	r3, [pc, #152]	@ (8001c0c <HAL_GPIO_Init+0x350>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b96:	4a1d      	ldr	r2, [pc, #116]	@ (8001c0c <HAL_GPIO_Init+0x350>)
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c0c <HAL_GPIO_Init+0x350>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bc0:	4a12      	ldr	r2, [pc, #72]	@ (8001c0c <HAL_GPIO_Init+0x350>)
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f47f ae78 	bne.w	80018cc <HAL_GPIO_Init+0x10>
  }
}
 8001bdc:	bf00      	nop
 8001bde:	bf00      	nop
 8001be0:	371c      	adds	r7, #28
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40010000 	.word	0x40010000
 8001bf4:	48000400 	.word	0x48000400
 8001bf8:	48000800 	.word	0x48000800
 8001bfc:	48000c00 	.word	0x48000c00
 8001c00:	48001000 	.word	0x48001000
 8001c04:	48001400 	.word	0x48001400
 8001c08:	48001800 	.word	0x48001800
 8001c0c:	40010400 	.word	0x40010400

08001c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	807b      	strh	r3, [r7, #2]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c20:	787b      	ldrb	r3, [r7, #1]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c26:	887a      	ldrh	r2, [r7, #2]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c2c:	e002      	b.n	8001c34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c2e:	887a      	ldrh	r2, [r7, #2]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c4a:	4b08      	ldr	r3, [pc, #32]	@ (8001c6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c4c:	695a      	ldr	r2, [r3, #20]
 8001c4e:	88fb      	ldrh	r3, [r7, #6]
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d006      	beq.n	8001c64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c56:	4a05      	ldr	r2, [pc, #20]	@ (8001c6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 f806 	bl	8001c70 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40010400 	.word	0x40010400

08001c70 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c8c:	4b04      	ldr	r3, [pc, #16]	@ (8001ca0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40007000 	.word	0x40007000

08001ca4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cb2:	d130      	bne.n	8001d16 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cb4:	4b23      	ldr	r3, [pc, #140]	@ (8001d44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001cbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cc0:	d038      	beq.n	8001d34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cc2:	4b20      	ldr	r3, [pc, #128]	@ (8001d44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001cca:	4a1e      	ldr	r2, [pc, #120]	@ (8001d44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ccc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cd0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2232      	movs	r2, #50	@ 0x32
 8001cd8:	fb02 f303 	mul.w	r3, r2, r3
 8001cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8001d4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001cde:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce2:	0c9b      	lsrs	r3, r3, #18
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ce8:	e002      	b.n	8001cf0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	3b01      	subs	r3, #1
 8001cee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cf0:	4b14      	ldr	r3, [pc, #80]	@ (8001d44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cfc:	d102      	bne.n	8001d04 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1f2      	bne.n	8001cea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d04:	4b0f      	ldr	r3, [pc, #60]	@ (8001d44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d10:	d110      	bne.n	8001d34 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e00f      	b.n	8001d36 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d16:	4b0b      	ldr	r3, [pc, #44]	@ (8001d44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d22:	d007      	beq.n	8001d34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d24:	4b07      	ldr	r3, [pc, #28]	@ (8001d44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d2c:	4a05      	ldr	r2, [pc, #20]	@ (8001d44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d32:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40007000 	.word	0x40007000
 8001d48:	20000000 	.word	0x20000000
 8001d4c:	431bde83 	.word	0x431bde83

08001d50 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e3ca      	b.n	80024f8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d62:	4b97      	ldr	r3, [pc, #604]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d6c:	4b94      	ldr	r3, [pc, #592]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0310 	and.w	r3, r3, #16
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 80e4 	beq.w	8001f4c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d007      	beq.n	8001d9a <HAL_RCC_OscConfig+0x4a>
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	2b0c      	cmp	r3, #12
 8001d8e:	f040 808b 	bne.w	8001ea8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	f040 8087 	bne.w	8001ea8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d9a:	4b89      	ldr	r3, [pc, #548]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d005      	beq.n	8001db2 <HAL_RCC_OscConfig+0x62>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e3a2      	b.n	80024f8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a1a      	ldr	r2, [r3, #32]
 8001db6:	4b82      	ldr	r3, [pc, #520]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d004      	beq.n	8001dcc <HAL_RCC_OscConfig+0x7c>
 8001dc2:	4b7f      	ldr	r3, [pc, #508]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001dca:	e005      	b.n	8001dd8 <HAL_RCC_OscConfig+0x88>
 8001dcc:	4b7c      	ldr	r3, [pc, #496]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dd2:	091b      	lsrs	r3, r3, #4
 8001dd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d223      	bcs.n	8001e24 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f000 fd55 	bl	8002890 <RCC_SetFlashLatencyFromMSIRange>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e383      	b.n	80024f8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001df0:	4b73      	ldr	r3, [pc, #460]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a72      	ldr	r2, [pc, #456]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001df6:	f043 0308 	orr.w	r3, r3, #8
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	4b70      	ldr	r3, [pc, #448]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	496d      	ldr	r1, [pc, #436]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e0e:	4b6c      	ldr	r3, [pc, #432]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	021b      	lsls	r3, r3, #8
 8001e1c:	4968      	ldr	r1, [pc, #416]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	604b      	str	r3, [r1, #4]
 8001e22:	e025      	b.n	8001e70 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e24:	4b66      	ldr	r3, [pc, #408]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a65      	ldr	r2, [pc, #404]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001e2a:	f043 0308 	orr.w	r3, r3, #8
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	4b63      	ldr	r3, [pc, #396]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	4960      	ldr	r1, [pc, #384]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e42:	4b5f      	ldr	r3, [pc, #380]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	021b      	lsls	r3, r3, #8
 8001e50:	495b      	ldr	r1, [pc, #364]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d109      	bne.n	8001e70 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f000 fd15 	bl	8002890 <RCC_SetFlashLatencyFromMSIRange>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e343      	b.n	80024f8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e70:	f000 fc4a 	bl	8002708 <HAL_RCC_GetSysClockFreq>
 8001e74:	4602      	mov	r2, r0
 8001e76:	4b52      	ldr	r3, [pc, #328]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	091b      	lsrs	r3, r3, #4
 8001e7c:	f003 030f 	and.w	r3, r3, #15
 8001e80:	4950      	ldr	r1, [pc, #320]	@ (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001e82:	5ccb      	ldrb	r3, [r1, r3]
 8001e84:	f003 031f 	and.w	r3, r3, #31
 8001e88:	fa22 f303 	lsr.w	r3, r2, r3
 8001e8c:	4a4e      	ldr	r2, [pc, #312]	@ (8001fc8 <HAL_RCC_OscConfig+0x278>)
 8001e8e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e90:	4b4e      	ldr	r3, [pc, #312]	@ (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff f999 	bl	80011cc <HAL_InitTick>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d052      	beq.n	8001f4a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
 8001ea6:	e327      	b.n	80024f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d032      	beq.n	8001f16 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001eb0:	4b43      	ldr	r3, [pc, #268]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a42      	ldr	r2, [pc, #264]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f9d6 	bl	800126c <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ec4:	f7ff f9d2 	bl	800126c <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e310      	b.n	80024f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ed6:	4b3a      	ldr	r3, [pc, #232]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f0      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ee2:	4b37      	ldr	r3, [pc, #220]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a36      	ldr	r2, [pc, #216]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001ee8:	f043 0308 	orr.w	r3, r3, #8
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	4b34      	ldr	r3, [pc, #208]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	4931      	ldr	r1, [pc, #196]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f00:	4b2f      	ldr	r3, [pc, #188]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	492c      	ldr	r1, [pc, #176]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	604b      	str	r3, [r1, #4]
 8001f14:	e01a      	b.n	8001f4c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f16:	4b2a      	ldr	r3, [pc, #168]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a29      	ldr	r2, [pc, #164]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001f1c:	f023 0301 	bic.w	r3, r3, #1
 8001f20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f22:	f7ff f9a3 	bl	800126c <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f2a:	f7ff f99f 	bl	800126c <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e2dd      	b.n	80024f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f3c:	4b20      	ldr	r3, [pc, #128]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1f0      	bne.n	8001f2a <HAL_RCC_OscConfig+0x1da>
 8001f48:	e000      	b.n	8001f4c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f4a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d074      	beq.n	8002042 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	2b08      	cmp	r3, #8
 8001f5c:	d005      	beq.n	8001f6a <HAL_RCC_OscConfig+0x21a>
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	2b0c      	cmp	r3, #12
 8001f62:	d10e      	bne.n	8001f82 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	d10b      	bne.n	8001f82 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6a:	4b15      	ldr	r3, [pc, #84]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d064      	beq.n	8002040 <HAL_RCC_OscConfig+0x2f0>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d160      	bne.n	8002040 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e2ba      	b.n	80024f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f8a:	d106      	bne.n	8001f9a <HAL_RCC_OscConfig+0x24a>
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a0b      	ldr	r2, [pc, #44]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001f92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f96:	6013      	str	r3, [r2, #0]
 8001f98:	e026      	b.n	8001fe8 <HAL_RCC_OscConfig+0x298>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fa2:	d115      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x280>
 8001fa4:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a05      	ldr	r2, [pc, #20]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001faa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fae:	6013      	str	r3, [r2, #0]
 8001fb0:	4b03      	ldr	r3, [pc, #12]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a02      	ldr	r2, [pc, #8]	@ (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001fb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fba:	6013      	str	r3, [r2, #0]
 8001fbc:	e014      	b.n	8001fe8 <HAL_RCC_OscConfig+0x298>
 8001fbe:	bf00      	nop
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	08005098 	.word	0x08005098
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	20000004 	.word	0x20000004
 8001fd0:	4ba0      	ldr	r3, [pc, #640]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a9f      	ldr	r2, [pc, #636]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 8001fd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	4b9d      	ldr	r3, [pc, #628]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a9c      	ldr	r2, [pc, #624]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 8001fe2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d013      	beq.n	8002018 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff0:	f7ff f93c 	bl	800126c <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff8:	f7ff f938 	bl	800126c <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b64      	cmp	r3, #100	@ 0x64
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e276      	b.n	80024f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800200a:	4b92      	ldr	r3, [pc, #584]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x2a8>
 8002016:	e014      	b.n	8002042 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7ff f928 	bl	800126c <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002020:	f7ff f924 	bl	800126c <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b64      	cmp	r3, #100	@ 0x64
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e262      	b.n	80024f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002032:	4b88      	ldr	r3, [pc, #544]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x2d0>
 800203e:	e000      	b.n	8002042 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d060      	beq.n	8002110 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	2b04      	cmp	r3, #4
 8002052:	d005      	beq.n	8002060 <HAL_RCC_OscConfig+0x310>
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	2b0c      	cmp	r3, #12
 8002058:	d119      	bne.n	800208e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2b02      	cmp	r3, #2
 800205e:	d116      	bne.n	800208e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002060:	4b7c      	ldr	r3, [pc, #496]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002068:	2b00      	cmp	r3, #0
 800206a:	d005      	beq.n	8002078 <HAL_RCC_OscConfig+0x328>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e23f      	b.n	80024f8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002078:	4b76      	ldr	r3, [pc, #472]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	061b      	lsls	r3, r3, #24
 8002086:	4973      	ldr	r1, [pc, #460]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800208c:	e040      	b.n	8002110 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d023      	beq.n	80020de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002096:	4b6f      	ldr	r3, [pc, #444]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a6e      	ldr	r2, [pc, #440]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 800209c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a2:	f7ff f8e3 	bl	800126c <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020aa:	f7ff f8df 	bl	800126c <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e21d      	b.n	80024f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020bc:	4b65      	ldr	r3, [pc, #404]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0f0      	beq.n	80020aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c8:	4b62      	ldr	r3, [pc, #392]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	061b      	lsls	r3, r3, #24
 80020d6:	495f      	ldr	r1, [pc, #380]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]
 80020dc:	e018      	b.n	8002110 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020de:	4b5d      	ldr	r3, [pc, #372]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a5c      	ldr	r2, [pc, #368]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 80020e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ea:	f7ff f8bf 	bl	800126c <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f2:	f7ff f8bb 	bl	800126c <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e1f9      	b.n	80024f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002104:	4b53      	ldr	r3, [pc, #332]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1f0      	bne.n	80020f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b00      	cmp	r3, #0
 800211a:	d03c      	beq.n	8002196 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d01c      	beq.n	800215e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002124:	4b4b      	ldr	r3, [pc, #300]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 8002126:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800212a:	4a4a      	ldr	r2, [pc, #296]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002134:	f7ff f89a 	bl	800126c <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800213c:	f7ff f896 	bl	800126c <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e1d4      	b.n	80024f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800214e:	4b41      	ldr	r3, [pc, #260]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 8002150:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0ef      	beq.n	800213c <HAL_RCC_OscConfig+0x3ec>
 800215c:	e01b      	b.n	8002196 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800215e:	4b3d      	ldr	r3, [pc, #244]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 8002160:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002164:	4a3b      	ldr	r2, [pc, #236]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 8002166:	f023 0301 	bic.w	r3, r3, #1
 800216a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216e:	f7ff f87d 	bl	800126c <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002176:	f7ff f879 	bl	800126c <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e1b7      	b.n	80024f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002188:	4b32      	ldr	r3, [pc, #200]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 800218a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1ef      	bne.n	8002176 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 80a6 	beq.w	80022f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021a4:	2300      	movs	r3, #0
 80021a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 80021aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10d      	bne.n	80021d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b4:	4b27      	ldr	r3, [pc, #156]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 80021b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b8:	4a26      	ldr	r2, [pc, #152]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 80021ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021be:	6593      	str	r3, [r2, #88]	@ 0x58
 80021c0:	4b24      	ldr	r3, [pc, #144]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 80021c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021cc:	2301      	movs	r3, #1
 80021ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d0:	4b21      	ldr	r3, [pc, #132]	@ (8002258 <HAL_RCC_OscConfig+0x508>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d118      	bne.n	800220e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002258 <HAL_RCC_OscConfig+0x508>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a1d      	ldr	r2, [pc, #116]	@ (8002258 <HAL_RCC_OscConfig+0x508>)
 80021e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021e8:	f7ff f840 	bl	800126c <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f0:	f7ff f83c 	bl	800126c <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e17a      	b.n	80024f8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002202:	4b15      	ldr	r3, [pc, #84]	@ (8002258 <HAL_RCC_OscConfig+0x508>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0f0      	beq.n	80021f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d108      	bne.n	8002228 <HAL_RCC_OscConfig+0x4d8>
 8002216:	4b0f      	ldr	r3, [pc, #60]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 8002218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800221c:	4a0d      	ldr	r2, [pc, #52]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002226:	e029      	b.n	800227c <HAL_RCC_OscConfig+0x52c>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2b05      	cmp	r3, #5
 800222e:	d115      	bne.n	800225c <HAL_RCC_OscConfig+0x50c>
 8002230:	4b08      	ldr	r3, [pc, #32]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 8002232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002236:	4a07      	ldr	r2, [pc, #28]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 8002238:	f043 0304 	orr.w	r3, r3, #4
 800223c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002240:	4b04      	ldr	r3, [pc, #16]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 8002242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002246:	4a03      	ldr	r2, [pc, #12]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002250:	e014      	b.n	800227c <HAL_RCC_OscConfig+0x52c>
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000
 8002258:	40007000 	.word	0x40007000
 800225c:	4b9c      	ldr	r3, [pc, #624]	@ (80024d0 <HAL_RCC_OscConfig+0x780>)
 800225e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002262:	4a9b      	ldr	r2, [pc, #620]	@ (80024d0 <HAL_RCC_OscConfig+0x780>)
 8002264:	f023 0301 	bic.w	r3, r3, #1
 8002268:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800226c:	4b98      	ldr	r3, [pc, #608]	@ (80024d0 <HAL_RCC_OscConfig+0x780>)
 800226e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002272:	4a97      	ldr	r2, [pc, #604]	@ (80024d0 <HAL_RCC_OscConfig+0x780>)
 8002274:	f023 0304 	bic.w	r3, r3, #4
 8002278:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d016      	beq.n	80022b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002284:	f7fe fff2 	bl	800126c <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800228a:	e00a      	b.n	80022a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228c:	f7fe ffee 	bl	800126c <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e12a      	b.n	80024f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022a2:	4b8b      	ldr	r3, [pc, #556]	@ (80024d0 <HAL_RCC_OscConfig+0x780>)
 80022a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0ed      	beq.n	800228c <HAL_RCC_OscConfig+0x53c>
 80022b0:	e015      	b.n	80022de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b2:	f7fe ffdb 	bl	800126c <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022b8:	e00a      	b.n	80022d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ba:	f7fe ffd7 	bl	800126c <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e113      	b.n	80024f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022d0:	4b7f      	ldr	r3, [pc, #508]	@ (80024d0 <HAL_RCC_OscConfig+0x780>)
 80022d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1ed      	bne.n	80022ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022de:	7ffb      	ldrb	r3, [r7, #31]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d105      	bne.n	80022f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e4:	4b7a      	ldr	r3, [pc, #488]	@ (80024d0 <HAL_RCC_OscConfig+0x780>)
 80022e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e8:	4a79      	ldr	r2, [pc, #484]	@ (80024d0 <HAL_RCC_OscConfig+0x780>)
 80022ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022ee:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 80fe 	beq.w	80024f6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fe:	2b02      	cmp	r3, #2
 8002300:	f040 80d0 	bne.w	80024a4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002304:	4b72      	ldr	r3, [pc, #456]	@ (80024d0 <HAL_RCC_OscConfig+0x780>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	f003 0203 	and.w	r2, r3, #3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002314:	429a      	cmp	r2, r3
 8002316:	d130      	bne.n	800237a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002322:	3b01      	subs	r3, #1
 8002324:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002326:	429a      	cmp	r2, r3
 8002328:	d127      	bne.n	800237a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002334:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002336:	429a      	cmp	r2, r3
 8002338:	d11f      	bne.n	800237a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002344:	2a07      	cmp	r2, #7
 8002346:	bf14      	ite	ne
 8002348:	2201      	movne	r2, #1
 800234a:	2200      	moveq	r2, #0
 800234c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800234e:	4293      	cmp	r3, r2
 8002350:	d113      	bne.n	800237a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800235c:	085b      	lsrs	r3, r3, #1
 800235e:	3b01      	subs	r3, #1
 8002360:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002362:	429a      	cmp	r2, r3
 8002364:	d109      	bne.n	800237a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002370:	085b      	lsrs	r3, r3, #1
 8002372:	3b01      	subs	r3, #1
 8002374:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002376:	429a      	cmp	r2, r3
 8002378:	d06e      	beq.n	8002458 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	2b0c      	cmp	r3, #12
 800237e:	d069      	beq.n	8002454 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002380:	4b53      	ldr	r3, [pc, #332]	@ (80024d0 <HAL_RCC_OscConfig+0x780>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d105      	bne.n	8002398 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800238c:	4b50      	ldr	r3, [pc, #320]	@ (80024d0 <HAL_RCC_OscConfig+0x780>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0ad      	b.n	80024f8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800239c:	4b4c      	ldr	r3, [pc, #304]	@ (80024d0 <HAL_RCC_OscConfig+0x780>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a4b      	ldr	r2, [pc, #300]	@ (80024d0 <HAL_RCC_OscConfig+0x780>)
 80023a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023a8:	f7fe ff60 	bl	800126c <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b0:	f7fe ff5c 	bl	800126c <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e09a      	b.n	80024f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023c2:	4b43      	ldr	r3, [pc, #268]	@ (80024d0 <HAL_RCC_OscConfig+0x780>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f0      	bne.n	80023b0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ce:	4b40      	ldr	r3, [pc, #256]	@ (80024d0 <HAL_RCC_OscConfig+0x780>)
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	4b40      	ldr	r3, [pc, #256]	@ (80024d4 <HAL_RCC_OscConfig+0x784>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80023de:	3a01      	subs	r2, #1
 80023e0:	0112      	lsls	r2, r2, #4
 80023e2:	4311      	orrs	r1, r2
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80023e8:	0212      	lsls	r2, r2, #8
 80023ea:	4311      	orrs	r1, r2
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80023f0:	0852      	lsrs	r2, r2, #1
 80023f2:	3a01      	subs	r2, #1
 80023f4:	0552      	lsls	r2, r2, #21
 80023f6:	4311      	orrs	r1, r2
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80023fc:	0852      	lsrs	r2, r2, #1
 80023fe:	3a01      	subs	r2, #1
 8002400:	0652      	lsls	r2, r2, #25
 8002402:	4311      	orrs	r1, r2
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002408:	0912      	lsrs	r2, r2, #4
 800240a:	0452      	lsls	r2, r2, #17
 800240c:	430a      	orrs	r2, r1
 800240e:	4930      	ldr	r1, [pc, #192]	@ (80024d0 <HAL_RCC_OscConfig+0x780>)
 8002410:	4313      	orrs	r3, r2
 8002412:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002414:	4b2e      	ldr	r3, [pc, #184]	@ (80024d0 <HAL_RCC_OscConfig+0x780>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a2d      	ldr	r2, [pc, #180]	@ (80024d0 <HAL_RCC_OscConfig+0x780>)
 800241a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800241e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002420:	4b2b      	ldr	r3, [pc, #172]	@ (80024d0 <HAL_RCC_OscConfig+0x780>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	4a2a      	ldr	r2, [pc, #168]	@ (80024d0 <HAL_RCC_OscConfig+0x780>)
 8002426:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800242a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800242c:	f7fe ff1e 	bl	800126c <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002434:	f7fe ff1a 	bl	800126c <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e058      	b.n	80024f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002446:	4b22      	ldr	r3, [pc, #136]	@ (80024d0 <HAL_RCC_OscConfig+0x780>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002452:	e050      	b.n	80024f6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e04f      	b.n	80024f8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002458:	4b1d      	ldr	r3, [pc, #116]	@ (80024d0 <HAL_RCC_OscConfig+0x780>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d148      	bne.n	80024f6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002464:	4b1a      	ldr	r3, [pc, #104]	@ (80024d0 <HAL_RCC_OscConfig+0x780>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a19      	ldr	r2, [pc, #100]	@ (80024d0 <HAL_RCC_OscConfig+0x780>)
 800246a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800246e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002470:	4b17      	ldr	r3, [pc, #92]	@ (80024d0 <HAL_RCC_OscConfig+0x780>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	4a16      	ldr	r2, [pc, #88]	@ (80024d0 <HAL_RCC_OscConfig+0x780>)
 8002476:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800247a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800247c:	f7fe fef6 	bl	800126c <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002484:	f7fe fef2 	bl	800126c <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e030      	b.n	80024f8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002496:	4b0e      	ldr	r3, [pc, #56]	@ (80024d0 <HAL_RCC_OscConfig+0x780>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0f0      	beq.n	8002484 <HAL_RCC_OscConfig+0x734>
 80024a2:	e028      	b.n	80024f6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	2b0c      	cmp	r3, #12
 80024a8:	d023      	beq.n	80024f2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024aa:	4b09      	ldr	r3, [pc, #36]	@ (80024d0 <HAL_RCC_OscConfig+0x780>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a08      	ldr	r2, [pc, #32]	@ (80024d0 <HAL_RCC_OscConfig+0x780>)
 80024b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b6:	f7fe fed9 	bl	800126c <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024bc:	e00c      	b.n	80024d8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024be:	f7fe fed5 	bl	800126c <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d905      	bls.n	80024d8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e013      	b.n	80024f8 <HAL_RCC_OscConfig+0x7a8>
 80024d0:	40021000 	.word	0x40021000
 80024d4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024d8:	4b09      	ldr	r3, [pc, #36]	@ (8002500 <HAL_RCC_OscConfig+0x7b0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1ec      	bne.n	80024be <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80024e4:	4b06      	ldr	r3, [pc, #24]	@ (8002500 <HAL_RCC_OscConfig+0x7b0>)
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	4905      	ldr	r1, [pc, #20]	@ (8002500 <HAL_RCC_OscConfig+0x7b0>)
 80024ea:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <HAL_RCC_OscConfig+0x7b4>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	60cb      	str	r3, [r1, #12]
 80024f0:	e001      	b.n	80024f6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3720      	adds	r7, #32
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40021000 	.word	0x40021000
 8002504:	feeefffc 	.word	0xfeeefffc

08002508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0e7      	b.n	80026ec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800251c:	4b75      	ldr	r3, [pc, #468]	@ (80026f4 <HAL_RCC_ClockConfig+0x1ec>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d910      	bls.n	800254c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252a:	4b72      	ldr	r3, [pc, #456]	@ (80026f4 <HAL_RCC_ClockConfig+0x1ec>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f023 0207 	bic.w	r2, r3, #7
 8002532:	4970      	ldr	r1, [pc, #448]	@ (80026f4 <HAL_RCC_ClockConfig+0x1ec>)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	4313      	orrs	r3, r2
 8002538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800253a:	4b6e      	ldr	r3, [pc, #440]	@ (80026f4 <HAL_RCC_ClockConfig+0x1ec>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d001      	beq.n	800254c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0cf      	b.n	80026ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d010      	beq.n	800257a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	4b66      	ldr	r3, [pc, #408]	@ (80026f8 <HAL_RCC_ClockConfig+0x1f0>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002564:	429a      	cmp	r2, r3
 8002566:	d908      	bls.n	800257a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002568:	4b63      	ldr	r3, [pc, #396]	@ (80026f8 <HAL_RCC_ClockConfig+0x1f0>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	4960      	ldr	r1, [pc, #384]	@ (80026f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002576:	4313      	orrs	r3, r2
 8002578:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d04c      	beq.n	8002620 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b03      	cmp	r3, #3
 800258c:	d107      	bne.n	800259e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800258e:	4b5a      	ldr	r3, [pc, #360]	@ (80026f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d121      	bne.n	80025de <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e0a6      	b.n	80026ec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d107      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025a6:	4b54      	ldr	r3, [pc, #336]	@ (80026f8 <HAL_RCC_ClockConfig+0x1f0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d115      	bne.n	80025de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e09a      	b.n	80026ec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d107      	bne.n	80025ce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025be:	4b4e      	ldr	r3, [pc, #312]	@ (80026f8 <HAL_RCC_ClockConfig+0x1f0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d109      	bne.n	80025de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e08e      	b.n	80026ec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025ce:	4b4a      	ldr	r3, [pc, #296]	@ (80026f8 <HAL_RCC_ClockConfig+0x1f0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e086      	b.n	80026ec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025de:	4b46      	ldr	r3, [pc, #280]	@ (80026f8 <HAL_RCC_ClockConfig+0x1f0>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f023 0203 	bic.w	r2, r3, #3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	4943      	ldr	r1, [pc, #268]	@ (80026f8 <HAL_RCC_ClockConfig+0x1f0>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025f0:	f7fe fe3c 	bl	800126c <HAL_GetTick>
 80025f4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f6:	e00a      	b.n	800260e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f8:	f7fe fe38 	bl	800126c <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002606:	4293      	cmp	r3, r2
 8002608:	d901      	bls.n	800260e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e06e      	b.n	80026ec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260e:	4b3a      	ldr	r3, [pc, #232]	@ (80026f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 020c 	and.w	r2, r3, #12
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	429a      	cmp	r2, r3
 800261e:	d1eb      	bne.n	80025f8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d010      	beq.n	800264e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	4b31      	ldr	r3, [pc, #196]	@ (80026f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002638:	429a      	cmp	r2, r3
 800263a:	d208      	bcs.n	800264e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800263c:	4b2e      	ldr	r3, [pc, #184]	@ (80026f8 <HAL_RCC_ClockConfig+0x1f0>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	492b      	ldr	r1, [pc, #172]	@ (80026f8 <HAL_RCC_ClockConfig+0x1f0>)
 800264a:	4313      	orrs	r3, r2
 800264c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800264e:	4b29      	ldr	r3, [pc, #164]	@ (80026f4 <HAL_RCC_ClockConfig+0x1ec>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d210      	bcs.n	800267e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265c:	4b25      	ldr	r3, [pc, #148]	@ (80026f4 <HAL_RCC_ClockConfig+0x1ec>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f023 0207 	bic.w	r2, r3, #7
 8002664:	4923      	ldr	r1, [pc, #140]	@ (80026f4 <HAL_RCC_ClockConfig+0x1ec>)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	4313      	orrs	r3, r2
 800266a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800266c:	4b21      	ldr	r3, [pc, #132]	@ (80026f4 <HAL_RCC_ClockConfig+0x1ec>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d001      	beq.n	800267e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e036      	b.n	80026ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0304 	and.w	r3, r3, #4
 8002686:	2b00      	cmp	r3, #0
 8002688:	d008      	beq.n	800269c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800268a:	4b1b      	ldr	r3, [pc, #108]	@ (80026f8 <HAL_RCC_ClockConfig+0x1f0>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	4918      	ldr	r1, [pc, #96]	@ (80026f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002698:	4313      	orrs	r3, r2
 800269a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0308 	and.w	r3, r3, #8
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d009      	beq.n	80026bc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026a8:	4b13      	ldr	r3, [pc, #76]	@ (80026f8 <HAL_RCC_ClockConfig+0x1f0>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4910      	ldr	r1, [pc, #64]	@ (80026f8 <HAL_RCC_ClockConfig+0x1f0>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026bc:	f000 f824 	bl	8002708 <HAL_RCC_GetSysClockFreq>
 80026c0:	4602      	mov	r2, r0
 80026c2:	4b0d      	ldr	r3, [pc, #52]	@ (80026f8 <HAL_RCC_ClockConfig+0x1f0>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	091b      	lsrs	r3, r3, #4
 80026c8:	f003 030f 	and.w	r3, r3, #15
 80026cc:	490b      	ldr	r1, [pc, #44]	@ (80026fc <HAL_RCC_ClockConfig+0x1f4>)
 80026ce:	5ccb      	ldrb	r3, [r1, r3]
 80026d0:	f003 031f 	and.w	r3, r3, #31
 80026d4:	fa22 f303 	lsr.w	r3, r2, r3
 80026d8:	4a09      	ldr	r2, [pc, #36]	@ (8002700 <HAL_RCC_ClockConfig+0x1f8>)
 80026da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026dc:	4b09      	ldr	r3, [pc, #36]	@ (8002704 <HAL_RCC_ClockConfig+0x1fc>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fe fd73 	bl	80011cc <HAL_InitTick>
 80026e6:	4603      	mov	r3, r0
 80026e8:	72fb      	strb	r3, [r7, #11]

  return status;
 80026ea:	7afb      	ldrb	r3, [r7, #11]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40022000 	.word	0x40022000
 80026f8:	40021000 	.word	0x40021000
 80026fc:	08005098 	.word	0x08005098
 8002700:	20000000 	.word	0x20000000
 8002704:	20000004 	.word	0x20000004

08002708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002708:	b480      	push	{r7}
 800270a:	b089      	sub	sp, #36	@ 0x24
 800270c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
 8002712:	2300      	movs	r3, #0
 8002714:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002716:	4b3e      	ldr	r3, [pc, #248]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x108>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 030c 	and.w	r3, r3, #12
 800271e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002720:	4b3b      	ldr	r3, [pc, #236]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x108>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_RCC_GetSysClockFreq+0x34>
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	2b0c      	cmp	r3, #12
 8002734:	d121      	bne.n	800277a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d11e      	bne.n	800277a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800273c:	4b34      	ldr	r3, [pc, #208]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x108>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d107      	bne.n	8002758 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002748:	4b31      	ldr	r3, [pc, #196]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x108>)
 800274a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800274e:	0a1b      	lsrs	r3, r3, #8
 8002750:	f003 030f 	and.w	r3, r3, #15
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	e005      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002758:	4b2d      	ldr	r3, [pc, #180]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x108>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	091b      	lsrs	r3, r3, #4
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002764:	4a2b      	ldr	r2, [pc, #172]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800276c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10d      	bne.n	8002790 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002778:	e00a      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	2b04      	cmp	r3, #4
 800277e:	d102      	bne.n	8002786 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002780:	4b25      	ldr	r3, [pc, #148]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x110>)
 8002782:	61bb      	str	r3, [r7, #24]
 8002784:	e004      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	2b08      	cmp	r3, #8
 800278a:	d101      	bne.n	8002790 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800278c:	4b23      	ldr	r3, [pc, #140]	@ (800281c <HAL_RCC_GetSysClockFreq+0x114>)
 800278e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	2b0c      	cmp	r3, #12
 8002794:	d134      	bne.n	8002800 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002796:	4b1e      	ldr	r3, [pc, #120]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x108>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d003      	beq.n	80027ae <HAL_RCC_GetSysClockFreq+0xa6>
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	d003      	beq.n	80027b4 <HAL_RCC_GetSysClockFreq+0xac>
 80027ac:	e005      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x110>)
 80027b0:	617b      	str	r3, [r7, #20]
      break;
 80027b2:	e005      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027b4:	4b19      	ldr	r3, [pc, #100]	@ (800281c <HAL_RCC_GetSysClockFreq+0x114>)
 80027b6:	617b      	str	r3, [r7, #20]
      break;
 80027b8:	e002      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	617b      	str	r3, [r7, #20]
      break;
 80027be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027c0:	4b13      	ldr	r3, [pc, #76]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x108>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	091b      	lsrs	r3, r3, #4
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	3301      	adds	r3, #1
 80027cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027ce:	4b10      	ldr	r3, [pc, #64]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x108>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	0a1b      	lsrs	r3, r3, #8
 80027d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	fb03 f202 	mul.w	r2, r3, r2
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x108>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	0e5b      	lsrs	r3, r3, #25
 80027ec:	f003 0303 	and.w	r3, r3, #3
 80027f0:	3301      	adds	r3, #1
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002800:	69bb      	ldr	r3, [r7, #24]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3724      	adds	r7, #36	@ 0x24
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	40021000 	.word	0x40021000
 8002814:	080050b0 	.word	0x080050b0
 8002818:	00f42400 	.word	0x00f42400
 800281c:	007a1200 	.word	0x007a1200

08002820 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002824:	4b03      	ldr	r3, [pc, #12]	@ (8002834 <HAL_RCC_GetHCLKFreq+0x14>)
 8002826:	681b      	ldr	r3, [r3, #0]
}
 8002828:	4618      	mov	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	20000000 	.word	0x20000000

08002838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800283c:	f7ff fff0 	bl	8002820 <HAL_RCC_GetHCLKFreq>
 8002840:	4602      	mov	r2, r0
 8002842:	4b06      	ldr	r3, [pc, #24]	@ (800285c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	0a1b      	lsrs	r3, r3, #8
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	4904      	ldr	r1, [pc, #16]	@ (8002860 <HAL_RCC_GetPCLK1Freq+0x28>)
 800284e:	5ccb      	ldrb	r3, [r1, r3]
 8002850:	f003 031f 	and.w	r3, r3, #31
 8002854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002858:	4618      	mov	r0, r3
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40021000 	.word	0x40021000
 8002860:	080050a8 	.word	0x080050a8

08002864 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002868:	f7ff ffda 	bl	8002820 <HAL_RCC_GetHCLKFreq>
 800286c:	4602      	mov	r2, r0
 800286e:	4b06      	ldr	r3, [pc, #24]	@ (8002888 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	0adb      	lsrs	r3, r3, #11
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	4904      	ldr	r1, [pc, #16]	@ (800288c <HAL_RCC_GetPCLK2Freq+0x28>)
 800287a:	5ccb      	ldrb	r3, [r1, r3]
 800287c:	f003 031f 	and.w	r3, r3, #31
 8002880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002884:	4618      	mov	r0, r3
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40021000 	.word	0x40021000
 800288c:	080050a8 	.word	0x080050a8

08002890 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002898:	2300      	movs	r3, #0
 800289a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800289c:	4b2a      	ldr	r3, [pc, #168]	@ (8002948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800289e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028a8:	f7ff f9ee 	bl	8001c88 <HAL_PWREx_GetVoltageRange>
 80028ac:	6178      	str	r0, [r7, #20]
 80028ae:	e014      	b.n	80028da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028b0:	4b25      	ldr	r3, [pc, #148]	@ (8002948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b4:	4a24      	ldr	r2, [pc, #144]	@ (8002948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80028bc:	4b22      	ldr	r3, [pc, #136]	@ (8002948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028c8:	f7ff f9de 	bl	8001c88 <HAL_PWREx_GetVoltageRange>
 80028cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d2:	4a1d      	ldr	r2, [pc, #116]	@ (8002948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028e0:	d10b      	bne.n	80028fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b80      	cmp	r3, #128	@ 0x80
 80028e6:	d919      	bls.n	800291c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2ba0      	cmp	r3, #160	@ 0xa0
 80028ec:	d902      	bls.n	80028f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028ee:	2302      	movs	r3, #2
 80028f0:	613b      	str	r3, [r7, #16]
 80028f2:	e013      	b.n	800291c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028f4:	2301      	movs	r3, #1
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	e010      	b.n	800291c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b80      	cmp	r3, #128	@ 0x80
 80028fe:	d902      	bls.n	8002906 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002900:	2303      	movs	r3, #3
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	e00a      	b.n	800291c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b80      	cmp	r3, #128	@ 0x80
 800290a:	d102      	bne.n	8002912 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800290c:	2302      	movs	r3, #2
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	e004      	b.n	800291c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b70      	cmp	r3, #112	@ 0x70
 8002916:	d101      	bne.n	800291c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002918:	2301      	movs	r3, #1
 800291a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800291c:	4b0b      	ldr	r3, [pc, #44]	@ (800294c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f023 0207 	bic.w	r2, r3, #7
 8002924:	4909      	ldr	r1, [pc, #36]	@ (800294c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800292c:	4b07      	ldr	r3, [pc, #28]	@ (800294c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	429a      	cmp	r2, r3
 8002938:	d001      	beq.n	800293e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40021000 	.word	0x40021000
 800294c:	40022000 	.word	0x40022000

08002950 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002958:	2300      	movs	r3, #0
 800295a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800295c:	2300      	movs	r3, #0
 800295e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002968:	2b00      	cmp	r3, #0
 800296a:	d041      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002970:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002974:	d02a      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002976:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800297a:	d824      	bhi.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800297c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002980:	d008      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002982:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002986:	d81e      	bhi.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00a      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800298c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002990:	d010      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002992:	e018      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002994:	4b86      	ldr	r3, [pc, #536]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	4a85      	ldr	r2, [pc, #532]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800299a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800299e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029a0:	e015      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3304      	adds	r3, #4
 80029a6:	2100      	movs	r1, #0
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 fabb 	bl	8002f24 <RCCEx_PLLSAI1_Config>
 80029ae:	4603      	mov	r3, r0
 80029b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029b2:	e00c      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3320      	adds	r3, #32
 80029b8:	2100      	movs	r1, #0
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 fba6 	bl	800310c <RCCEx_PLLSAI2_Config>
 80029c0:	4603      	mov	r3, r0
 80029c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029c4:	e003      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	74fb      	strb	r3, [r7, #19]
      break;
 80029ca:	e000      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80029cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ce:	7cfb      	ldrb	r3, [r7, #19]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10b      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029d4:	4b76      	ldr	r3, [pc, #472]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029e2:	4973      	ldr	r1, [pc, #460]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80029ea:	e001      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ec:	7cfb      	ldrb	r3, [r7, #19]
 80029ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d041      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a00:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002a04:	d02a      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002a06:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002a0a:	d824      	bhi.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a10:	d008      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a16:	d81e      	bhi.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00a      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002a1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a20:	d010      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a22:	e018      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a24:	4b62      	ldr	r3, [pc, #392]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	4a61      	ldr	r2, [pc, #388]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a2e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a30:	e015      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3304      	adds	r3, #4
 8002a36:	2100      	movs	r1, #0
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 fa73 	bl	8002f24 <RCCEx_PLLSAI1_Config>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a42:	e00c      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3320      	adds	r3, #32
 8002a48:	2100      	movs	r1, #0
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 fb5e 	bl	800310c <RCCEx_PLLSAI2_Config>
 8002a50:	4603      	mov	r3, r0
 8002a52:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a54:	e003      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	74fb      	strb	r3, [r7, #19]
      break;
 8002a5a:	e000      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002a5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a5e:	7cfb      	ldrb	r3, [r7, #19]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10b      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a64:	4b52      	ldr	r3, [pc, #328]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a6a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a72:	494f      	ldr	r1, [pc, #316]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002a7a:	e001      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a7c:	7cfb      	ldrb	r3, [r7, #19]
 8002a7e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 80a0 	beq.w	8002bce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a92:	4b47      	ldr	r3, [pc, #284]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00d      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa8:	4b41      	ldr	r3, [pc, #260]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aac:	4a40      	ldr	r2, [pc, #256]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ab2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ab4:	4b3e      	ldr	r3, [pc, #248]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002abc:	60bb      	str	r3, [r7, #8]
 8002abe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ac4:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a3a      	ldr	r2, [pc, #232]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002aca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ace:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ad0:	f7fe fbcc 	bl	800126c <HAL_GetTick>
 8002ad4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ad6:	e009      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad8:	f7fe fbc8 	bl	800126c <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d902      	bls.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	74fb      	strb	r3, [r7, #19]
        break;
 8002aea:	e005      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002aec:	4b31      	ldr	r3, [pc, #196]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0ef      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002af8:	7cfb      	ldrb	r3, [r7, #19]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d15c      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002afe:	4b2c      	ldr	r3, [pc, #176]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b08:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d01f      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d019      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b1c:	4b24      	ldr	r3, [pc, #144]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b28:	4b21      	ldr	r3, [pc, #132]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b2e:	4a20      	ldr	r2, [pc, #128]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b38:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b3e:	4a1c      	ldr	r2, [pc, #112]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b48:	4a19      	ldr	r2, [pc, #100]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d016      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5a:	f7fe fb87 	bl	800126c <HAL_GetTick>
 8002b5e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b60:	e00b      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b62:	f7fe fb83 	bl	800126c <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d902      	bls.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	74fb      	strb	r3, [r7, #19]
            break;
 8002b78:	e006      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0ec      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002b88:	7cfb      	ldrb	r3, [r7, #19]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10c      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b8e:	4b08      	ldr	r3, [pc, #32]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b9e:	4904      	ldr	r1, [pc, #16]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002ba6:	e009      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ba8:	7cfb      	ldrb	r3, [r7, #19]
 8002baa:	74bb      	strb	r3, [r7, #18]
 8002bac:	e006      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002bae:	bf00      	nop
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb8:	7cfb      	ldrb	r3, [r7, #19]
 8002bba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bbc:	7c7b      	ldrb	r3, [r7, #17]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d105      	bne.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc2:	4b9e      	ldr	r3, [pc, #632]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc6:	4a9d      	ldr	r2, [pc, #628]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bcc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00a      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bda:	4b98      	ldr	r3, [pc, #608]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be0:	f023 0203 	bic.w	r2, r3, #3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be8:	4994      	ldr	r1, [pc, #592]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00a      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bfc:	4b8f      	ldr	r3, [pc, #572]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c02:	f023 020c 	bic.w	r2, r3, #12
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c0a:	498c      	ldr	r1, [pc, #560]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00a      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c1e:	4b87      	ldr	r3, [pc, #540]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c24:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2c:	4983      	ldr	r1, [pc, #524]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00a      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c40:	4b7e      	ldr	r3, [pc, #504]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c46:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c4e:	497b      	ldr	r1, [pc, #492]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0310 	and.w	r3, r3, #16
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c62:	4b76      	ldr	r3, [pc, #472]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c70:	4972      	ldr	r1, [pc, #456]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00a      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c84:	4b6d      	ldr	r3, [pc, #436]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c8a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c92:	496a      	ldr	r1, [pc, #424]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ca6:	4b65      	ldr	r3, [pc, #404]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb4:	4961      	ldr	r1, [pc, #388]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cc8:	4b5c      	ldr	r3, [pc, #368]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd6:	4959      	ldr	r1, [pc, #356]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cea:	4b54      	ldr	r3, [pc, #336]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cf0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cf8:	4950      	ldr	r1, [pc, #320]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00a      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d0c:	4b4b      	ldr	r3, [pc, #300]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d12:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d1a:	4948      	ldr	r1, [pc, #288]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00a      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d2e:	4b43      	ldr	r3, [pc, #268]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d34:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3c:	493f      	ldr	r1, [pc, #252]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d028      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d50:	4b3a      	ldr	r3, [pc, #232]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d5e:	4937      	ldr	r1, [pc, #220]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d6e:	d106      	bne.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d70:	4b32      	ldr	r3, [pc, #200]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4a31      	ldr	r2, [pc, #196]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d7a:	60d3      	str	r3, [r2, #12]
 8002d7c:	e011      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d82:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d86:	d10c      	bne.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 f8c8 	bl	8002f24 <RCCEx_PLLSAI1_Config>
 8002d94:	4603      	mov	r3, r0
 8002d96:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d98:	7cfb      	ldrb	r3, [r7, #19]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002d9e:	7cfb      	ldrb	r3, [r7, #19]
 8002da0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d028      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002dae:	4b23      	ldr	r3, [pc, #140]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dbc:	491f      	ldr	r1, [pc, #124]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002dcc:	d106      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dce:	4b1b      	ldr	r3, [pc, #108]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	4a1a      	ldr	r2, [pc, #104]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dd8:	60d3      	str	r3, [r2, #12]
 8002dda:	e011      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002de4:	d10c      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3304      	adds	r3, #4
 8002dea:	2101      	movs	r1, #1
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 f899 	bl	8002f24 <RCCEx_PLLSAI1_Config>
 8002df2:	4603      	mov	r3, r0
 8002df4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002df6:	7cfb      	ldrb	r3, [r7, #19]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002dfc:	7cfb      	ldrb	r3, [r7, #19]
 8002dfe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d02b      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e12:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e1a:	4908      	ldr	r1, [pc, #32]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e2a:	d109      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e2c:	4b03      	ldr	r3, [pc, #12]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	4a02      	ldr	r2, [pc, #8]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e36:	60d3      	str	r3, [r2, #12]
 8002e38:	e014      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002e3a:	bf00      	nop
 8002e3c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e48:	d10c      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	2101      	movs	r1, #1
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 f867 	bl	8002f24 <RCCEx_PLLSAI1_Config>
 8002e56:	4603      	mov	r3, r0
 8002e58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e5a:	7cfb      	ldrb	r3, [r7, #19]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002e60:	7cfb      	ldrb	r3, [r7, #19]
 8002e62:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d02f      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e70:	4b2b      	ldr	r3, [pc, #172]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e76:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e7e:	4928      	ldr	r1, [pc, #160]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e8e:	d10d      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3304      	adds	r3, #4
 8002e94:	2102      	movs	r1, #2
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 f844 	bl	8002f24 <RCCEx_PLLSAI1_Config>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ea0:	7cfb      	ldrb	r3, [r7, #19]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d014      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ea6:	7cfb      	ldrb	r3, [r7, #19]
 8002ea8:	74bb      	strb	r3, [r7, #18]
 8002eaa:	e011      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002eb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002eb4:	d10c      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3320      	adds	r3, #32
 8002eba:	2102      	movs	r1, #2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 f925 	bl	800310c <RCCEx_PLLSAI2_Config>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ec6:	7cfb      	ldrb	r3, [r7, #19]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ecc:	7cfb      	ldrb	r3, [r7, #19]
 8002ece:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00a      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002edc:	4b10      	ldr	r3, [pc, #64]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002eea:	490d      	ldr	r1, [pc, #52]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00b      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002efe:	4b08      	ldr	r3, [pc, #32]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f04:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f0e:	4904      	ldr	r1, [pc, #16]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f16:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021000 	.word	0x40021000

08002f24 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f32:	4b75      	ldr	r3, [pc, #468]	@ (8003108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d018      	beq.n	8002f70 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f3e:	4b72      	ldr	r3, [pc, #456]	@ (8003108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f003 0203 	and.w	r2, r3, #3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d10d      	bne.n	8002f6a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
       ||
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d009      	beq.n	8002f6a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f56:	4b6c      	ldr	r3, [pc, #432]	@ (8003108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	091b      	lsrs	r3, r3, #4
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	1c5a      	adds	r2, r3, #1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
       ||
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d047      	beq.n	8002ffa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	73fb      	strb	r3, [r7, #15]
 8002f6e:	e044      	b.n	8002ffa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	d018      	beq.n	8002faa <RCCEx_PLLSAI1_Config+0x86>
 8002f78:	2b03      	cmp	r3, #3
 8002f7a:	d825      	bhi.n	8002fc8 <RCCEx_PLLSAI1_Config+0xa4>
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d002      	beq.n	8002f86 <RCCEx_PLLSAI1_Config+0x62>
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d009      	beq.n	8002f98 <RCCEx_PLLSAI1_Config+0x74>
 8002f84:	e020      	b.n	8002fc8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f86:	4b60      	ldr	r3, [pc, #384]	@ (8003108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d11d      	bne.n	8002fce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f96:	e01a      	b.n	8002fce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f98:	4b5b      	ldr	r3, [pc, #364]	@ (8003108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d116      	bne.n	8002fd2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fa8:	e013      	b.n	8002fd2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002faa:	4b57      	ldr	r3, [pc, #348]	@ (8003108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10f      	bne.n	8002fd6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fb6:	4b54      	ldr	r3, [pc, #336]	@ (8003108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d109      	bne.n	8002fd6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fc6:	e006      	b.n	8002fd6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	73fb      	strb	r3, [r7, #15]
      break;
 8002fcc:	e004      	b.n	8002fd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fce:	bf00      	nop
 8002fd0:	e002      	b.n	8002fd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fd2:	bf00      	nop
 8002fd4:	e000      	b.n	8002fd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fd6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10d      	bne.n	8002ffa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fde:	4b4a      	ldr	r3, [pc, #296]	@ (8003108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6819      	ldr	r1, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	430b      	orrs	r3, r1
 8002ff4:	4944      	ldr	r1, [pc, #272]	@ (8003108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d17d      	bne.n	80030fc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003000:	4b41      	ldr	r3, [pc, #260]	@ (8003108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a40      	ldr	r2, [pc, #256]	@ (8003108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003006:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800300a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800300c:	f7fe f92e 	bl	800126c <HAL_GetTick>
 8003010:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003012:	e009      	b.n	8003028 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003014:	f7fe f92a 	bl	800126c <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d902      	bls.n	8003028 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	73fb      	strb	r3, [r7, #15]
        break;
 8003026:	e005      	b.n	8003034 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003028:	4b37      	ldr	r3, [pc, #220]	@ (8003108 <RCCEx_PLLSAI1_Config+0x1e4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1ef      	bne.n	8003014 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d160      	bne.n	80030fc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d111      	bne.n	8003064 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003040:	4b31      	ldr	r3, [pc, #196]	@ (8003108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003048:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6892      	ldr	r2, [r2, #8]
 8003050:	0211      	lsls	r1, r2, #8
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68d2      	ldr	r2, [r2, #12]
 8003056:	0912      	lsrs	r2, r2, #4
 8003058:	0452      	lsls	r2, r2, #17
 800305a:	430a      	orrs	r2, r1
 800305c:	492a      	ldr	r1, [pc, #168]	@ (8003108 <RCCEx_PLLSAI1_Config+0x1e4>)
 800305e:	4313      	orrs	r3, r2
 8003060:	610b      	str	r3, [r1, #16]
 8003062:	e027      	b.n	80030b4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d112      	bne.n	8003090 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800306a:	4b27      	ldr	r3, [pc, #156]	@ (8003108 <RCCEx_PLLSAI1_Config+0x1e4>)
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003072:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6892      	ldr	r2, [r2, #8]
 800307a:	0211      	lsls	r1, r2, #8
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6912      	ldr	r2, [r2, #16]
 8003080:	0852      	lsrs	r2, r2, #1
 8003082:	3a01      	subs	r2, #1
 8003084:	0552      	lsls	r2, r2, #21
 8003086:	430a      	orrs	r2, r1
 8003088:	491f      	ldr	r1, [pc, #124]	@ (8003108 <RCCEx_PLLSAI1_Config+0x1e4>)
 800308a:	4313      	orrs	r3, r2
 800308c:	610b      	str	r3, [r1, #16]
 800308e:	e011      	b.n	80030b4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003090:	4b1d      	ldr	r3, [pc, #116]	@ (8003108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003098:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6892      	ldr	r2, [r2, #8]
 80030a0:	0211      	lsls	r1, r2, #8
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6952      	ldr	r2, [r2, #20]
 80030a6:	0852      	lsrs	r2, r2, #1
 80030a8:	3a01      	subs	r2, #1
 80030aa:	0652      	lsls	r2, r2, #25
 80030ac:	430a      	orrs	r2, r1
 80030ae:	4916      	ldr	r1, [pc, #88]	@ (8003108 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80030b4:	4b14      	ldr	r3, [pc, #80]	@ (8003108 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a13      	ldr	r2, [pc, #76]	@ (8003108 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80030be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c0:	f7fe f8d4 	bl	800126c <HAL_GetTick>
 80030c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030c6:	e009      	b.n	80030dc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030c8:	f7fe f8d0 	bl	800126c <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d902      	bls.n	80030dc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	73fb      	strb	r3, [r7, #15]
          break;
 80030da:	e005      	b.n	80030e8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003108 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0ef      	beq.n	80030c8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d106      	bne.n	80030fc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80030ee:	4b06      	ldr	r3, [pc, #24]	@ (8003108 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f0:	691a      	ldr	r2, [r3, #16]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	4904      	ldr	r1, [pc, #16]	@ (8003108 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40021000 	.word	0x40021000

0800310c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800311a:	4b6a      	ldr	r3, [pc, #424]	@ (80032c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d018      	beq.n	8003158 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003126:	4b67      	ldr	r3, [pc, #412]	@ (80032c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f003 0203 	and.w	r2, r3, #3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d10d      	bne.n	8003152 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
       ||
 800313a:	2b00      	cmp	r3, #0
 800313c:	d009      	beq.n	8003152 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800313e:	4b61      	ldr	r3, [pc, #388]	@ (80032c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	091b      	lsrs	r3, r3, #4
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
       ||
 800314e:	429a      	cmp	r2, r3
 8003150:	d047      	beq.n	80031e2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	73fb      	strb	r3, [r7, #15]
 8003156:	e044      	b.n	80031e2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b03      	cmp	r3, #3
 800315e:	d018      	beq.n	8003192 <RCCEx_PLLSAI2_Config+0x86>
 8003160:	2b03      	cmp	r3, #3
 8003162:	d825      	bhi.n	80031b0 <RCCEx_PLLSAI2_Config+0xa4>
 8003164:	2b01      	cmp	r3, #1
 8003166:	d002      	beq.n	800316e <RCCEx_PLLSAI2_Config+0x62>
 8003168:	2b02      	cmp	r3, #2
 800316a:	d009      	beq.n	8003180 <RCCEx_PLLSAI2_Config+0x74>
 800316c:	e020      	b.n	80031b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800316e:	4b55      	ldr	r3, [pc, #340]	@ (80032c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d11d      	bne.n	80031b6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800317e:	e01a      	b.n	80031b6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003180:	4b50      	ldr	r3, [pc, #320]	@ (80032c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003188:	2b00      	cmp	r3, #0
 800318a:	d116      	bne.n	80031ba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003190:	e013      	b.n	80031ba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003192:	4b4c      	ldr	r3, [pc, #304]	@ (80032c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10f      	bne.n	80031be <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800319e:	4b49      	ldr	r3, [pc, #292]	@ (80032c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d109      	bne.n	80031be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031ae:	e006      	b.n	80031be <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	73fb      	strb	r3, [r7, #15]
      break;
 80031b4:	e004      	b.n	80031c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031b6:	bf00      	nop
 80031b8:	e002      	b.n	80031c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031ba:	bf00      	nop
 80031bc:	e000      	b.n	80031c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031be:	bf00      	nop
    }

    if(status == HAL_OK)
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10d      	bne.n	80031e2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031c6:	4b3f      	ldr	r3, [pc, #252]	@ (80032c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6819      	ldr	r1, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	430b      	orrs	r3, r1
 80031dc:	4939      	ldr	r1, [pc, #228]	@ (80032c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d167      	bne.n	80032b8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80031e8:	4b36      	ldr	r3, [pc, #216]	@ (80032c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a35      	ldr	r2, [pc, #212]	@ (80032c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031f4:	f7fe f83a 	bl	800126c <HAL_GetTick>
 80031f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031fa:	e009      	b.n	8003210 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031fc:	f7fe f836 	bl	800126c <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d902      	bls.n	8003210 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	73fb      	strb	r3, [r7, #15]
        break;
 800320e:	e005      	b.n	800321c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003210:	4b2c      	ldr	r3, [pc, #176]	@ (80032c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1ef      	bne.n	80031fc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800321c:	7bfb      	ldrb	r3, [r7, #15]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d14a      	bne.n	80032b8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d111      	bne.n	800324c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003228:	4b26      	ldr	r3, [pc, #152]	@ (80032c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003230:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6892      	ldr	r2, [r2, #8]
 8003238:	0211      	lsls	r1, r2, #8
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	68d2      	ldr	r2, [r2, #12]
 800323e:	0912      	lsrs	r2, r2, #4
 8003240:	0452      	lsls	r2, r2, #17
 8003242:	430a      	orrs	r2, r1
 8003244:	491f      	ldr	r1, [pc, #124]	@ (80032c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003246:	4313      	orrs	r3, r2
 8003248:	614b      	str	r3, [r1, #20]
 800324a:	e011      	b.n	8003270 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800324c:	4b1d      	ldr	r3, [pc, #116]	@ (80032c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003254:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6892      	ldr	r2, [r2, #8]
 800325c:	0211      	lsls	r1, r2, #8
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6912      	ldr	r2, [r2, #16]
 8003262:	0852      	lsrs	r2, r2, #1
 8003264:	3a01      	subs	r2, #1
 8003266:	0652      	lsls	r2, r2, #25
 8003268:	430a      	orrs	r2, r1
 800326a:	4916      	ldr	r1, [pc, #88]	@ (80032c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800326c:	4313      	orrs	r3, r2
 800326e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003270:	4b14      	ldr	r3, [pc, #80]	@ (80032c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a13      	ldr	r2, [pc, #76]	@ (80032c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003276:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800327a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327c:	f7fd fff6 	bl	800126c <HAL_GetTick>
 8003280:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003282:	e009      	b.n	8003298 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003284:	f7fd fff2 	bl	800126c <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d902      	bls.n	8003298 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	73fb      	strb	r3, [r7, #15]
          break;
 8003296:	e005      	b.n	80032a4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003298:	4b0a      	ldr	r3, [pc, #40]	@ (80032c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0ef      	beq.n	8003284 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d106      	bne.n	80032b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80032aa:	4b06      	ldr	r3, [pc, #24]	@ (80032c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ac:	695a      	ldr	r2, [r3, #20]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	4904      	ldr	r1, [pc, #16]	@ (80032c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	40021000 	.word	0x40021000

080032c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e095      	b.n	8003406 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d108      	bne.n	80032f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032ea:	d009      	beq.n	8003300 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	61da      	str	r2, [r3, #28]
 80032f2:	e005      	b.n	8003300 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d106      	bne.n	8003320 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7fd fa3c 	bl	8000798 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003336:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003340:	d902      	bls.n	8003348 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003342:	2300      	movs	r3, #0
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	e002      	b.n	800334e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003348:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800334c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003356:	d007      	beq.n	8003368 <HAL_SPI_Init+0xa0>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003360:	d002      	beq.n	8003368 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	431a      	orrs	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	69db      	ldr	r3, [r3, #28]
 800339c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033a0:	431a      	orrs	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033aa:	ea42 0103 	orr.w	r1, r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	0c1b      	lsrs	r3, r3, #16
 80033c4:	f003 0204 	and.w	r2, r3, #4
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033cc:	f003 0310 	and.w	r3, r3, #16
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80033e4:	ea42 0103 	orr.w	r1, r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b088      	sub	sp, #32
 8003412:	af00      	add	r7, sp, #0
 8003414:	60f8      	str	r0, [r7, #12]
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	603b      	str	r3, [r7, #0]
 800341a:	4613      	mov	r3, r2
 800341c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800341e:	f7fd ff25 	bl	800126c <HAL_GetTick>
 8003422:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003424:	88fb      	ldrh	r3, [r7, #6]
 8003426:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b01      	cmp	r3, #1
 8003432:	d001      	beq.n	8003438 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003434:	2302      	movs	r3, #2
 8003436:	e15c      	b.n	80036f2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <HAL_SPI_Transmit+0x36>
 800343e:	88fb      	ldrh	r3, [r7, #6]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e154      	b.n	80036f2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800344e:	2b01      	cmp	r3, #1
 8003450:	d101      	bne.n	8003456 <HAL_SPI_Transmit+0x48>
 8003452:	2302      	movs	r3, #2
 8003454:	e14d      	b.n	80036f2 <HAL_SPI_Transmit+0x2e4>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2203      	movs	r2, #3
 8003462:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	88fa      	ldrh	r2, [r7, #6]
 8003476:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	88fa      	ldrh	r2, [r7, #6]
 800347c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034a8:	d10f      	bne.n	80034ca <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034d4:	2b40      	cmp	r3, #64	@ 0x40
 80034d6:	d007      	beq.n	80034e8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034f0:	d952      	bls.n	8003598 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d002      	beq.n	8003500 <HAL_SPI_Transmit+0xf2>
 80034fa:	8b7b      	ldrh	r3, [r7, #26]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d145      	bne.n	800358c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003504:	881a      	ldrh	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003510:	1c9a      	adds	r2, r3, #2
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800351a:	b29b      	uxth	r3, r3
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003524:	e032      	b.n	800358c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b02      	cmp	r3, #2
 8003532:	d112      	bne.n	800355a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003538:	881a      	ldrh	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003544:	1c9a      	adds	r2, r3, #2
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800354e:	b29b      	uxth	r3, r3
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003558:	e018      	b.n	800358c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800355a:	f7fd fe87 	bl	800126c <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d803      	bhi.n	8003572 <HAL_SPI_Transmit+0x164>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003570:	d102      	bne.n	8003578 <HAL_SPI_Transmit+0x16a>
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d109      	bne.n	800358c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e0b2      	b.n	80036f2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1c7      	bne.n	8003526 <HAL_SPI_Transmit+0x118>
 8003596:	e083      	b.n	80036a0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d002      	beq.n	80035a6 <HAL_SPI_Transmit+0x198>
 80035a0:	8b7b      	ldrh	r3, [r7, #26]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d177      	bne.n	8003696 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d912      	bls.n	80035d6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b4:	881a      	ldrh	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c0:	1c9a      	adds	r2, r3, #2
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	3b02      	subs	r3, #2
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80035d4:	e05f      	b.n	8003696 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	330c      	adds	r3, #12
 80035e0:	7812      	ldrb	r2, [r2, #0]
 80035e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80035fc:	e04b      	b.n	8003696 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b02      	cmp	r3, #2
 800360a:	d12b      	bne.n	8003664 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003610:	b29b      	uxth	r3, r3
 8003612:	2b01      	cmp	r3, #1
 8003614:	d912      	bls.n	800363c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800361a:	881a      	ldrh	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003626:	1c9a      	adds	r2, r3, #2
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b02      	subs	r3, #2
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800363a:	e02c      	b.n	8003696 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	330c      	adds	r3, #12
 8003646:	7812      	ldrb	r2, [r2, #0]
 8003648:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800364e:	1c5a      	adds	r2, r3, #1
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003658:	b29b      	uxth	r3, r3
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003662:	e018      	b.n	8003696 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003664:	f7fd fe02 	bl	800126c <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d803      	bhi.n	800367c <HAL_SPI_Transmit+0x26e>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367a:	d102      	bne.n	8003682 <HAL_SPI_Transmit+0x274>
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d109      	bne.n	8003696 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e02d      	b.n	80036f2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1ae      	bne.n	80035fe <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036a0:	69fa      	ldr	r2, [r7, #28]
 80036a2:	6839      	ldr	r1, [r7, #0]
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 f947 	bl	8003938 <SPI_EndRxTxTransaction>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d002      	beq.n	80036b6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2220      	movs	r2, #32
 80036b4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10a      	bne.n	80036d4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036be:	2300      	movs	r3, #0
 80036c0:	617b      	str	r3, [r7, #20]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	617b      	str	r3, [r7, #20]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	617b      	str	r3, [r7, #20]
 80036d2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e000      	b.n	80036f2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80036f0:	2300      	movs	r3, #0
  }
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3720      	adds	r7, #32
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b088      	sub	sp, #32
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	603b      	str	r3, [r7, #0]
 8003708:	4613      	mov	r3, r2
 800370a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800370c:	f7fd fdae 	bl	800126c <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003714:	1a9b      	subs	r3, r3, r2
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	4413      	add	r3, r2
 800371a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800371c:	f7fd fda6 	bl	800126c <HAL_GetTick>
 8003720:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003722:	4b39      	ldr	r3, [pc, #228]	@ (8003808 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	015b      	lsls	r3, r3, #5
 8003728:	0d1b      	lsrs	r3, r3, #20
 800372a:	69fa      	ldr	r2, [r7, #28]
 800372c:	fb02 f303 	mul.w	r3, r2, r3
 8003730:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003732:	e054      	b.n	80037de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373a:	d050      	beq.n	80037de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800373c:	f7fd fd96 	bl	800126c <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	69fa      	ldr	r2, [r7, #28]
 8003748:	429a      	cmp	r2, r3
 800374a:	d902      	bls.n	8003752 <SPI_WaitFlagStateUntilTimeout+0x56>
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d13d      	bne.n	80037ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003760:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800376a:	d111      	bne.n	8003790 <SPI_WaitFlagStateUntilTimeout+0x94>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003774:	d004      	beq.n	8003780 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800377e:	d107      	bne.n	8003790 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800378e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003794:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003798:	d10f      	bne.n	80037ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e017      	b.n	80037fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	3b01      	subs	r3, #1
 80037dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4013      	ands	r3, r2
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	bf0c      	ite	eq
 80037ee:	2301      	moveq	r3, #1
 80037f0:	2300      	movne	r3, #0
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	461a      	mov	r2, r3
 80037f6:	79fb      	ldrb	r3, [r7, #7]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d19b      	bne.n	8003734 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3720      	adds	r7, #32
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	20000000 	.word	0x20000000

0800380c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08a      	sub	sp, #40	@ 0x28
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
 8003818:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800381a:	2300      	movs	r3, #0
 800381c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800381e:	f7fd fd25 	bl	800126c <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003826:	1a9b      	subs	r3, r3, r2
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	4413      	add	r3, r2
 800382c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800382e:	f7fd fd1d 	bl	800126c <HAL_GetTick>
 8003832:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	330c      	adds	r3, #12
 800383a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800383c:	4b3d      	ldr	r3, [pc, #244]	@ (8003934 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	00da      	lsls	r2, r3, #3
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	0d1b      	lsrs	r3, r3, #20
 800384c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800384e:	fb02 f303 	mul.w	r3, r2, r3
 8003852:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003854:	e060      	b.n	8003918 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800385c:	d107      	bne.n	800386e <SPI_WaitFifoStateUntilTimeout+0x62>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d104      	bne.n	800386e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	b2db      	uxtb	r3, r3
 800386a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800386c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003874:	d050      	beq.n	8003918 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003876:	f7fd fcf9 	bl	800126c <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003882:	429a      	cmp	r2, r3
 8003884:	d902      	bls.n	800388c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003888:	2b00      	cmp	r3, #0
 800388a:	d13d      	bne.n	8003908 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800389a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038a4:	d111      	bne.n	80038ca <SPI_WaitFifoStateUntilTimeout+0xbe>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038ae:	d004      	beq.n	80038ba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038b8:	d107      	bne.n	80038ca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038d2:	d10f      	bne.n	80038f4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e010      	b.n	800392a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	3b01      	subs	r3, #1
 8003916:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	4013      	ands	r3, r2
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	429a      	cmp	r2, r3
 8003926:	d196      	bne.n	8003856 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3728      	adds	r7, #40	@ 0x28
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	20000000 	.word	0x20000000

08003938 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af02      	add	r7, sp, #8
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	2200      	movs	r2, #0
 800394c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f7ff ff5b 	bl	800380c <SPI_WaitFifoStateUntilTimeout>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d007      	beq.n	800396c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003960:	f043 0220 	orr.w	r2, r3, #32
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e027      	b.n	80039bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2200      	movs	r2, #0
 8003974:	2180      	movs	r1, #128	@ 0x80
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f7ff fec0 	bl	80036fc <SPI_WaitFlagStateUntilTimeout>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d007      	beq.n	8003992 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003986:	f043 0220 	orr.w	r2, r3, #32
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e014      	b.n	80039bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2200      	movs	r2, #0
 800399a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f7ff ff34 	bl	800380c <SPI_WaitFifoStateUntilTimeout>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d007      	beq.n	80039ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ae:	f043 0220 	orr.w	r2, r3, #32
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e000      	b.n	80039bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e040      	b.n	8003a58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7fd fb42 	bl	8001070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2224      	movs	r2, #36	@ 0x24
 80039f0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0201 	bic.w	r2, r2, #1
 8003a00:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d002      	beq.n	8003a10 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 fe06 	bl	800461c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 fb4b 	bl	80040ac <UART_SetConfig>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e01b      	b.n	8003a58 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0201 	orr.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 fe85 	bl	8004760 <UART_CheckIdleState>
 8003a56:	4603      	mov	r3, r0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b0ba      	sub	sp, #232	@ 0xe8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003a8a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003a8e:	4013      	ands	r3, r2
 8003a90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003a94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d115      	bne.n	8003ac8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aa0:	f003 0320 	and.w	r3, r3, #32
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00f      	beq.n	8003ac8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aac:	f003 0320 	and.w	r3, r3, #32
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d009      	beq.n	8003ac8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 82ca 	beq.w	8004052 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	4798      	blx	r3
      }
      return;
 8003ac6:	e2c4      	b.n	8004052 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003ac8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 8117 	beq.w	8003d00 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003ad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003ade:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003ae2:	4b85      	ldr	r3, [pc, #532]	@ (8003cf8 <HAL_UART_IRQHandler+0x298>)
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 810a 	beq.w	8003d00 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d011      	beq.n	8003b1c <HAL_UART_IRQHandler+0xbc>
 8003af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00b      	beq.n	8003b1c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b12:	f043 0201 	orr.w	r2, r3, #1
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d011      	beq.n	8003b4c <HAL_UART_IRQHandler+0xec>
 8003b28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00b      	beq.n	8003b4c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b42:	f043 0204 	orr.w	r2, r3, #4
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d011      	beq.n	8003b7c <HAL_UART_IRQHandler+0x11c>
 8003b58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00b      	beq.n	8003b7c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2204      	movs	r2, #4
 8003b6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b72:	f043 0202 	orr.w	r2, r3, #2
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b80:	f003 0308 	and.w	r3, r3, #8
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d017      	beq.n	8003bb8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b8c:	f003 0320 	and.w	r3, r3, #32
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d105      	bne.n	8003ba0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003b94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b98:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00b      	beq.n	8003bb8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2208      	movs	r2, #8
 8003ba6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bae:	f043 0208 	orr.w	r2, r3, #8
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d012      	beq.n	8003bea <HAL_UART_IRQHandler+0x18a>
 8003bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bc8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00c      	beq.n	8003bea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003bd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003be0:	f043 0220 	orr.w	r2, r3, #32
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 8230 	beq.w	8004056 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bfa:	f003 0320 	and.w	r3, r3, #32
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00d      	beq.n	8003c1e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c06:	f003 0320 	and.w	r3, r3, #32
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d007      	beq.n	8003c1e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c24:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c32:	2b40      	cmp	r3, #64	@ 0x40
 8003c34:	d005      	beq.n	8003c42 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c3a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d04f      	beq.n	8003ce2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 fea1 	bl	800498a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c52:	2b40      	cmp	r3, #64	@ 0x40
 8003c54:	d141      	bne.n	8003cda <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	3308      	adds	r3, #8
 8003c5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c64:	e853 3f00 	ldrex	r3, [r3]
 8003c68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003c6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	3308      	adds	r3, #8
 8003c7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003c82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003c86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003c92:	e841 2300 	strex	r3, r2, [r1]
 8003c96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003c9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1d9      	bne.n	8003c56 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d013      	beq.n	8003cd2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cae:	4a13      	ldr	r2, [pc, #76]	@ (8003cfc <HAL_UART_IRQHandler+0x29c>)
 8003cb0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fd fd10 	bl	80016dc <HAL_DMA_Abort_IT>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d017      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003ccc:	4610      	mov	r0, r2
 8003cce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cd0:	e00f      	b.n	8003cf2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f9d4 	bl	8004080 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cd8:	e00b      	b.n	8003cf2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f9d0 	bl	8004080 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ce0:	e007      	b.n	8003cf2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f9cc 	bl	8004080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003cf0:	e1b1      	b.n	8004056 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf2:	bf00      	nop
    return;
 8003cf4:	e1af      	b.n	8004056 <HAL_UART_IRQHandler+0x5f6>
 8003cf6:	bf00      	nop
 8003cf8:	04000120 	.word	0x04000120
 8003cfc:	08004a53 	.word	0x08004a53

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	f040 816a 	bne.w	8003fde <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d0e:	f003 0310 	and.w	r3, r3, #16
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 8163 	beq.w	8003fde <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d1c:	f003 0310 	and.w	r3, r3, #16
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 815c 	beq.w	8003fde <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2210      	movs	r2, #16
 8003d2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d38:	2b40      	cmp	r3, #64	@ 0x40
 8003d3a:	f040 80d4 	bne.w	8003ee6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d4a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 80ad 	beq.w	8003eae <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003d5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	f080 80a5 	bcs.w	8003eae <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d6a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0320 	and.w	r3, r3, #32
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f040 8086 	bne.w	8003e8c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d8c:	e853 3f00 	ldrex	r3, [r3]
 8003d90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003d94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	461a      	mov	r2, r3
 8003da6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003daa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003dae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003db6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003dba:	e841 2300 	strex	r3, r2, [r1]
 8003dbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003dc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1da      	bne.n	8003d80 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	3308      	adds	r3, #8
 8003dd0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dd4:	e853 3f00 	ldrex	r3, [r3]
 8003dd8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003dda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ddc:	f023 0301 	bic.w	r3, r3, #1
 8003de0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3308      	adds	r3, #8
 8003dea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003dee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003df2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003df6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003dfa:	e841 2300 	strex	r3, r2, [r1]
 8003dfe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003e00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1e1      	bne.n	8003dca <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	3308      	adds	r3, #8
 8003e0c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e10:	e853 3f00 	ldrex	r3, [r3]
 8003e14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003e16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	3308      	adds	r3, #8
 8003e26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003e2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003e30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e32:	e841 2300 	strex	r3, r2, [r1]
 8003e36:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003e38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1e3      	bne.n	8003e06 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e54:	e853 3f00 	ldrex	r3, [r3]
 8003e58:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e5c:	f023 0310 	bic.w	r3, r3, #16
 8003e60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e70:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e76:	e841 2300 	strex	r3, r2, [r1]
 8003e7a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1e4      	bne.n	8003e4c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fd fbea 	bl	8001660 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f8f4 	bl	8004094 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003eac:	e0d5      	b.n	800405a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003eb4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	f040 80ce 	bne.w	800405a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0320 	and.w	r3, r3, #32
 8003eca:	2b20      	cmp	r3, #32
 8003ecc:	f040 80c5 	bne.w	800405a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003edc:	4619      	mov	r1, r3
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f8d8 	bl	8004094 <HAL_UARTEx_RxEventCallback>
      return;
 8003ee4:	e0b9      	b.n	800405a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 80ab 	beq.w	800405e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003f08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 80a6 	beq.w	800405e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f1a:	e853 3f00 	ldrex	r3, [r3]
 8003f1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003f34:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f36:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f3c:	e841 2300 	strex	r3, r2, [r1]
 8003f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1e4      	bne.n	8003f12 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3308      	adds	r3, #8
 8003f4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f52:	e853 3f00 	ldrex	r3, [r3]
 8003f56:	623b      	str	r3, [r7, #32]
   return(result);
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	f023 0301 	bic.w	r3, r3, #1
 8003f5e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	3308      	adds	r3, #8
 8003f68:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003f6c:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f74:	e841 2300 	strex	r3, r2, [r1]
 8003f78:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1e3      	bne.n	8003f48 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	e853 3f00 	ldrex	r3, [r3]
 8003fa0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f023 0310 	bic.w	r3, r3, #16
 8003fa8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003fb6:	61fb      	str	r3, [r7, #28]
 8003fb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fba:	69b9      	ldr	r1, [r7, #24]
 8003fbc:	69fa      	ldr	r2, [r7, #28]
 8003fbe:	e841 2300 	strex	r3, r2, [r1]
 8003fc2:	617b      	str	r3, [r7, #20]
   return(result);
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1e4      	bne.n	8003f94 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2202      	movs	r2, #2
 8003fce:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f85c 	bl	8004094 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003fdc:	e03f      	b.n	800405e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fe2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00e      	beq.n	8004008 <HAL_UART_IRQHandler+0x5a8>
 8003fea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d008      	beq.n	8004008 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003ffe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 fd66 	bl	8004ad2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004006:	e02d      	b.n	8004064 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800400c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00e      	beq.n	8004032 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800401c:	2b00      	cmp	r3, #0
 800401e:	d008      	beq.n	8004032 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004024:	2b00      	cmp	r3, #0
 8004026:	d01c      	beq.n	8004062 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	4798      	blx	r3
    }
    return;
 8004030:	e017      	b.n	8004062 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800403a:	2b00      	cmp	r3, #0
 800403c:	d012      	beq.n	8004064 <HAL_UART_IRQHandler+0x604>
 800403e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00c      	beq.n	8004064 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fd17 	bl	8004a7e <UART_EndTransmit_IT>
    return;
 8004050:	e008      	b.n	8004064 <HAL_UART_IRQHandler+0x604>
      return;
 8004052:	bf00      	nop
 8004054:	e006      	b.n	8004064 <HAL_UART_IRQHandler+0x604>
    return;
 8004056:	bf00      	nop
 8004058:	e004      	b.n	8004064 <HAL_UART_IRQHandler+0x604>
      return;
 800405a:	bf00      	nop
 800405c:	e002      	b.n	8004064 <HAL_UART_IRQHandler+0x604>
      return;
 800405e:	bf00      	nop
 8004060:	e000      	b.n	8004064 <HAL_UART_IRQHandler+0x604>
    return;
 8004062:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004064:	37e8      	adds	r7, #232	@ 0xe8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop

0800406c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	460b      	mov	r3, r1
 800409e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040b0:	b08a      	sub	sp, #40	@ 0x28
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040b6:	2300      	movs	r3, #0
 80040b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	431a      	orrs	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	431a      	orrs	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	69db      	ldr	r3, [r3, #28]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	4ba4      	ldr	r3, [pc, #656]	@ (800436c <UART_SetConfig+0x2c0>)
 80040dc:	4013      	ands	r3, r2
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	6812      	ldr	r2, [r2, #0]
 80040e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040e4:	430b      	orrs	r3, r1
 80040e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a99      	ldr	r2, [pc, #612]	@ (8004370 <UART_SetConfig+0x2c4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d004      	beq.n	8004118 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004114:	4313      	orrs	r3, r2
 8004116:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004128:	430a      	orrs	r2, r1
 800412a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a90      	ldr	r2, [pc, #576]	@ (8004374 <UART_SetConfig+0x2c8>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d126      	bne.n	8004184 <UART_SetConfig+0xd8>
 8004136:	4b90      	ldr	r3, [pc, #576]	@ (8004378 <UART_SetConfig+0x2cc>)
 8004138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800413c:	f003 0303 	and.w	r3, r3, #3
 8004140:	2b03      	cmp	r3, #3
 8004142:	d81b      	bhi.n	800417c <UART_SetConfig+0xd0>
 8004144:	a201      	add	r2, pc, #4	@ (adr r2, 800414c <UART_SetConfig+0xa0>)
 8004146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414a:	bf00      	nop
 800414c:	0800415d 	.word	0x0800415d
 8004150:	0800416d 	.word	0x0800416d
 8004154:	08004165 	.word	0x08004165
 8004158:	08004175 	.word	0x08004175
 800415c:	2301      	movs	r3, #1
 800415e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004162:	e116      	b.n	8004392 <UART_SetConfig+0x2e6>
 8004164:	2302      	movs	r3, #2
 8004166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800416a:	e112      	b.n	8004392 <UART_SetConfig+0x2e6>
 800416c:	2304      	movs	r3, #4
 800416e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004172:	e10e      	b.n	8004392 <UART_SetConfig+0x2e6>
 8004174:	2308      	movs	r3, #8
 8004176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800417a:	e10a      	b.n	8004392 <UART_SetConfig+0x2e6>
 800417c:	2310      	movs	r3, #16
 800417e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004182:	e106      	b.n	8004392 <UART_SetConfig+0x2e6>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a7c      	ldr	r2, [pc, #496]	@ (800437c <UART_SetConfig+0x2d0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d138      	bne.n	8004200 <UART_SetConfig+0x154>
 800418e:	4b7a      	ldr	r3, [pc, #488]	@ (8004378 <UART_SetConfig+0x2cc>)
 8004190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004194:	f003 030c 	and.w	r3, r3, #12
 8004198:	2b0c      	cmp	r3, #12
 800419a:	d82d      	bhi.n	80041f8 <UART_SetConfig+0x14c>
 800419c:	a201      	add	r2, pc, #4	@ (adr r2, 80041a4 <UART_SetConfig+0xf8>)
 800419e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a2:	bf00      	nop
 80041a4:	080041d9 	.word	0x080041d9
 80041a8:	080041f9 	.word	0x080041f9
 80041ac:	080041f9 	.word	0x080041f9
 80041b0:	080041f9 	.word	0x080041f9
 80041b4:	080041e9 	.word	0x080041e9
 80041b8:	080041f9 	.word	0x080041f9
 80041bc:	080041f9 	.word	0x080041f9
 80041c0:	080041f9 	.word	0x080041f9
 80041c4:	080041e1 	.word	0x080041e1
 80041c8:	080041f9 	.word	0x080041f9
 80041cc:	080041f9 	.word	0x080041f9
 80041d0:	080041f9 	.word	0x080041f9
 80041d4:	080041f1 	.word	0x080041f1
 80041d8:	2300      	movs	r3, #0
 80041da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041de:	e0d8      	b.n	8004392 <UART_SetConfig+0x2e6>
 80041e0:	2302      	movs	r3, #2
 80041e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041e6:	e0d4      	b.n	8004392 <UART_SetConfig+0x2e6>
 80041e8:	2304      	movs	r3, #4
 80041ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041ee:	e0d0      	b.n	8004392 <UART_SetConfig+0x2e6>
 80041f0:	2308      	movs	r3, #8
 80041f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041f6:	e0cc      	b.n	8004392 <UART_SetConfig+0x2e6>
 80041f8:	2310      	movs	r3, #16
 80041fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041fe:	e0c8      	b.n	8004392 <UART_SetConfig+0x2e6>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a5e      	ldr	r2, [pc, #376]	@ (8004380 <UART_SetConfig+0x2d4>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d125      	bne.n	8004256 <UART_SetConfig+0x1aa>
 800420a:	4b5b      	ldr	r3, [pc, #364]	@ (8004378 <UART_SetConfig+0x2cc>)
 800420c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004210:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004214:	2b30      	cmp	r3, #48	@ 0x30
 8004216:	d016      	beq.n	8004246 <UART_SetConfig+0x19a>
 8004218:	2b30      	cmp	r3, #48	@ 0x30
 800421a:	d818      	bhi.n	800424e <UART_SetConfig+0x1a2>
 800421c:	2b20      	cmp	r3, #32
 800421e:	d00a      	beq.n	8004236 <UART_SetConfig+0x18a>
 8004220:	2b20      	cmp	r3, #32
 8004222:	d814      	bhi.n	800424e <UART_SetConfig+0x1a2>
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <UART_SetConfig+0x182>
 8004228:	2b10      	cmp	r3, #16
 800422a:	d008      	beq.n	800423e <UART_SetConfig+0x192>
 800422c:	e00f      	b.n	800424e <UART_SetConfig+0x1a2>
 800422e:	2300      	movs	r3, #0
 8004230:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004234:	e0ad      	b.n	8004392 <UART_SetConfig+0x2e6>
 8004236:	2302      	movs	r3, #2
 8004238:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800423c:	e0a9      	b.n	8004392 <UART_SetConfig+0x2e6>
 800423e:	2304      	movs	r3, #4
 8004240:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004244:	e0a5      	b.n	8004392 <UART_SetConfig+0x2e6>
 8004246:	2308      	movs	r3, #8
 8004248:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800424c:	e0a1      	b.n	8004392 <UART_SetConfig+0x2e6>
 800424e:	2310      	movs	r3, #16
 8004250:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004254:	e09d      	b.n	8004392 <UART_SetConfig+0x2e6>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a4a      	ldr	r2, [pc, #296]	@ (8004384 <UART_SetConfig+0x2d8>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d125      	bne.n	80042ac <UART_SetConfig+0x200>
 8004260:	4b45      	ldr	r3, [pc, #276]	@ (8004378 <UART_SetConfig+0x2cc>)
 8004262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004266:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800426a:	2bc0      	cmp	r3, #192	@ 0xc0
 800426c:	d016      	beq.n	800429c <UART_SetConfig+0x1f0>
 800426e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004270:	d818      	bhi.n	80042a4 <UART_SetConfig+0x1f8>
 8004272:	2b80      	cmp	r3, #128	@ 0x80
 8004274:	d00a      	beq.n	800428c <UART_SetConfig+0x1e0>
 8004276:	2b80      	cmp	r3, #128	@ 0x80
 8004278:	d814      	bhi.n	80042a4 <UART_SetConfig+0x1f8>
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <UART_SetConfig+0x1d8>
 800427e:	2b40      	cmp	r3, #64	@ 0x40
 8004280:	d008      	beq.n	8004294 <UART_SetConfig+0x1e8>
 8004282:	e00f      	b.n	80042a4 <UART_SetConfig+0x1f8>
 8004284:	2300      	movs	r3, #0
 8004286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800428a:	e082      	b.n	8004392 <UART_SetConfig+0x2e6>
 800428c:	2302      	movs	r3, #2
 800428e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004292:	e07e      	b.n	8004392 <UART_SetConfig+0x2e6>
 8004294:	2304      	movs	r3, #4
 8004296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800429a:	e07a      	b.n	8004392 <UART_SetConfig+0x2e6>
 800429c:	2308      	movs	r3, #8
 800429e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042a2:	e076      	b.n	8004392 <UART_SetConfig+0x2e6>
 80042a4:	2310      	movs	r3, #16
 80042a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042aa:	e072      	b.n	8004392 <UART_SetConfig+0x2e6>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a35      	ldr	r2, [pc, #212]	@ (8004388 <UART_SetConfig+0x2dc>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d12a      	bne.n	800430c <UART_SetConfig+0x260>
 80042b6:	4b30      	ldr	r3, [pc, #192]	@ (8004378 <UART_SetConfig+0x2cc>)
 80042b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042c4:	d01a      	beq.n	80042fc <UART_SetConfig+0x250>
 80042c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042ca:	d81b      	bhi.n	8004304 <UART_SetConfig+0x258>
 80042cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042d0:	d00c      	beq.n	80042ec <UART_SetConfig+0x240>
 80042d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042d6:	d815      	bhi.n	8004304 <UART_SetConfig+0x258>
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <UART_SetConfig+0x238>
 80042dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042e0:	d008      	beq.n	80042f4 <UART_SetConfig+0x248>
 80042e2:	e00f      	b.n	8004304 <UART_SetConfig+0x258>
 80042e4:	2300      	movs	r3, #0
 80042e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ea:	e052      	b.n	8004392 <UART_SetConfig+0x2e6>
 80042ec:	2302      	movs	r3, #2
 80042ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042f2:	e04e      	b.n	8004392 <UART_SetConfig+0x2e6>
 80042f4:	2304      	movs	r3, #4
 80042f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042fa:	e04a      	b.n	8004392 <UART_SetConfig+0x2e6>
 80042fc:	2308      	movs	r3, #8
 80042fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004302:	e046      	b.n	8004392 <UART_SetConfig+0x2e6>
 8004304:	2310      	movs	r3, #16
 8004306:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800430a:	e042      	b.n	8004392 <UART_SetConfig+0x2e6>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a17      	ldr	r2, [pc, #92]	@ (8004370 <UART_SetConfig+0x2c4>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d13a      	bne.n	800438c <UART_SetConfig+0x2e0>
 8004316:	4b18      	ldr	r3, [pc, #96]	@ (8004378 <UART_SetConfig+0x2cc>)
 8004318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800431c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004320:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004324:	d01a      	beq.n	800435c <UART_SetConfig+0x2b0>
 8004326:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800432a:	d81b      	bhi.n	8004364 <UART_SetConfig+0x2b8>
 800432c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004330:	d00c      	beq.n	800434c <UART_SetConfig+0x2a0>
 8004332:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004336:	d815      	bhi.n	8004364 <UART_SetConfig+0x2b8>
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <UART_SetConfig+0x298>
 800433c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004340:	d008      	beq.n	8004354 <UART_SetConfig+0x2a8>
 8004342:	e00f      	b.n	8004364 <UART_SetConfig+0x2b8>
 8004344:	2300      	movs	r3, #0
 8004346:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800434a:	e022      	b.n	8004392 <UART_SetConfig+0x2e6>
 800434c:	2302      	movs	r3, #2
 800434e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004352:	e01e      	b.n	8004392 <UART_SetConfig+0x2e6>
 8004354:	2304      	movs	r3, #4
 8004356:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800435a:	e01a      	b.n	8004392 <UART_SetConfig+0x2e6>
 800435c:	2308      	movs	r3, #8
 800435e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004362:	e016      	b.n	8004392 <UART_SetConfig+0x2e6>
 8004364:	2310      	movs	r3, #16
 8004366:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800436a:	e012      	b.n	8004392 <UART_SetConfig+0x2e6>
 800436c:	efff69f3 	.word	0xefff69f3
 8004370:	40008000 	.word	0x40008000
 8004374:	40013800 	.word	0x40013800
 8004378:	40021000 	.word	0x40021000
 800437c:	40004400 	.word	0x40004400
 8004380:	40004800 	.word	0x40004800
 8004384:	40004c00 	.word	0x40004c00
 8004388:	40005000 	.word	0x40005000
 800438c:	2310      	movs	r3, #16
 800438e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a9f      	ldr	r2, [pc, #636]	@ (8004614 <UART_SetConfig+0x568>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d17a      	bne.n	8004492 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800439c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d824      	bhi.n	80043ee <UART_SetConfig+0x342>
 80043a4:	a201      	add	r2, pc, #4	@ (adr r2, 80043ac <UART_SetConfig+0x300>)
 80043a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043aa:	bf00      	nop
 80043ac:	080043d1 	.word	0x080043d1
 80043b0:	080043ef 	.word	0x080043ef
 80043b4:	080043d9 	.word	0x080043d9
 80043b8:	080043ef 	.word	0x080043ef
 80043bc:	080043df 	.word	0x080043df
 80043c0:	080043ef 	.word	0x080043ef
 80043c4:	080043ef 	.word	0x080043ef
 80043c8:	080043ef 	.word	0x080043ef
 80043cc:	080043e7 	.word	0x080043e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043d0:	f7fe fa32 	bl	8002838 <HAL_RCC_GetPCLK1Freq>
 80043d4:	61f8      	str	r0, [r7, #28]
        break;
 80043d6:	e010      	b.n	80043fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043d8:	4b8f      	ldr	r3, [pc, #572]	@ (8004618 <UART_SetConfig+0x56c>)
 80043da:	61fb      	str	r3, [r7, #28]
        break;
 80043dc:	e00d      	b.n	80043fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043de:	f7fe f993 	bl	8002708 <HAL_RCC_GetSysClockFreq>
 80043e2:	61f8      	str	r0, [r7, #28]
        break;
 80043e4:	e009      	b.n	80043fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043ea:	61fb      	str	r3, [r7, #28]
        break;
 80043ec:	e005      	b.n	80043fa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80043f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f000 80fb 	beq.w	80045f8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	4613      	mov	r3, r2
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	4413      	add	r3, r2
 800440c:	69fa      	ldr	r2, [r7, #28]
 800440e:	429a      	cmp	r2, r3
 8004410:	d305      	bcc.n	800441e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004418:	69fa      	ldr	r2, [r7, #28]
 800441a:	429a      	cmp	r2, r3
 800441c:	d903      	bls.n	8004426 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004424:	e0e8      	b.n	80045f8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	2200      	movs	r2, #0
 800442a:	461c      	mov	r4, r3
 800442c:	4615      	mov	r5, r2
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	f04f 0300 	mov.w	r3, #0
 8004436:	022b      	lsls	r3, r5, #8
 8004438:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800443c:	0222      	lsls	r2, r4, #8
 800443e:	68f9      	ldr	r1, [r7, #12]
 8004440:	6849      	ldr	r1, [r1, #4]
 8004442:	0849      	lsrs	r1, r1, #1
 8004444:	2000      	movs	r0, #0
 8004446:	4688      	mov	r8, r1
 8004448:	4681      	mov	r9, r0
 800444a:	eb12 0a08 	adds.w	sl, r2, r8
 800444e:	eb43 0b09 	adc.w	fp, r3, r9
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	603b      	str	r3, [r7, #0]
 800445a:	607a      	str	r2, [r7, #4]
 800445c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004460:	4650      	mov	r0, sl
 8004462:	4659      	mov	r1, fp
 8004464:	f7fb feb0 	bl	80001c8 <__aeabi_uldivmod>
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	4613      	mov	r3, r2
 800446e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004476:	d308      	bcc.n	800448a <UART_SetConfig+0x3de>
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800447e:	d204      	bcs.n	800448a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	60da      	str	r2, [r3, #12]
 8004488:	e0b6      	b.n	80045f8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004490:	e0b2      	b.n	80045f8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800449a:	d15e      	bne.n	800455a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800449c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d828      	bhi.n	80044f6 <UART_SetConfig+0x44a>
 80044a4:	a201      	add	r2, pc, #4	@ (adr r2, 80044ac <UART_SetConfig+0x400>)
 80044a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044aa:	bf00      	nop
 80044ac:	080044d1 	.word	0x080044d1
 80044b0:	080044d9 	.word	0x080044d9
 80044b4:	080044e1 	.word	0x080044e1
 80044b8:	080044f7 	.word	0x080044f7
 80044bc:	080044e7 	.word	0x080044e7
 80044c0:	080044f7 	.word	0x080044f7
 80044c4:	080044f7 	.word	0x080044f7
 80044c8:	080044f7 	.word	0x080044f7
 80044cc:	080044ef 	.word	0x080044ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044d0:	f7fe f9b2 	bl	8002838 <HAL_RCC_GetPCLK1Freq>
 80044d4:	61f8      	str	r0, [r7, #28]
        break;
 80044d6:	e014      	b.n	8004502 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044d8:	f7fe f9c4 	bl	8002864 <HAL_RCC_GetPCLK2Freq>
 80044dc:	61f8      	str	r0, [r7, #28]
        break;
 80044de:	e010      	b.n	8004502 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044e0:	4b4d      	ldr	r3, [pc, #308]	@ (8004618 <UART_SetConfig+0x56c>)
 80044e2:	61fb      	str	r3, [r7, #28]
        break;
 80044e4:	e00d      	b.n	8004502 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044e6:	f7fe f90f 	bl	8002708 <HAL_RCC_GetSysClockFreq>
 80044ea:	61f8      	str	r0, [r7, #28]
        break;
 80044ec:	e009      	b.n	8004502 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044f2:	61fb      	str	r3, [r7, #28]
        break;
 80044f4:	e005      	b.n	8004502 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004500:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d077      	beq.n	80045f8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	005a      	lsls	r2, r3, #1
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	085b      	lsrs	r3, r3, #1
 8004512:	441a      	add	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	fbb2 f3f3 	udiv	r3, r2, r3
 800451c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	2b0f      	cmp	r3, #15
 8004522:	d916      	bls.n	8004552 <UART_SetConfig+0x4a6>
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800452a:	d212      	bcs.n	8004552 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	b29b      	uxth	r3, r3
 8004530:	f023 030f 	bic.w	r3, r3, #15
 8004534:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	085b      	lsrs	r3, r3, #1
 800453a:	b29b      	uxth	r3, r3
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	b29a      	uxth	r2, r3
 8004542:	8afb      	ldrh	r3, [r7, #22]
 8004544:	4313      	orrs	r3, r2
 8004546:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	8afa      	ldrh	r2, [r7, #22]
 800454e:	60da      	str	r2, [r3, #12]
 8004550:	e052      	b.n	80045f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004558:	e04e      	b.n	80045f8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800455a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800455e:	2b08      	cmp	r3, #8
 8004560:	d827      	bhi.n	80045b2 <UART_SetConfig+0x506>
 8004562:	a201      	add	r2, pc, #4	@ (adr r2, 8004568 <UART_SetConfig+0x4bc>)
 8004564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004568:	0800458d 	.word	0x0800458d
 800456c:	08004595 	.word	0x08004595
 8004570:	0800459d 	.word	0x0800459d
 8004574:	080045b3 	.word	0x080045b3
 8004578:	080045a3 	.word	0x080045a3
 800457c:	080045b3 	.word	0x080045b3
 8004580:	080045b3 	.word	0x080045b3
 8004584:	080045b3 	.word	0x080045b3
 8004588:	080045ab 	.word	0x080045ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800458c:	f7fe f954 	bl	8002838 <HAL_RCC_GetPCLK1Freq>
 8004590:	61f8      	str	r0, [r7, #28]
        break;
 8004592:	e014      	b.n	80045be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004594:	f7fe f966 	bl	8002864 <HAL_RCC_GetPCLK2Freq>
 8004598:	61f8      	str	r0, [r7, #28]
        break;
 800459a:	e010      	b.n	80045be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800459c:	4b1e      	ldr	r3, [pc, #120]	@ (8004618 <UART_SetConfig+0x56c>)
 800459e:	61fb      	str	r3, [r7, #28]
        break;
 80045a0:	e00d      	b.n	80045be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045a2:	f7fe f8b1 	bl	8002708 <HAL_RCC_GetSysClockFreq>
 80045a6:	61f8      	str	r0, [r7, #28]
        break;
 80045a8:	e009      	b.n	80045be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045ae:	61fb      	str	r3, [r7, #28]
        break;
 80045b0:	e005      	b.n	80045be <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80045bc:	bf00      	nop
    }

    if (pclk != 0U)
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d019      	beq.n	80045f8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	085a      	lsrs	r2, r3, #1
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	441a      	add	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	2b0f      	cmp	r3, #15
 80045dc:	d909      	bls.n	80045f2 <UART_SetConfig+0x546>
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045e4:	d205      	bcs.n	80045f2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	60da      	str	r2, [r3, #12]
 80045f0:	e002      	b.n	80045f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004604:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004608:	4618      	mov	r0, r3
 800460a:	3728      	adds	r7, #40	@ 0x28
 800460c:	46bd      	mov	sp, r7
 800460e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004612:	bf00      	nop
 8004614:	40008000 	.word	0x40008000
 8004618:	00f42400 	.word	0x00f42400

0800461c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004628:	f003 0308 	and.w	r3, r3, #8
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00a      	beq.n	8004646 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00a      	beq.n	800468a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468e:	f003 0304 	and.w	r3, r3, #4
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b0:	f003 0310 	and.w	r3, r3, #16
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00a      	beq.n	80046ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d2:	f003 0320 	and.w	r3, r3, #32
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d01a      	beq.n	8004732 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004716:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800471a:	d10a      	bne.n	8004732 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00a      	beq.n	8004754 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	605a      	str	r2, [r3, #4]
  }
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b098      	sub	sp, #96	@ 0x60
 8004764:	af02      	add	r7, sp, #8
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004770:	f7fc fd7c 	bl	800126c <HAL_GetTick>
 8004774:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0308 	and.w	r3, r3, #8
 8004780:	2b08      	cmp	r3, #8
 8004782:	d12e      	bne.n	80047e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004784:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800478c:	2200      	movs	r2, #0
 800478e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f88c 	bl	80048b0 <UART_WaitOnFlagUntilTimeout>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d021      	beq.n	80047e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a6:	e853 3f00 	ldrex	r3, [r3]
 80047aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	461a      	mov	r2, r3
 80047ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80047be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047c4:	e841 2300 	strex	r3, r2, [r1]
 80047c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1e6      	bne.n	800479e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2220      	movs	r2, #32
 80047d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e062      	b.n	80048a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d149      	bne.n	8004884 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047f8:	2200      	movs	r2, #0
 80047fa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f856 	bl	80048b0 <UART_WaitOnFlagUntilTimeout>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d03c      	beq.n	8004884 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004812:	e853 3f00 	ldrex	r3, [r3]
 8004816:	623b      	str	r3, [r7, #32]
   return(result);
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800481e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	461a      	mov	r2, r3
 8004826:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004828:	633b      	str	r3, [r7, #48]	@ 0x30
 800482a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800482e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004830:	e841 2300 	strex	r3, r2, [r1]
 8004834:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1e6      	bne.n	800480a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	3308      	adds	r3, #8
 8004842:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	e853 3f00 	ldrex	r3, [r3]
 800484a:	60fb      	str	r3, [r7, #12]
   return(result);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 0301 	bic.w	r3, r3, #1
 8004852:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3308      	adds	r3, #8
 800485a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800485c:	61fa      	str	r2, [r7, #28]
 800485e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004860:	69b9      	ldr	r1, [r7, #24]
 8004862:	69fa      	ldr	r2, [r7, #28]
 8004864:	e841 2300 	strex	r3, r2, [r1]
 8004868:	617b      	str	r3, [r7, #20]
   return(result);
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1e5      	bne.n	800483c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2220      	movs	r2, #32
 8004874:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e011      	b.n	80048a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2220      	movs	r2, #32
 8004888:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2220      	movs	r2, #32
 800488e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3758      	adds	r7, #88	@ 0x58
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	603b      	str	r3, [r7, #0]
 80048bc:	4613      	mov	r3, r2
 80048be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048c0:	e04f      	b.n	8004962 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c8:	d04b      	beq.n	8004962 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ca:	f7fc fccf 	bl	800126c <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d302      	bcc.n	80048e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e04e      	b.n	8004982 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d037      	beq.n	8004962 <UART_WaitOnFlagUntilTimeout+0xb2>
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	2b80      	cmp	r3, #128	@ 0x80
 80048f6:	d034      	beq.n	8004962 <UART_WaitOnFlagUntilTimeout+0xb2>
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b40      	cmp	r3, #64	@ 0x40
 80048fc:	d031      	beq.n	8004962 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b08      	cmp	r3, #8
 800490a:	d110      	bne.n	800492e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2208      	movs	r2, #8
 8004912:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 f838 	bl	800498a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2208      	movs	r2, #8
 800491e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e029      	b.n	8004982 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004938:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800493c:	d111      	bne.n	8004962 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004946:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 f81e 	bl	800498a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2220      	movs	r2, #32
 8004952:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e00f      	b.n	8004982 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	69da      	ldr	r2, [r3, #28]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	4013      	ands	r3, r2
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	429a      	cmp	r2, r3
 8004970:	bf0c      	ite	eq
 8004972:	2301      	moveq	r3, #1
 8004974:	2300      	movne	r3, #0
 8004976:	b2db      	uxtb	r3, r3
 8004978:	461a      	mov	r2, r3
 800497a:	79fb      	ldrb	r3, [r7, #7]
 800497c:	429a      	cmp	r2, r3
 800497e:	d0a0      	beq.n	80048c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800498a:	b480      	push	{r7}
 800498c:	b095      	sub	sp, #84	@ 0x54
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800499a:	e853 3f00 	ldrex	r3, [r3]
 800499e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	461a      	mov	r2, r3
 80049ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80049b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049b8:	e841 2300 	strex	r3, r2, [r1]
 80049bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1e6      	bne.n	8004992 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	3308      	adds	r3, #8
 80049ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049cc:	6a3b      	ldr	r3, [r7, #32]
 80049ce:	e853 3f00 	ldrex	r3, [r3]
 80049d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	f023 0301 	bic.w	r3, r3, #1
 80049da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3308      	adds	r3, #8
 80049e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049ec:	e841 2300 	strex	r3, r2, [r1]
 80049f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80049f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1e5      	bne.n	80049c4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d118      	bne.n	8004a32 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	e853 3f00 	ldrex	r3, [r3]
 8004a0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f023 0310 	bic.w	r3, r3, #16
 8004a14:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a1e:	61bb      	str	r3, [r7, #24]
 8004a20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a22:	6979      	ldr	r1, [r7, #20]
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	e841 2300 	strex	r3, r2, [r1]
 8004a2a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1e6      	bne.n	8004a00 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2220      	movs	r2, #32
 8004a36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004a46:	bf00      	nop
 8004a48:	3754      	adds	r7, #84	@ 0x54
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b084      	sub	sp, #16
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f7ff fb05 	bl	8004080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a76:	bf00      	nop
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b088      	sub	sp, #32
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	e853 3f00 	ldrex	r3, [r3]
 8004a92:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a9a:	61fb      	str	r3, [r7, #28]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	61bb      	str	r3, [r7, #24]
 8004aa6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa8:	6979      	ldr	r1, [r7, #20]
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	e841 2300 	strex	r3, r2, [r1]
 8004ab0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1e6      	bne.n	8004a86 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2220      	movs	r2, #32
 8004abc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f7ff fad1 	bl	800406c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004aca:	bf00      	nop
 8004acc:	3720      	adds	r7, #32
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <memset>:
 8004ae6:	4402      	add	r2, r0
 8004ae8:	4603      	mov	r3, r0
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d100      	bne.n	8004af0 <memset+0xa>
 8004aee:	4770      	bx	lr
 8004af0:	f803 1b01 	strb.w	r1, [r3], #1
 8004af4:	e7f9      	b.n	8004aea <memset+0x4>
	...

08004af8 <__libc_init_array>:
 8004af8:	b570      	push	{r4, r5, r6, lr}
 8004afa:	4d0d      	ldr	r5, [pc, #52]	@ (8004b30 <__libc_init_array+0x38>)
 8004afc:	4c0d      	ldr	r4, [pc, #52]	@ (8004b34 <__libc_init_array+0x3c>)
 8004afe:	1b64      	subs	r4, r4, r5
 8004b00:	10a4      	asrs	r4, r4, #2
 8004b02:	2600      	movs	r6, #0
 8004b04:	42a6      	cmp	r6, r4
 8004b06:	d109      	bne.n	8004b1c <__libc_init_array+0x24>
 8004b08:	4d0b      	ldr	r5, [pc, #44]	@ (8004b38 <__libc_init_array+0x40>)
 8004b0a:	4c0c      	ldr	r4, [pc, #48]	@ (8004b3c <__libc_init_array+0x44>)
 8004b0c:	f000 f818 	bl	8004b40 <_init>
 8004b10:	1b64      	subs	r4, r4, r5
 8004b12:	10a4      	asrs	r4, r4, #2
 8004b14:	2600      	movs	r6, #0
 8004b16:	42a6      	cmp	r6, r4
 8004b18:	d105      	bne.n	8004b26 <__libc_init_array+0x2e>
 8004b1a:	bd70      	pop	{r4, r5, r6, pc}
 8004b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b20:	4798      	blx	r3
 8004b22:	3601      	adds	r6, #1
 8004b24:	e7ee      	b.n	8004b04 <__libc_init_array+0xc>
 8004b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b2a:	4798      	blx	r3
 8004b2c:	3601      	adds	r6, #1
 8004b2e:	e7f2      	b.n	8004b16 <__libc_init_array+0x1e>
 8004b30:	080050e8 	.word	0x080050e8
 8004b34:	080050e8 	.word	0x080050e8
 8004b38:	080050e8 	.word	0x080050e8
 8004b3c:	080050ec 	.word	0x080050ec

08004b40 <_init>:
 8004b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b42:	bf00      	nop
 8004b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b46:	bc08      	pop	{r3}
 8004b48:	469e      	mov	lr, r3
 8004b4a:	4770      	bx	lr

08004b4c <_fini>:
 8004b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b4e:	bf00      	nop
 8004b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b52:	bc08      	pop	{r3}
 8004b54:	469e      	mov	lr, r3
 8004b56:	4770      	bx	lr

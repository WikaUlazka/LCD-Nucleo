
archi22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076d8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000698  08007868  08007868  00008868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f00  08007f00  00009090  2**0
                  CONTENTS
  4 .ARM          00000008  08007f00  08007f00  00008f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f08  08007f08  00009090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f08  08007f08  00008f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f0c  08007f0c  00008f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  08007f10  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000090  08007fa0  00009090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08007fa0  00009338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b03  00000000  00000000  000090c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000366d  00000000  00000000  0001bbc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  0001f230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c07  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002873a  00000000  00000000  00020dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b5a  00000000  00000000  00049539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ecfd5  00000000  00000000  0005f093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014c068  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a9c  00000000  00000000  0014c0ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  00150b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007850 	.word	0x08007850

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08007850 	.word	0x08007850

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000566:	4b0c      	ldr	r3, [pc, #48]	@ (8000598 <MX_DMA_Init+0x38>)
 8000568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800056a:	4a0b      	ldr	r2, [pc, #44]	@ (8000598 <MX_DMA_Init+0x38>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6493      	str	r3, [r2, #72]	@ 0x48
 8000572:	4b09      	ldr	r3, [pc, #36]	@ (8000598 <MX_DMA_Init+0x38>)
 8000574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2100      	movs	r1, #0
 8000582:	200c      	movs	r0, #12
 8000584:	f002 f895 	bl	80026b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000588:	200c      	movs	r0, #12
 800058a:	f002 f8ae 	bl	80026ea <HAL_NVIC_EnableIRQ>

}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40021000 	.word	0x40021000

0800059c <create_2d_box_array>:
	int type;
	int is_active;
} PowerUp;


Box** create_2d_box_array(int rows, int cols) {
 800059c:	b590      	push	{r4, r7, lr}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
    // Allocate memory for rows
    Box** array = (Box**)malloc(rows * sizeof(Box*));
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	4618      	mov	r0, r3
 80005ac:	f005 ff24 	bl	80063f8 <malloc>
 80005b0:	4603      	mov	r3, r0
 80005b2:	60bb      	str	r3, [r7, #8]
    if (!array) {
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d102      	bne.n	80005c0 <create_2d_box_array+0x24>
        exit(0);
 80005ba:	2000      	movs	r0, #0
 80005bc:	f005 ff0a 	bl	80063d4 <exit>
    }

    // Allocate memory for each row
    for (int i = 0; i < rows; i++) {
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	e01b      	b.n	80005fe <create_2d_box_array+0x62>
        array[i] = (Box*)malloc(cols * sizeof(Box));
 80005c6:	683a      	ldr	r2, [r7, #0]
 80005c8:	4613      	mov	r3, r2
 80005ca:	00db      	lsls	r3, r3, #3
 80005cc:	1a9b      	subs	r3, r3, r2
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	4619      	mov	r1, r3
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	68ba      	ldr	r2, [r7, #8]
 80005d8:	18d4      	adds	r4, r2, r3
 80005da:	4608      	mov	r0, r1
 80005dc:	f005 ff0c 	bl	80063f8 <malloc>
 80005e0:	4603      	mov	r3, r0
 80005e2:	6023      	str	r3, [r4, #0]
        if (!array[i]) {
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	68ba      	ldr	r2, [r7, #8]
 80005ea:	4413      	add	r3, r2
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d102      	bne.n	80005f8 <create_2d_box_array+0x5c>
            exit(0);
 80005f2:	2000      	movs	r0, #0
 80005f4:	f005 feee 	bl	80063d4 <exit>
    for (int i = 0; i < rows; i++) {
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	3301      	adds	r3, #1
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	68fa      	ldr	r2, [r7, #12]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	429a      	cmp	r2, r3
 8000604:	dbdf      	blt.n	80005c6 <create_2d_box_array+0x2a>
        }
    }
    return array;
 8000606:	68bb      	ldr	r3, [r7, #8]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	bd90      	pop	{r4, r7, pc}

08000610 <create_boxes>:
    }
    free(array);
}

void create_boxes(Box** boxes)
{
 8000610:	b5b0      	push	{r4, r5, r7, lr}
 8000612:	b090      	sub	sp, #64	@ 0x40
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	srand(time(0));
 8000618:	2000      	movs	r0, #0
 800061a:	f006 f94f 	bl	80068bc <time>
 800061e:	4602      	mov	r2, r0
 8000620:	460b      	mov	r3, r1
 8000622:	4613      	mov	r3, r2
 8000624:	4618      	mov	r0, r3
 8000626:	f005 ff9d 	bl	8006564 <srand>

	uint16_t* colors = malloc(BOXES_ROWS * sizeof(uint16_t));
 800062a:	2303      	movs	r3, #3
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	4618      	mov	r0, r3
 8000630:	f005 fee2 	bl	80063f8 <malloc>
 8000634:	4603      	mov	r3, r0
 8000636:	633b      	str	r3, [r7, #48]	@ 0x30
	for (int row = 0; row < BOXES_ROWS; row++)
 8000638:	2300      	movs	r3, #0
 800063a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800063c:	e010      	b.n	8000660 <create_boxes+0x50>
	{
		colors[row] =  (uint16_t)(rand() % 65536);
 800063e:	f005 ffbf 	bl	80065c0 <rand>
 8000642:	4603      	mov	r3, r0
 8000644:	425a      	negs	r2, r3
 8000646:	b29b      	uxth	r3, r3
 8000648:	b292      	uxth	r2, r2
 800064a:	bf58      	it	pl
 800064c:	4253      	negpl	r3, r2
 800064e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000650:	0052      	lsls	r2, r2, #1
 8000652:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000654:	440a      	add	r2, r1
 8000656:	b29b      	uxth	r3, r3
 8000658:	8013      	strh	r3, [r2, #0]
	for (int row = 0; row < BOXES_ROWS; row++)
 800065a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800065c:	3301      	adds	r3, #1
 800065e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000660:	2203      	movs	r2, #3
 8000662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000664:	4293      	cmp	r3, r2
 8000666:	dbea      	blt.n	800063e <create_boxes+0x2e>
	}

	int box_width = (SCREEN_WIDTH - 20) / BOXES_COLS - BOX_SEPARATOR;
 8000668:	2378      	movs	r3, #120	@ 0x78
 800066a:	3b14      	subs	r3, #20
 800066c:	2206      	movs	r2, #6
 800066e:	fb93 f3f2 	sdiv	r3, r3, r2
 8000672:	2206      	movs	r2, #6
 8000674:	1a9b      	subs	r3, r3, r2
 8000676:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int box_height = box_width * 2 / 3;
 8000678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	4a27      	ldr	r2, [pc, #156]	@ (800071c <create_boxes+0x10c>)
 800067e:	fb82 1203 	smull	r1, r2, r2, r3
 8000682:	17db      	asrs	r3, r3, #31
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	62bb      	str	r3, [r7, #40]	@ 0x28

	for (int row = 0; row < BOXES_ROWS; row++)
 8000688:	2300      	movs	r3, #0
 800068a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800068c:	e03c      	b.n	8000708 <create_boxes+0xf8>
	{
		for (int col = 0; col < BOXES_COLS; col++)
 800068e:	2300      	movs	r3, #0
 8000690:	637b      	str	r3, [r7, #52]	@ 0x34
 8000692:	e032      	b.n	80006fa <create_boxes+0xea>
		{
			Box box;
			box.color = colors[row];
 8000694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800069a:	4413      	add	r3, r2
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	83bb      	strh	r3, [r7, #28]
			box.width = box_width;
 80006a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006a2:	617b      	str	r3, [r7, #20]
			box.height = box_height;
 80006a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006a6:	61bb      	str	r3, [r7, #24]
			box.x = (box_width + BOX_SEPARATOR) * col + 10;
 80006a8:	2206      	movs	r2, #6
 80006aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006ac:	4413      	add	r3, r2
 80006ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80006b0:	fb02 f303 	mul.w	r3, r2, r3
 80006b4:	330a      	adds	r3, #10
 80006b6:	60fb      	str	r3, [r7, #12]
			box.y = (box_height + BOX_SEPARATOR) * row + 10;
 80006b8:	2206      	movs	r2, #6
 80006ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006bc:	4413      	add	r3, r2
 80006be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80006c0:	fb02 f303 	mul.w	r3, r2, r3
 80006c4:	330a      	adds	r3, #10
 80006c6:	613b      	str	r3, [r7, #16]
			box.is_destroyed = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	623b      	str	r3, [r7, #32]

			boxes[row][col] = box;
 80006cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	4413      	add	r3, r2
 80006d4:	6819      	ldr	r1, [r3, #0]
 80006d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80006d8:	4613      	mov	r3, r2
 80006da:	00db      	lsls	r3, r3, #3
 80006dc:	1a9b      	subs	r3, r3, r2
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	440b      	add	r3, r1
 80006e2:	461d      	mov	r5, r3
 80006e4:	f107 040c 	add.w	r4, r7, #12
 80006e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006ec:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80006f0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		for (int col = 0; col < BOXES_COLS; col++)
 80006f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006f6:	3301      	adds	r3, #1
 80006f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80006fa:	2206      	movs	r2, #6
 80006fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006fe:	4293      	cmp	r3, r2
 8000700:	dbc8      	blt.n	8000694 <create_boxes+0x84>
	for (int row = 0; row < BOXES_ROWS; row++)
 8000702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000704:	3301      	adds	r3, #1
 8000706:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000708:	2203      	movs	r2, #3
 800070a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800070c:	4293      	cmp	r3, r2
 800070e:	dbbe      	blt.n	800068e <create_boxes+0x7e>
		}
	}
}
 8000710:	bf00      	nop
 8000712:	bf00      	nop
 8000714:	3740      	adds	r7, #64	@ 0x40
 8000716:	46bd      	mov	sp, r7
 8000718:	bdb0      	pop	{r4, r5, r7, pc}
 800071a:	bf00      	nop
 800071c:	55555556 	.word	0x55555556

08000720 <handle_input>:

int handle_input()
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
	uint8_t pressed_button;
	if (HAL_UART_Receive(&huart2, &pressed_button, 1, 5) == HAL_OK)
 8000726:	1df9      	adds	r1, r7, #7
 8000728:	2305      	movs	r3, #5
 800072a:	2201      	movs	r2, #1
 800072c:	4809      	ldr	r0, [pc, #36]	@ (8000754 <handle_input+0x34>)
 800072e:	f004 fd43 	bl	80051b8 <HAL_UART_Receive>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d107      	bne.n	8000748 <handle_input+0x28>
	{
		return pressed_button == 'a' ? -1 : 1;
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	2b61      	cmp	r3, #97	@ 0x61
 800073c:	d102      	bne.n	8000744 <handle_input+0x24>
 800073e:	f04f 33ff 	mov.w	r3, #4294967295
 8000742:	e002      	b.n	800074a <handle_input+0x2a>
 8000744:	2301      	movs	r3, #1
 8000746:	e000      	b.n	800074a <handle_input+0x2a>
	}

	return 0;
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000160 	.word	0x20000160

08000758 <ball_colide_with_box>:

int hit = 0;

int ball_colide_with_box(Ball* ball, Box box, char* hit_type) {
 8000758:	b084      	sub	sp, #16
 800075a:	b480      	push	{r7}
 800075c:	b085      	sub	sp, #20
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
 8000762:	f107 001c 	add.w	r0, r7, #28
 8000766:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    // Check for overlap along the x-axis
	 if (ball->x + ball->radius <= box.x || box.x + box.width <= ball->x)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	689b      	ldr	r3, [r3, #8]
 8000772:	441a      	add	r2, r3
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	429a      	cmp	r2, r3
 8000778:	dd06      	ble.n	8000788 <ball_colide_with_box+0x30>
 800077a:	69fa      	ldr	r2, [r7, #28]
 800077c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800077e:	441a      	add	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	429a      	cmp	r2, r3
 8000786:	dc01      	bgt.n	800078c <ball_colide_with_box+0x34>
	 {
		return 0; // No collision
 8000788:	2300      	movs	r3, #0
 800078a:	e054      	b.n	8000836 <ball_colide_with_box+0xde>
	 }

	// Check for overlap along the y-axis
	if (ball->y + ball->radius <= box.y || box.y + box.height <= ball->y)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	685a      	ldr	r2, [r3, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	441a      	add	r2, r3
 8000796:	6a3b      	ldr	r3, [r7, #32]
 8000798:	429a      	cmp	r2, r3
 800079a:	dd06      	ble.n	80007aa <ball_colide_with_box+0x52>
 800079c:	6a3a      	ldr	r2, [r7, #32]
 800079e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007a0:	441a      	add	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	dc01      	bgt.n	80007ae <ball_colide_with_box+0x56>
	{
		return 0; // No collision
 80007aa:	2300      	movs	r3, #0
 80007ac:	e043      	b.n	8000836 <ball_colide_with_box+0xde>
	}

	hit++;
 80007ae:	4b25      	ldr	r3, [pc, #148]	@ (8000844 <ball_colide_with_box+0xec>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	3301      	adds	r3, #1
 80007b4:	4a23      	ldr	r2, [pc, #140]	@ (8000844 <ball_colide_with_box+0xec>)
 80007b6:	6013      	str	r3, [r2, #0]
	if (hit > 5)
 80007b8:	4b22      	ldr	r3, [pc, #136]	@ (8000844 <ball_colide_with_box+0xec>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b05      	cmp	r3, #5
 80007be:	dd01      	ble.n	80007c4 <ball_colide_with_box+0x6c>
	{
		int a = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
//	)) {
//        *hit_type = 'S'; // Side collision
//    } else {
//        *hit_type = 'T'; // Top or Bottom collision
//    }
    if ((box.x + box.width >= ball->x || ball->x + ball->radius >= box.x)
 80007c4:	69fa      	ldr	r2, [r7, #28]
 80007c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007c8:	441a      	add	r2, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	da07      	bge.n	80007e2 <ball_colide_with_box+0x8a>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	441a      	add	r2, r3
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	429a      	cmp	r2, r3
 80007e0:	db25      	blt.n	800082e <ball_colide_with_box+0xd6>
    		&& (
    				(box.y + 2 <= ball->y  && box.y + box.height -2 >= ball->y)
 80007e2:	6a3b      	ldr	r3, [r7, #32]
 80007e4:	1c5a      	adds	r2, r3, #1
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	685b      	ldr	r3, [r3, #4]
    		&& (
 80007ea:	429a      	cmp	r2, r3
 80007ec:	da07      	bge.n	80007fe <ball_colide_with_box+0xa6>
    				(box.y + 2 <= ball->y  && box.y + box.height -2 >= ball->y)
 80007ee:	6a3a      	ldr	r2, [r7, #32]
 80007f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007f2:	4413      	add	r3, r2
 80007f4:	1e5a      	subs	r2, r3, #1
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	dc13      	bgt.n	8000826 <ball_colide_with_box+0xce>
				 || (box.y + 2 <= ball->y + ball->radius && box.y + box.height -2 >= ball->y + ball->radius)
 80007fe:	6a3b      	ldr	r3, [r7, #32]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6859      	ldr	r1, [r3, #4]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	440b      	add	r3, r1
 800080c:	429a      	cmp	r2, r3
 800080e:	da0e      	bge.n	800082e <ball_colide_with_box+0xd6>
 8000810:	6a3a      	ldr	r2, [r7, #32]
 8000812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000814:	4413      	add	r3, r2
 8000816:	1e5a      	subs	r2, r3, #1
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6859      	ldr	r1, [r3, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	689b      	ldr	r3, [r3, #8]
 8000820:	440b      	add	r3, r1
 8000822:	429a      	cmp	r2, r3
 8000824:	dd03      	ble.n	800082e <ball_colide_with_box+0xd6>
	)) {
        *hit_type = 'S'; // Side collision
 8000826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000828:	2253      	movs	r2, #83	@ 0x53
 800082a:	701a      	strb	r2, [r3, #0]
 800082c:	e002      	b.n	8000834 <ball_colide_with_box+0xdc>
    } else {
        *hit_type = 'T'; // Top or Bottom collision
 800082e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000830:	2254      	movs	r2, #84	@ 0x54
 8000832:	701a      	strb	r2, [r3, #0]
    }

    return 1; // Collision occurred
 8000834:	2301      	movs	r3, #1
}
 8000836:	4618      	mov	r0, r3
 8000838:	3714      	adds	r7, #20
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	b004      	add	sp, #16
 8000842:	4770      	bx	lr
 8000844:	200000ac 	.word	0x200000ac

08000848 <ball_colide_with_paddle>:

int ball_colide_with_paddle(Ball* ball, Paddle box, char* hit_type) {
 8000848:	b084      	sub	sp, #16
 800084a:	b480      	push	{r7}
 800084c:	b083      	sub	sp, #12
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
 8000852:	f107 0014 	add.w	r0, r7, #20
 8000856:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    // Check for overlap along the x-axis
	 if (ball->x + ball->radius <= box.x || box.x + box.width <= ball->x)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	689b      	ldr	r3, [r3, #8]
 8000862:	441a      	add	r2, r3
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	429a      	cmp	r2, r3
 8000868:	dd06      	ble.n	8000878 <ball_colide_with_paddle+0x30>
 800086a:	697a      	ldr	r2, [r7, #20]
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	441a      	add	r2, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	429a      	cmp	r2, r3
 8000876:	dc01      	bgt.n	800087c <ball_colide_with_paddle+0x34>
	 {
		return 0; // No collision
 8000878:	2300      	movs	r3, #0
 800087a:	e024      	b.n	80008c6 <ball_colide_with_paddle+0x7e>
	 }

	// Check for overlap along the y-axis
	if (ball->y + ball->radius <= box.y || box.y + box.height <= ball->y)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	685a      	ldr	r2, [r3, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	689b      	ldr	r3, [r3, #8]
 8000884:	441a      	add	r2, r3
 8000886:	69bb      	ldr	r3, [r7, #24]
 8000888:	429a      	cmp	r2, r3
 800088a:	dd06      	ble.n	800089a <ball_colide_with_paddle+0x52>
 800088c:	69ba      	ldr	r2, [r7, #24]
 800088e:	6a3b      	ldr	r3, [r7, #32]
 8000890:	441a      	add	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	429a      	cmp	r2, r3
 8000898:	dc01      	bgt.n	800089e <ball_colide_with_paddle+0x56>
	{
		return 0; // No collision
 800089a:	2300      	movs	r3, #0
 800089c:	e013      	b.n	80008c6 <ball_colide_with_paddle+0x7e>
	}

    // Determine if the collision is on the side or top/bottom
    if (ball->y < box.y || ball->y > box.y - box.height) {
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	685a      	ldr	r2, [r3, #4]
 80008a2:	69bb      	ldr	r3, [r7, #24]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	db06      	blt.n	80008b6 <ball_colide_with_paddle+0x6e>
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	685a      	ldr	r2, [r3, #4]
 80008ac:	69b9      	ldr	r1, [r7, #24]
 80008ae:	6a3b      	ldr	r3, [r7, #32]
 80008b0:	1acb      	subs	r3, r1, r3
 80008b2:	429a      	cmp	r2, r3
 80008b4:	dd03      	ble.n	80008be <ball_colide_with_paddle+0x76>
        *hit_type = 'T'; // Top or Bottom collision
 80008b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008b8:	2254      	movs	r2, #84	@ 0x54
 80008ba:	701a      	strb	r2, [r3, #0]
 80008bc:	e002      	b.n	80008c4 <ball_colide_with_paddle+0x7c>
    } else {
        *hit_type = 'S'; // Side collision
 80008be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008c0:	2253      	movs	r2, #83	@ 0x53
 80008c2:	701a      	strb	r2, [r3, #0]
    }

    return 1; // Collision occurred
 80008c4:	2301      	movs	r3, #1
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	b004      	add	sp, #16
 80008d2:	4770      	bx	lr

080008d4 <powerup_colide_with_paddle>:

int powerup_colide_with_paddle(PowerUp* powerup, Paddle box)
{
 80008d4:	b084      	sub	sp, #16
 80008d6:	b480      	push	{r7}
 80008d8:	b083      	sub	sp, #12
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
 80008de:	f107 0014 	add.w	r0, r7, #20
 80008e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    // Check for overlap along the x-axis
	 if (powerup->x + powerup->width <= box.x || box.x + box.width <= powerup->x)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	689b      	ldr	r3, [r3, #8]
 80008ee:	441a      	add	r2, r3
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	dd06      	ble.n	8000904 <powerup_colide_with_paddle+0x30>
 80008f6:	697a      	ldr	r2, [r7, #20]
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	441a      	add	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	429a      	cmp	r2, r3
 8000902:	dc01      	bgt.n	8000908 <powerup_colide_with_paddle+0x34>
	 {
		return 0; // No collision
 8000904:	2300      	movs	r3, #0
 8000906:	e011      	b.n	800092c <powerup_colide_with_paddle+0x58>
	 }

	// Check for overlap along the y-axis
	if (powerup->y + powerup->height <= box.y || box.y + box.height <= powerup->y)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	685a      	ldr	r2, [r3, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	441a      	add	r2, r3
 8000912:	69bb      	ldr	r3, [r7, #24]
 8000914:	429a      	cmp	r2, r3
 8000916:	dd06      	ble.n	8000926 <powerup_colide_with_paddle+0x52>
 8000918:	69ba      	ldr	r2, [r7, #24]
 800091a:	6a3b      	ldr	r3, [r7, #32]
 800091c:	441a      	add	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	429a      	cmp	r2, r3
 8000924:	dc01      	bgt.n	800092a <powerup_colide_with_paddle+0x56>
	{
		return 0; // No collision
 8000926:	2300      	movs	r3, #0
 8000928:	e000      	b.n	800092c <powerup_colide_with_paddle+0x58>
	}

    return 1; // Collision occurred
 800092a:	2301      	movs	r3, #1

}
 800092c:	4618      	mov	r0, r3
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	b004      	add	sp, #16
 8000938:	4770      	bx	lr
	...

0800093c <update>:


int update(int input, Box** boxes, Paddle* paddle, Ball* ball, PowerUp* powerups, int* numberOfPowerUps)
{
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	b09f      	sub	sp, #124	@ 0x7c
 8000940:	af06      	add	r7, sp, #24
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
 8000948:	603b      	str	r3, [r7, #0]


	// Collision with boxes
	for (int row = 0; row < BOXES_ROWS; row++)
 800094a:	2300      	movs	r3, #0
 800094c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800094e:	e08c      	b.n	8000a6a <update+0x12e>
	{
		for (int col = 0; col < BOXES_COLS; col++)
 8000950:	2300      	movs	r3, #0
 8000952:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000954:	e081      	b.n	8000a5a <update+0x11e>
		{
			Box* box = &boxes[row][col];
 8000956:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	68ba      	ldr	r2, [r7, #8]
 800095c:	4413      	add	r3, r2
 800095e:	6819      	ldr	r1, [r3, #0]
 8000960:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000962:	4613      	mov	r3, r2
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	1a9b      	subs	r3, r3, r2
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	440b      	add	r3, r1
 800096c:	63fb      	str	r3, [r7, #60]	@ 0x3c
			char hit_type;
			if (!box->is_destroyed && ball_colide_with_box(ball, *box, &hit_type))
 800096e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d16e      	bne.n	8000a54 <update+0x118>
 8000976:	6bfc      	ldr	r4, [r7, #60]	@ 0x3c
 8000978:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 800097c:	9304      	str	r3, [sp, #16]
 800097e:	466d      	mov	r5, sp
 8000980:	f104 030c 	add.w	r3, r4, #12
 8000984:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000986:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800098a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800098e:	6838      	ldr	r0, [r7, #0]
 8000990:	f7ff fee2 	bl	8000758 <ball_colide_with_box>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d05c      	beq.n	8000a54 <update+0x118>
			{
				if (hit_type == 'T')
 800099a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800099e:	2b54      	cmp	r3, #84	@ 0x54
 80009a0:	d105      	bne.n	80009ae <update+0x72>
				{
					ball->dy = -ball->dy;
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	425a      	negs	r2, r3
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	615a      	str	r2, [r3, #20]
 80009ac:	e008      	b.n	80009c0 <update+0x84>

				}
				else if (hit_type == 'S')
 80009ae:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80009b2:	2b53      	cmp	r3, #83	@ 0x53
 80009b4:	d104      	bne.n	80009c0 <update+0x84>
				{
					ball->dx = -ball->dx;
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	691b      	ldr	r3, [r3, #16]
 80009ba:	425a      	negs	r2, r3
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	611a      	str	r2, [r3, #16]
				}

				box->just_destroyed = 1;
 80009c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80009c2:	2201      	movs	r2, #1
 80009c4:	619a      	str	r2, [r3, #24]
				box->is_destroyed = 1;
 80009c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80009c8:	2201      	movs	r2, #1
 80009ca:	615a      	str	r2, [r3, #20]

				if (*numberOfPowerUps < MAX_POWER_UPS && rand()% 2 == 0)
 80009cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2203      	movs	r2, #3
 80009d2:	4293      	cmp	r3, r2
 80009d4:	da3e      	bge.n	8000a54 <update+0x118>
 80009d6:	f005 fdf3 	bl	80065c0 <rand>
 80009da:	4603      	mov	r3, r0
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d137      	bne.n	8000a54 <update+0x118>
				{
					PowerUp powerup;
					powerup.color = ST7735_MAGENTA;
 80009e4:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80009e8:	843b      	strh	r3, [r7, #32]
					powerup.dy = 1;
 80009ea:	2301      	movs	r3, #1
 80009ec:	627b      	str	r3, [r7, #36]	@ 0x24
					powerup.height = 5;
 80009ee:	2305      	movs	r3, #5
 80009f0:	61fb      	str	r3, [r7, #28]
					powerup.width = 5;
 80009f2:	2305      	movs	r3, #5
 80009f4:	61bb      	str	r3, [r7, #24]
					powerup.x = box->x;
 80009f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	613b      	str	r3, [r7, #16]
					powerup.y = box->y;
 80009fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	617b      	str	r3, [r7, #20]
					powerup.type = rand() % 2;
 8000a02:	f005 fddd 	bl	80065c0 <rand>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	bfb8      	it	lt
 8000a10:	425b      	neglt	r3, r3
 8000a12:	633b      	str	r3, [r7, #48]	@ 0x30
					powerup.is_active = 1;
 8000a14:	2301      	movs	r3, #1
 8000a16:	637b      	str	r3, [r7, #52]	@ 0x34

					powerup.prev_x = powerup.x;
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
					powerup.prev_y = powerup.y;
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

					powerups[*numberOfPowerUps] = powerup;
 8000a20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	4613      	mov	r3, r2
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	4413      	add	r3, r2
 8000a2c:	00db      	lsls	r3, r3, #3
 8000a2e:	461a      	mov	r2, r3
 8000a30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000a32:	4413      	add	r3, r2
 8000a34:	461d      	mov	r5, r3
 8000a36:	f107 0410 	add.w	r4, r7, #16
 8000a3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a46:	e885 0003 	stmia.w	r5, {r0, r1}
					(*numberOfPowerUps)++;
 8000a4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	1c5a      	adds	r2, r3, #1
 8000a50:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000a52:	601a      	str	r2, [r3, #0]
		for (int col = 0; col < BOXES_COLS; col++)
 8000a54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000a56:	3301      	adds	r3, #1
 8000a58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000a5a:	2206      	movs	r2, #6
 8000a5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	f6ff af79 	blt.w	8000956 <update+0x1a>
	for (int row = 0; row < BOXES_ROWS; row++)
 8000a64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a66:	3301      	adds	r3, #1
 8000a68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000a6a:	2203      	movs	r2, #3
 8000a6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	f6ff af6e 	blt.w	8000950 <update+0x14>
				}
			}
		}
	}
	// Update ball position
		ball->prev_x = ball->x;
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	619a      	str	r2, [r3, #24]
		ball->prev_y = ball->y;
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685a      	ldr	r2, [r3, #4]
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	61da      	str	r2, [r3, #28]
		ball->x += ball->dx * BALL_SPEED;
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	691b      	ldr	r3, [r3, #16]
 8000a8c:	4984      	ldr	r1, [pc, #528]	@ (8000ca0 <update+0x364>)
 8000a8e:	6809      	ldr	r1, [r1, #0]
 8000a90:	fb01 f303 	mul.w	r3, r1, r3
 8000a94:	441a      	add	r2, r3
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	601a      	str	r2, [r3, #0]
		ball->y += ball->dy * BALL_SPEED;
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685a      	ldr	r2, [r3, #4]
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	497f      	ldr	r1, [pc, #508]	@ (8000ca0 <update+0x364>)
 8000aa4:	6809      	ldr	r1, [r1, #0]
 8000aa6:	fb01 f303 	mul.w	r3, r1, r3
 8000aaa:	441a      	add	r2, r3
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	605a      	str	r2, [r3, #4]

		// handle screen bounds
		if ((ball->x - ball->radius) < 0 || ball->x > SCREEN_WIDTH)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	db04      	blt.n	8000ac8 <update+0x18c>
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	2278      	movs	r2, #120	@ 0x78
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	dd04      	ble.n	8000ad2 <update+0x196>
		{
			ball->dx = -ball->dx;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	691b      	ldr	r3, [r3, #16]
 8000acc:	425a      	negs	r2, r3
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	611a      	str	r2, [r3, #16]
		}

		if (ball->y < 0)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	da04      	bge.n	8000ae4 <update+0x1a8>
		{
			ball->dy = -ball->dy;
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	695b      	ldr	r3, [r3, #20]
 8000ade:	425a      	negs	r2, r3
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	615a      	str	r2, [r3, #20]
		}

		// if ball is outside of screem
		if (ball->y > SCREEN_HEIGHT)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	22a0      	movs	r2, #160	@ 0xa0
 8000aea:	4293      	cmp	r3, r2
 8000aec:	dd01      	ble.n	8000af2 <update+0x1b6>
		{
			return 1;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e0d1      	b.n	8000c96 <update+0x35a>
		}


	// If there are no boxes left then it's end
	// Collision with boxes
	int boxes_left = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	657b      	str	r3, [r7, #84]	@ 0x54
	for (int row = 0; row < BOXES_ROWS; row++)
 8000af6:	2300      	movs	r3, #0
 8000af8:	653b      	str	r3, [r7, #80]	@ 0x50
 8000afa:	e01f      	b.n	8000b3c <update+0x200>
	{
		for (int col = 0; col < BOXES_COLS; col++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000b00:	e015      	b.n	8000b2e <update+0x1f2>
		{
			Box* box = &boxes[row][col];
 8000b02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	4413      	add	r3, r2
 8000b0a:	6819      	ldr	r1, [r3, #0]
 8000b0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000b0e:	4613      	mov	r3, r2
 8000b10:	00db      	lsls	r3, r3, #3
 8000b12:	1a9b      	subs	r3, r3, r2
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	440b      	add	r3, r1
 8000b18:	643b      	str	r3, [r7, #64]	@ 0x40
			if (!box->is_destroyed)
 8000b1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b1c:	695b      	ldr	r3, [r3, #20]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d102      	bne.n	8000b28 <update+0x1ec>
			{
				boxes_left++;
 8000b22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000b24:	3301      	adds	r3, #1
 8000b26:	657b      	str	r3, [r7, #84]	@ 0x54
		for (int col = 0; col < BOXES_COLS; col++)
 8000b28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000b2e:	2206      	movs	r2, #6
 8000b30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b32:	4293      	cmp	r3, r2
 8000b34:	dbe5      	blt.n	8000b02 <update+0x1c6>
	for (int row = 0; row < BOXES_ROWS; row++)
 8000b36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000b38:	3301      	adds	r3, #1
 8000b3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8000b3c:	2203      	movs	r2, #3
 8000b3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000b40:	4293      	cmp	r3, r2
 8000b42:	dbdb      	blt.n	8000afc <update+0x1c0>
			}
		}
	}

	if (boxes_left == 0)
 8000b44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d101      	bne.n	8000b4e <update+0x212>
	{
		return 1;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e0a3      	b.n	8000c96 <update+0x35a>
	}


	// Paddle movement
	paddle->prev_width = paddle->width;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	689a      	ldr	r2, [r3, #8]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	61da      	str	r2, [r3, #28]
	paddle->prev_x = paddle ->x;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	615a      	str	r2, [r3, #20]
	paddle->x += PADDLE_SPEED * input ;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	4b50      	ldr	r3, [pc, #320]	@ (8000ca4 <update+0x368>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	68f9      	ldr	r1, [r7, #12]
 8000b68:	fb01 f303 	mul.w	r3, r1, r3
 8000b6c:	441a      	add	r2, r3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	601a      	str	r2, [r3, #0]

	if (paddle->x + paddle->width > SCREEN_WIDTH)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	2278      	movs	r2, #120	@ 0x78
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	dd06      	ble.n	8000b90 <update+0x254>
	{
		paddle->x = SCREEN_WIDTH - paddle->width;
 8000b82:	2278      	movs	r2, #120	@ 0x78
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	1ad2      	subs	r2, r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	e006      	b.n	8000b9e <update+0x262>
	}
	else if ((paddle->x) < 0)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	da02      	bge.n	8000b9e <update+0x262>
	{
		paddle->x = 0;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
	}


	// Collision with paddle
	char hit_type;
	if (ball_colide_with_paddle(ball, *paddle, &hit_type))
 8000b9e:	687e      	ldr	r6, [r7, #4]
 8000ba0:	f107 033b 	add.w	r3, r7, #59	@ 0x3b
 8000ba4:	9305      	str	r3, [sp, #20]
 8000ba6:	466d      	mov	r5, sp
 8000ba8:	f106 040c 	add.w	r4, r6, #12
 8000bac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bb0:	6823      	ldr	r3, [r4, #0]
 8000bb2:	602b      	str	r3, [r5, #0]
 8000bb4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000bb8:	6838      	ldr	r0, [r7, #0]
 8000bba:	f7ff fe45 	bl	8000848 <ball_colide_with_paddle>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d012      	beq.n	8000bea <update+0x2ae>
	{
		if (hit_type == 'T')
 8000bc4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000bc8:	2b54      	cmp	r3, #84	@ 0x54
 8000bca:	d105      	bne.n	8000bd8 <update+0x29c>
		{
			ball->dy = -ball->dy;
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	695b      	ldr	r3, [r3, #20]
 8000bd0:	425a      	negs	r2, r3
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	615a      	str	r2, [r3, #20]
 8000bd6:	e008      	b.n	8000bea <update+0x2ae>

		}
		else if (hit_type == 'S')
 8000bd8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000bdc:	2b53      	cmp	r3, #83	@ 0x53
 8000bde:	d104      	bne.n	8000bea <update+0x2ae>
		{
			ball->dx = -ball->dx;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	691b      	ldr	r3, [r3, #16]
 8000be4:	425a      	negs	r2, r3
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	611a      	str	r2, [r3, #16]
		}
	}

	// Move PowerUps
	for(int i = 0; i<*numberOfPowerUps; i++)
 8000bea:	2300      	movs	r3, #0
 8000bec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000bee:	e04c      	b.n	8000c8a <update+0x34e>
	{
		PowerUp* powerup = &powerups[i];
 8000bf0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	4413      	add	r3, r2
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000bfe:	4413      	add	r3, r2
 8000c00:	647b      	str	r3, [r7, #68]	@ 0x44
		powerup->prev_x = powerup->x;
 8000c02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c08:	619a      	str	r2, [r3, #24]
		powerup->prev_y = powerup->y;
 8000c0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c10:	61da      	str	r2, [r3, #28]
		powerup->y += powerup->dy;
 8000c12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	441a      	add	r2, r3
 8000c1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c1e:	605a      	str	r2, [r3, #4]

		if (powerup->is_active == 1 && powerup_colide_with_paddle(powerup, *paddle))
 8000c20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d12d      	bne.n	8000c84 <update+0x348>
 8000c28:	687e      	ldr	r6, [r7, #4]
 8000c2a:	466d      	mov	r5, sp
 8000c2c:	f106 040c 	add.w	r4, r6, #12
 8000c30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c34:	6823      	ldr	r3, [r4, #0]
 8000c36:	602b      	str	r3, [r5, #0]
 8000c38:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000c3c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000c3e:	f7ff fe49 	bl	80008d4 <powerup_colide_with_paddle>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d01d      	beq.n	8000c84 <update+0x348>
		{
			powerup->is_active = 0;
 8000c48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	625a      	str	r2, [r3, #36]	@ 0x24
			if (powerup->type == 0)
 8000c4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c50:	6a1b      	ldr	r3, [r3, #32]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d109      	bne.n	8000c6a <update+0x32e>
			{
				paddle->prev_width = paddle->width;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	689a      	ldr	r2, [r3, #8]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	61da      	str	r2, [r3, #28]
				paddle->width += 2;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	1c9a      	adds	r2, r3, #2
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	e00c      	b.n	8000c84 <update+0x348>
			}
			else if (powerup->type == 1)
 8000c6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c6c:	6a1b      	ldr	r3, [r3, #32]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d108      	bne.n	8000c84 <update+0x348>
			{
				paddle->prev_width = paddle->width;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	689a      	ldr	r2, [r3, #8]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	61da      	str	r2, [r3, #28]
				paddle->width -= 1;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	1e5a      	subs	r2, r3, #1
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	609a      	str	r2, [r3, #8]
	for(int i = 0; i<*numberOfPowerUps; i++)
 8000c84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000c86:	3301      	adds	r3, #1
 8000c88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000c8a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000c90:	429a      	cmp	r2, r3
 8000c92:	dbad      	blt.n	8000bf0 <update+0x2b4>
			}
		}
	}

	return 0;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3764      	adds	r7, #100	@ 0x64
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000004 	.word	0x20000004
 8000ca4:	20000000 	.word	0x20000000

08000ca8 <draw_box>:


void draw_box(Box box)
{
 8000ca8:	b084      	sub	sp, #16
 8000caa:	b590      	push	{r4, r7, lr}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af02      	add	r7, sp, #8
 8000cb0:	f107 0410 	add.w	r4, r7, #16
 8000cb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (box.just_destroyed)
 8000cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d00b      	beq.n	8000cd6 <draw_box+0x2e>
	{
		ST7735_FillRectangle(box.x, box.y, box.width, box.height, BACKGROUND_COLOR);
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	b298      	uxth	r0, r3
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	b299      	uxth	r1, r3
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	242a      	movs	r4, #42	@ 0x2a
 8000cd0:	9400      	str	r4, [sp, #0]
 8000cd2:	f001 f8a9 	bl	8001e28 <ST7735_FillRectangle>
	}

	if (!box.is_destroyed)
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d10c      	bne.n	8000cf6 <draw_box+0x4e>
	{
		ST7735_FillRectangle(box.x, box.y, box.width, box.height, box.color);
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	b298      	uxth	r0, r3
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	b299      	uxth	r1, r3
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	b29c      	uxth	r4, r3
 8000cec:	8c3b      	ldrh	r3, [r7, #32]
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	4623      	mov	r3, r4
 8000cf2:	f001 f899 	bl	8001e28 <ST7735_FillRectangle>
	}
}
 8000cf6:	bf00      	nop
 8000cf8:	3704      	adds	r7, #4
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000d00:	b004      	add	sp, #16
 8000d02:	4770      	bx	lr

08000d04 <draw_powerup>:

void draw_powerup(PowerUp powerup)
{
 8000d04:	b084      	sub	sp, #16
 8000d06:	b590      	push	{r4, r7, lr}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af02      	add	r7, sp, #8
 8000d0c:	f107 0410 	add.w	r4, r7, #16
 8000d10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ST7735_FillRectangle(powerup.prev_x, powerup.prev_y, powerup.width, powerup.height, BACKGROUND_COLOR);
 8000d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d16:	b298      	uxth	r0, r3
 8000d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d1a:	b299      	uxth	r1, r3
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	242a      	movs	r4, #42	@ 0x2a
 8000d26:	9400      	str	r4, [sp, #0]
 8000d28:	f001 f87e 	bl	8001e28 <ST7735_FillRectangle>
	if (powerup.is_active)
 8000d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d00c      	beq.n	8000d4c <draw_powerup+0x48>
	{
		ST7735_FillRectangle(powerup.x, powerup.y, powerup.width, powerup.height, powerup.color);
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	b298      	uxth	r0, r3
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	b299      	uxth	r1, r3
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	b29a      	uxth	r2, r3
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	b29c      	uxth	r4, r3
 8000d42:	8c3b      	ldrh	r3, [r7, #32]
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	4623      	mov	r3, r4
 8000d48:	f001 f86e 	bl	8001e28 <ST7735_FillRectangle>
	}
}
 8000d4c:	bf00      	nop
 8000d4e:	3704      	adds	r7, #4
 8000d50:	46bd      	mov	sp, r7
 8000d52:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000d56:	b004      	add	sp, #16
 8000d58:	4770      	bx	lr

08000d5a <draw_ball>:


void draw_ball(Ball* ball)
{
 8000d5a:	b590      	push	{r4, r7, lr}
 8000d5c:	b085      	sub	sp, #20
 8000d5e:	af02      	add	r7, sp, #8
 8000d60:	6078      	str	r0, [r7, #4]
	ST7735_FillRectangle(ball->prev_x, ball->prev_y, ball->radius, ball->radius, BACKGROUND_COLOR);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	b298      	uxth	r0, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	69db      	ldr	r3, [r3, #28]
 8000d6c:	b299      	uxth	r1, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	242a      	movs	r4, #42	@ 0x2a
 8000d7c:	9400      	str	r4, [sp, #0]
 8000d7e:	f001 f853 	bl	8001e28 <ST7735_FillRectangle>
	ST7735_FillRectangle(ball->x, ball->y, ball->radius, ball->radius, ball->color);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	b298      	uxth	r0, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	b299      	uxth	r1, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	b29c      	uxth	r4, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	899b      	ldrh	r3, [r3, #12]
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	4623      	mov	r3, r4
 8000da2:	f001 f841 	bl	8001e28 <ST7735_FillRectangle>
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd90      	pop	{r4, r7, pc}

08000dae <draw_paddle>:

void draw_paddle(Paddle* paddle)
{
 8000dae:	b590      	push	{r4, r7, lr}
 8000db0:	b085      	sub	sp, #20
 8000db2:	af02      	add	r7, sp, #8
 8000db4:	6078      	str	r0, [r7, #4]
	if (paddle->prev_x != paddle->x || paddle->prev_width != paddle->width)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	695a      	ldr	r2, [r3, #20]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d105      	bne.n	8000dce <draw_paddle+0x20>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	69da      	ldr	r2, [r3, #28]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d011      	beq.n	8000df2 <draw_paddle+0x44>
	{
		ST7735_FillRectangle(paddle->prev_x , paddle->prev_y, paddle->prev_width + 10, paddle->height, BACKGROUND_COLOR);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	b298      	uxth	r0, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	b299      	uxth	r1, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	330a      	adds	r3, #10
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	242a      	movs	r4, #42	@ 0x2a
 8000dec:	9400      	str	r4, [sp, #0]
 8000dee:	f001 f81b 	bl	8001e28 <ST7735_FillRectangle>
	}
	ST7735_FillRectangle(paddle->x, paddle->y, paddle->width, paddle->height, paddle->color);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	b298      	uxth	r0, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	b299      	uxth	r1, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	b29c      	uxth	r4, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	8a1b      	ldrh	r3, [r3, #16]
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	4623      	mov	r3, r4
 8000e12:	f001 f809 	bl	8001e28 <ST7735_FillRectangle>
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd90      	pop	{r4, r7, pc}

08000e1e <draw>:

void draw(Box** boxes, Paddle* paddle, Ball* ball, PowerUp* powerups, int numberOfPowerUps)
{
 8000e1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e20:	b095      	sub	sp, #84	@ 0x54
 8000e22:	af06      	add	r7, sp, #24
 8000e24:	60f8      	str	r0, [r7, #12]
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	607a      	str	r2, [r7, #4]
 8000e2a:	603b      	str	r3, [r7, #0]
	for (int row = 0; row < BOXES_ROWS; row++)
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e30:	e02c      	b.n	8000e8c <draw+0x6e>
	{
		for (int col = 0; col < BOXES_COLS; col++)
 8000e32:	2300      	movs	r3, #0
 8000e34:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e36:	e022      	b.n	8000e7e <draw+0x60>
		{
			Box box = boxes[row][col];
 8000e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	68fa      	ldr	r2, [r7, #12]
 8000e3e:	4413      	add	r3, r2
 8000e40:	6819      	ldr	r1, [r3, #0]
 8000e42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000e44:	4613      	mov	r3, r2
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	1a9b      	subs	r3, r3, r2
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	f107 0410 	add.w	r4, r7, #16
 8000e52:	461d      	mov	r5, r3
 8000e54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			draw_box(box);
 8000e60:	466c      	mov	r4, sp
 8000e62:	f107 0320 	add.w	r3, r7, #32
 8000e66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000e6e:	f107 0310 	add.w	r3, r7, #16
 8000e72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e74:	f7ff ff18 	bl	8000ca8 <draw_box>
		for (int col = 0; col < BOXES_COLS; col++)
 8000e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e7e:	2206      	movs	r2, #6
 8000e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e82:	4293      	cmp	r3, r2
 8000e84:	dbd8      	blt.n	8000e38 <draw+0x1a>
	for (int row = 0; row < BOXES_ROWS; row++)
 8000e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e88:	3301      	adds	r3, #1
 8000e8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e90:	4293      	cmp	r3, r2
 8000e92:	dbce      	blt.n	8000e32 <draw+0x14>
		}
	}


	for (int i = 0; i<numberOfPowerUps; i++)
 8000e94:	2300      	movs	r3, #0
 8000e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e98:	e017      	b.n	8000eca <draw+0xac>
	{
		draw_powerup(powerups[i]);
 8000e9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	4413      	add	r3, r2
 8000ea2:	00db      	lsls	r3, r3, #3
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	189e      	adds	r6, r3, r2
 8000eaa:	466d      	mov	r5, sp
 8000eac:	f106 0410 	add.w	r4, r6, #16
 8000eb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eb4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000eb8:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ebc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000ec0:	f7ff ff20 	bl	8000d04 <draw_powerup>
	for (int i = 0; i<numberOfPowerUps; i++)
 8000ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000eca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ecc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	dbe3      	blt.n	8000e9a <draw+0x7c>
	}

	draw_paddle(paddle);
 8000ed2:	68b8      	ldr	r0, [r7, #8]
 8000ed4:	f7ff ff6b 	bl	8000dae <draw_paddle>
	draw_ball(ball);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ff3e 	bl	8000d5a <draw_ball>
}
 8000ede:	bf00      	nop
 8000ee0:	373c      	adds	r7, #60	@ 0x3c
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ee6 <insert_score>:

void insert_score(uint64_t scores[], uint32_t size, uint32_t destroyed) {
 8000ee6:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000eea:	b087      	sub	sp, #28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
    // Find the correct position for the new score
    int pos = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
    while (pos < size && scores[pos] >= destroyed) {
 8000ef8:	e002      	b.n	8000f00 <insert_score+0x1a>
        pos++;
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	3301      	adds	r3, #1
 8000efe:	617b      	str	r3, [r7, #20]
    while (pos < size && scores[pos] >= destroyed) {
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d90c      	bls.n	8000f22 <insert_score+0x3c>
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	68fa      	ldr	r2, [r7, #12]
 8000f0e:	4413      	add	r3, r2
 8000f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f14:	6879      	ldr	r1, [r7, #4]
 8000f16:	2000      	movs	r0, #0
 8000f18:	460c      	mov	r4, r1
 8000f1a:	4605      	mov	r5, r0
 8000f1c:	42a2      	cmp	r2, r4
 8000f1e:	41ab      	sbcs	r3, r5
 8000f20:	d2eb      	bcs.n	8000efa <insert_score+0x14>
    }

    // If the score fits within the array, shift scores and insert it
    if (pos < size) {
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	68ba      	ldr	r2, [r7, #8]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d923      	bls.n	8000f72 <insert_score+0x8c>
        // Shift all lower scores down to make space for the new score
        for (int i = size - 1; i > pos; i--) {
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	e011      	b.n	8000f56 <insert_score+0x70>
            scores[i] = scores[i - 1];
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	68fa      	ldr	r2, [r7, #12]
 8000f3e:	4413      	add	r3, r2
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	00d2      	lsls	r2, r2, #3
 8000f44:	68f9      	ldr	r1, [r7, #12]
 8000f46:	4411      	add	r1, r2
 8000f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4c:	e9c1 2300 	strd	r2, r3, [r1]
        for (int i = size - 1; i > pos; i--) {
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	dce9      	bgt.n	8000f32 <insert_score+0x4c>
        }
        // Insert the new score
        scores[pos] = destroyed;
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	4413      	add	r3, r2
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4690      	mov	r8, r2
 8000f6c:	4689      	mov	r9, r1
 8000f6e:	e9c3 8900 	strd	r8, r9, [r3]
    }
}
 8000f72:	bf00      	nop
 8000f74:	371c      	adds	r7, #28
 8000f76:	46bd      	mov	sp, r7
 8000f78:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8000f7c:	4770      	bx	lr
	...

08000f80 <save_score>:


void save_score(Box** boxes)
{
 8000f80:	b5b0      	push	{r4, r5, r7, lr}
 8000f82:	b0a2      	sub	sp, #136	@ 0x88
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	uint32_t destroyed = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	for (int row = 0; row < BOXES_ROWS; row++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000f94:	e02b      	b.n	8000fee <save_score+0x6e>
	{
		for (int col = 0; col < BOXES_COLS; col++)
 8000f96:	2300      	movs	r3, #0
 8000f98:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000f9a:	e01f      	b.n	8000fdc <save_score+0x5c>
		{
			Box box = boxes[row][col];
 8000f9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	6819      	ldr	r1, [r3, #0]
 8000fa8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000faa:	4613      	mov	r3, r2
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	1a9b      	subs	r3, r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f107 040c 	add.w	r4, r7, #12
 8000fb8:	461d      	mov	r5, r3
 8000fba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fbe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			if (box.is_destroyed)
 8000fc6:	6a3b      	ldr	r3, [r7, #32]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d004      	beq.n	8000fd6 <save_score+0x56>
			{
				destroyed++;
 8000fcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		for (int col = 0; col < BOXES_COLS; col++)
 8000fd6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000fd8:	3301      	adds	r3, #1
 8000fda:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000fdc:	2206      	movs	r2, #6
 8000fde:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	dbdb      	blt.n	8000f9c <save_score+0x1c>
	for (int row = 0; row < BOXES_ROWS; row++)
 8000fe4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000fe8:	3301      	adds	r3, #1
 8000fea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000fee:	2203      	movs	r2, #3
 8000ff0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	dbce      	blt.n	8000f96 <save_score+0x16>
			}
		}
	}

	uint64_t scores[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 8000ff8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ffc:	2250      	movs	r2, #80	@ 0x50
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f005 fc52 	bl	80068aa <memset>
	Flash_ReadArray(FLASH_USER_START_ADDR, scores, 10);
 8001006:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800100a:	220a      	movs	r2, #10
 800100c:	4619      	mov	r1, r3
 800100e:	480b      	ldr	r0, [pc, #44]	@ (800103c <save_score+0xbc>)
 8001010:	f000 f9f9 	bl	8001406 <Flash_ReadArray>
	insert_score(scores, 10, destroyed);
 8001014:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001018:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800101c:	210a      	movs	r1, #10
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff ff61 	bl	8000ee6 <insert_score>
	Flash_WriteArray(FLASH_USER_START_ADDR, scores, 10);
 8001024:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001028:	220a      	movs	r2, #10
 800102a:	4619      	mov	r1, r3
 800102c:	4803      	ldr	r0, [pc, #12]	@ (800103c <save_score+0xbc>)
 800102e:	f000 f9db 	bl	80013e8 <Flash_WriteArray>
}
 8001032:	bf00      	nop
 8001034:	3788      	adds	r7, #136	@ 0x88
 8001036:	46bd      	mov	sp, r7
 8001038:	bdb0      	pop	{r4, r5, r7, pc}
 800103a:	bf00      	nop
 800103c:	08080000 	.word	0x08080000

08001040 <game>:


int game()
{
 8001040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001044:	b09b      	sub	sp, #108	@ 0x6c
 8001046:	af02      	add	r7, sp, #8
 8001048:	466b      	mov	r3, sp
 800104a:	461e      	mov	r6, r3
	ST7735_FillScreen(BACKGROUND_COLOR);
 800104c:	232a      	movs	r3, #42	@ 0x2a
 800104e:	4618      	mov	r0, r3
 8001050:	f000 ff5e 	bl	8001f10 <ST7735_FillScreen>

	Box** boxes = create_2d_box_array(BOXES_ROWS, BOXES_COLS);
 8001054:	2303      	movs	r3, #3
 8001056:	2206      	movs	r2, #6
 8001058:	4611      	mov	r1, r2
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fa9e 	bl	800059c <create_2d_box_array>
 8001060:	65f8      	str	r0, [r7, #92]	@ 0x5c
	create_boxes(boxes);
 8001062:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001064:	f7ff fad4 	bl	8000610 <create_boxes>

	Paddle paddle;
	paddle.color = ST7735_ORANGE;
 8001068:	f64f 5360 	movw	r3, #64864	@ 0xfd60
 800106c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	paddle.height = 5;
 800106e:	2305      	movs	r3, #5
 8001070:	63bb      	str	r3, [r7, #56]	@ 0x38
	paddle.width = 40;
 8001072:	2328      	movs	r3, #40	@ 0x28
 8001074:	637b      	str	r3, [r7, #52]	@ 0x34
	paddle.prev_width = paddle.width;
 8001076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001078:	64bb      	str	r3, [r7, #72]	@ 0x48
	paddle.x = SCREEN_WIDTH / 2 - paddle.width / 2;
 800107a:	2378      	movs	r3, #120	@ 0x78
 800107c:	0fda      	lsrs	r2, r3, #31
 800107e:	4413      	add	r3, r2
 8001080:	105b      	asrs	r3, r3, #1
 8001082:	4619      	mov	r1, r3
 8001084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001086:	0fda      	lsrs	r2, r3, #31
 8001088:	4413      	add	r3, r2
 800108a:	105b      	asrs	r3, r3, #1
 800108c:	425b      	negs	r3, r3
 800108e:	440b      	add	r3, r1
 8001090:	62fb      	str	r3, [r7, #44]	@ 0x2c
	paddle.y = SCREEN_HEIGHT * 10 / 11;
 8001092:	22a0      	movs	r2, #160	@ 0xa0
 8001094:	4613      	mov	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	4413      	add	r3, r2
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	4a5f      	ldr	r2, [pc, #380]	@ (800121c <game+0x1dc>)
 800109e:	fb82 1203 	smull	r1, r2, r2, r3
 80010a2:	1052      	asrs	r2, r2, #1
 80010a4:	17db      	asrs	r3, r3, #31
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	633b      	str	r3, [r7, #48]	@ 0x30
	paddle.prev_x = paddle.x;
 80010aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010ac:	643b      	str	r3, [r7, #64]	@ 0x40
	paddle.prev_y = paddle.y;
 80010ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010b0:	647b      	str	r3, [r7, #68]	@ 0x44



	Ball ball;
	ball.radius = 5;
 80010b2:	2305      	movs	r3, #5
 80010b4:	617b      	str	r3, [r7, #20]
	ball.x = paddle.x + paddle.width / 2 + ball.radius /2;
 80010b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80010b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010ba:	0fd9      	lsrs	r1, r3, #31
 80010bc:	440b      	add	r3, r1
 80010be:	105b      	asrs	r3, r3, #1
 80010c0:	441a      	add	r2, r3
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	0fd9      	lsrs	r1, r3, #31
 80010c6:	440b      	add	r3, r1
 80010c8:	105b      	asrs	r3, r3, #1
 80010ca:	4413      	add	r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
	ball.y = paddle.y - 10;
 80010ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010d0:	3b0a      	subs	r3, #10
 80010d2:	613b      	str	r3, [r7, #16]
	ball.color = ST7735_RED;
 80010d4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80010d8:	833b      	strh	r3, [r7, #24]
	ball.dx = (rand() % 7) - 3;
 80010da:	f005 fa71 	bl	80065c0 <rand>
 80010de:	4602      	mov	r2, r0
 80010e0:	4b4f      	ldr	r3, [pc, #316]	@ (8001220 <game+0x1e0>)
 80010e2:	fb83 1302 	smull	r1, r3, r3, r2
 80010e6:	4413      	add	r3, r2
 80010e8:	1099      	asrs	r1, r3, #2
 80010ea:	17d3      	asrs	r3, r2, #31
 80010ec:	1ac9      	subs	r1, r1, r3
 80010ee:	460b      	mov	r3, r1
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	1a5b      	subs	r3, r3, r1
 80010f4:	1ad1      	subs	r1, r2, r3
 80010f6:	1ecb      	subs	r3, r1, #3
 80010f8:	61fb      	str	r3, [r7, #28]
	ball.dy = -(rand() % 3);
 80010fa:	f005 fa61 	bl	80065c0 <rand>
 80010fe:	4601      	mov	r1, r0
 8001100:	4b48      	ldr	r3, [pc, #288]	@ (8001224 <game+0x1e4>)
 8001102:	fb83 3201 	smull	r3, r2, r3, r1
 8001106:	17cb      	asrs	r3, r1, #31
 8001108:	1ad2      	subs	r2, r2, r3
 800110a:	4613      	mov	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4413      	add	r3, r2
 8001110:	1aca      	subs	r2, r1, r3
 8001112:	4253      	negs	r3, r2
 8001114:	623b      	str	r3, [r7, #32]
	ball.prev_x = ball.x;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	627b      	str	r3, [r7, #36]	@ 0x24
	ball.prev_y = ball.y;
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	62bb      	str	r3, [r7, #40]	@ 0x28

	PowerUp powerups[MAX_POWER_UPS];
 800111e:	2303      	movs	r3, #3
 8001120:	3b01      	subs	r3, #1
 8001122:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001124:	2303      	movs	r3, #3
 8001126:	461a      	mov	r2, r3
 8001128:	2300      	movs	r3, #0
 800112a:	603a      	str	r2, [r7, #0]
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	f04f 0100 	mov.w	r1, #0
 800113a:	0099      	lsls	r1, r3, #2
 800113c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001140:	0090      	lsls	r0, r2, #2
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	6839      	ldr	r1, [r7, #0]
 8001148:	eb12 0801 	adds.w	r8, r2, r1
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	eb43 0901 	adc.w	r9, r3, r1
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	f04f 0300 	mov.w	r3, #0
 800115a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800115e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001162:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001166:	2303      	movs	r3, #3
 8001168:	461a      	mov	r2, r3
 800116a:	2300      	movs	r3, #0
 800116c:	4692      	mov	sl, r2
 800116e:	469b      	mov	fp, r3
 8001170:	4652      	mov	r2, sl
 8001172:	465b      	mov	r3, fp
 8001174:	f04f 0000 	mov.w	r0, #0
 8001178:	f04f 0100 	mov.w	r1, #0
 800117c:	0099      	lsls	r1, r3, #2
 800117e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001182:	0090      	lsls	r0, r2, #2
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	eb12 040a 	adds.w	r4, r2, sl
 800118c:	eb43 050b 	adc.w	r5, r3, fp
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	f04f 0300 	mov.w	r3, #0
 8001198:	01ab      	lsls	r3, r5, #6
 800119a:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 800119e:	01a2      	lsls	r2, r4, #6
 80011a0:	2303      	movs	r3, #3
 80011a2:	461a      	mov	r2, r3
 80011a4:	4613      	mov	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	3307      	adds	r3, #7
 80011ae:	08db      	lsrs	r3, r3, #3
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	ebad 0d03 	sub.w	sp, sp, r3
 80011b6:	ab02      	add	r3, sp, #8
 80011b8:	3303      	adds	r3, #3
 80011ba:	089b      	lsrs	r3, r3, #2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	657b      	str	r3, [r7, #84]	@ 0x54
	int numberOfPowerUps = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]

	while (1)
	{
		int input = handle_input();
 80011c4:	f7ff faac 	bl	8000720 <handle_input>
 80011c8:	6538      	str	r0, [r7, #80]	@ 0x50
		int status = update(input, boxes, &paddle, &ball, powerups, &numberOfPowerUps);
 80011ca:	f107 010c 	add.w	r1, r7, #12
 80011ce:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80011d2:	f107 0308 	add.w	r3, r7, #8
 80011d6:	9301      	str	r3, [sp, #4]
 80011d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	460b      	mov	r3, r1
 80011de:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80011e0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80011e2:	f7ff fbab 	bl	800093c <update>
 80011e6:	64f8      	str	r0, [r7, #76]	@ 0x4c

		if (status != 0)
 80011e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d005      	beq.n	80011fa <game+0x1ba>
		{
			save_score(boxes);
 80011ee:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80011f0:	f7ff fec6 	bl	8000f80 <save_score>

			// Go to high scores
			return 2;
 80011f4:	2302      	movs	r3, #2
 80011f6:	46b5      	mov	sp, r6
 80011f8:	e00a      	b.n	8001210 <game+0x1d0>
		}
		draw(boxes, &paddle, &ball, powerups, numberOfPowerUps);
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	f107 020c 	add.w	r2, r7, #12
 8001200:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001208:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800120a:	f7ff fe08 	bl	8000e1e <draw>
	{
 800120e:	e7d9      	b.n	80011c4 <game+0x184>
	}
}
 8001210:	4618      	mov	r0, r3
 8001212:	3764      	adds	r7, #100	@ 0x64
 8001214:	46bd      	mov	sp, r7
 8001216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800121a:	bf00      	nop
 800121c:	2e8ba2e9 	.word	0x2e8ba2e9
 8001220:	92492493 	.word	0x92492493
 8001224:	55555556 	.word	0x55555556

08001228 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122e:	f107 030c 	add.w	r3, r7, #12
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800123e:	4b29      	ldr	r3, [pc, #164]	@ (80012e4 <MX_GPIO_Init+0xbc>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001242:	4a28      	ldr	r2, [pc, #160]	@ (80012e4 <MX_GPIO_Init+0xbc>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800124a:	4b26      	ldr	r3, [pc, #152]	@ (80012e4 <MX_GPIO_Init+0xbc>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	4b23      	ldr	r3, [pc, #140]	@ (80012e4 <MX_GPIO_Init+0xbc>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125a:	4a22      	ldr	r2, [pc, #136]	@ (80012e4 <MX_GPIO_Init+0xbc>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001262:	4b20      	ldr	r3, [pc, #128]	@ (80012e4 <MX_GPIO_Init+0xbc>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126e:	4b1d      	ldr	r3, [pc, #116]	@ (80012e4 <MX_GPIO_Init+0xbc>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001272:	4a1c      	ldr	r2, [pc, #112]	@ (80012e4 <MX_GPIO_Init+0xbc>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127a:	4b1a      	ldr	r3, [pc, #104]	@ (80012e4 <MX_GPIO_Init+0xbc>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_PIN_Pin|LCD_RST_PIN_Pin|LCD_DC_PIN_Pin, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 800128c:	4816      	ldr	r0, [pc, #88]	@ (80012e8 <MX_GPIO_Init+0xc0>)
 800128e:	f002 f86b 	bl	8003368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001292:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001296:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001298:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800129c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80012a2:	f107 030c 	add.w	r3, r7, #12
 80012a6:	4619      	mov	r1, r3
 80012a8:	4810      	ldr	r0, [pc, #64]	@ (80012ec <MX_GPIO_Init+0xc4>)
 80012aa:	f001 feb3 	bl	8003014 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_PIN_Pin LCD_RST_PIN_Pin LCD_DC_PIN_Pin */
  GPIO_InitStruct.Pin = LCD_CS_PIN_Pin|LCD_RST_PIN_Pin|LCD_DC_PIN_Pin;
 80012ae:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80012b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	4619      	mov	r1, r3
 80012c6:	4808      	ldr	r0, [pc, #32]	@ (80012e8 <MX_GPIO_Init+0xc0>)
 80012c8:	f001 fea4 	bl	8003014 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2100      	movs	r1, #0
 80012d0:	2028      	movs	r0, #40	@ 0x28
 80012d2:	f001 f9ee 	bl	80026b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012d6:	2028      	movs	r0, #40	@ 0x28
 80012d8:	f001 fa07 	bl	80026ea <HAL_NVIC_EnableIRQ>

}
 80012dc:	bf00      	nop
 80012de:	3720      	adds	r7, #32
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40021000 	.word	0x40021000
 80012e8:	48000400 	.word	0x48000400
 80012ec:	48000800 	.word	0x48000800

080012f0 <Flash_Write>:
#include "stm32l4xx_hal.h"
#include "stm32l4xx_hal_flash.h"
#include "stm32l4xx_hal_flash_ex.h"
#include "high_scores.h"

void Flash_Write(uint64_t* data, uint32_t length) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08c      	sub	sp, #48	@ 0x30
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
    HAL_FLASH_Unlock();
 80012fa:	f001 fc63 	bl	8002bc4 <HAL_FLASH_Unlock>

    // Erase the sector
    FLASH_EraseInitTypeDef eraseInitStruct;
    uint32_t sectorError = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]

    eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
    eraseInitStruct.Banks = FLASH_BANK_2;  // Adjust for your target sector
 8001306:	2302      	movs	r3, #2
 8001308:	617b      	str	r3, [r7, #20]
    eraseInitStruct.Page = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	61bb      	str	r3, [r7, #24]
    eraseInitStruct.NbPages = 2;
 800130e:	2302      	movs	r3, #2
 8001310:	61fb      	str	r3, [r7, #28]

    if (HAL_FLASHEx_Erase(&eraseInitStruct, &sectorError) != HAL_OK) {
 8001312:	f107 020c 	add.w	r2, r7, #12
 8001316:	f107 0310 	add.w	r3, r7, #16
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f001 fd35 	bl	8002d8c <HAL_FLASHEx_Erase>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d007      	beq.n	8001338 <Flash_Write+0x48>
        printf("Erase failed! Sector Error: %lu\n", sectorError);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4619      	mov	r1, r3
 800132c:	4818      	ldr	r0, [pc, #96]	@ (8001390 <Flash_Write+0xa0>)
 800132e:	f005 fa47 	bl	80067c0 <iprintf>
        HAL_FLASH_Lock();
 8001332:	f001 fc69 	bl	8002c08 <HAL_FLASH_Lock>
        return;
 8001336:	e028      	b.n	800138a <Flash_Write+0x9a>
    }

    // Write data
    for (uint32_t i = 0; i < length; i++) {
 8001338:	2300      	movs	r3, #0
 800133a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800133c:	e01f      	b.n	800137e <Flash_Write+0x8e>
        uint64_t data_to_write = data[i];
 800133e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	4413      	add	r3, r2
 8001346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FLASH_USER_START_ADDR + (i * 8), data_to_write) != HAL_OK) {
 800134e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001350:	f103 7380 	add.w	r3, r3, #16777216	@ 0x1000000
 8001354:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001358:	00d9      	lsls	r1, r3, #3
 800135a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800135e:	2000      	movs	r0, #0
 8001360:	f001 fbc4 	bl	8002aec <HAL_FLASH_Program>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d006      	beq.n	8001378 <Flash_Write+0x88>
            printf("Write failed at index %d\n", i);
 800136a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800136c:	4809      	ldr	r0, [pc, #36]	@ (8001394 <Flash_Write+0xa4>)
 800136e:	f005 fa27 	bl	80067c0 <iprintf>
            HAL_FLASH_Lock();
 8001372:	f001 fc49 	bl	8002c08 <HAL_FLASH_Lock>
            return;
 8001376:	e008      	b.n	800138a <Flash_Write+0x9a>
    for (uint32_t i = 0; i < length; i++) {
 8001378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800137a:	3301      	adds	r3, #1
 800137c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800137e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	429a      	cmp	r2, r3
 8001384:	d3db      	bcc.n	800133e <Flash_Write+0x4e>
        }
    }

    HAL_FLASH_Lock();
 8001386:	f001 fc3f 	bl	8002c08 <HAL_FLASH_Lock>
}
 800138a:	3730      	adds	r7, #48	@ 0x30
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	08007868 	.word	0x08007868
 8001394:	0800788c 	.word	0x0800788c

08001398 <Flash_Read>:

void Flash_Read(uint64_t* buffer, uint32_t length) {
 8001398:	b480      	push	{r7}
 800139a:	b087      	sub	sp, #28
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < length; i++) {
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	e014      	b.n	80013d2 <Flash_Read+0x3a>
        uint64_t data = *(__IO uint64_t *)(FLASH_USER_START_ADDR + (i * 8));
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	f103 7380 	add.w	r3, r3, #16777216	@ 0x1000000
 80013ae:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b8:	e9c7 2302 	strd	r2, r3, [r7, #8]
        buffer[i] = data;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	18d1      	adds	r1, r2, r3
 80013c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013c8:	e9c1 2300 	strd	r2, r3, [r1]
    for (uint32_t i = 0; i < length; i++) {
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	3301      	adds	r3, #1
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	697a      	ldr	r2, [r7, #20]
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d3e6      	bcc.n	80013a8 <Flash_Read+0x10>
    }
}
 80013da:	bf00      	nop
 80013dc:	bf00      	nop
 80013de:	371c      	adds	r7, #28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <Flash_WriteArray>:

HAL_StatusTypeDef Flash_WriteArray(uint32_t address, uint64_t *data, uint32_t length)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
	Flash_Write(data, length);
 80013f4:	6879      	ldr	r1, [r7, #4]
 80013f6:	68b8      	ldr	r0, [r7, #8]
 80013f8:	f7ff ff7a 	bl	80012f0 <Flash_Write>
    return HAL_OK; // Return success if all bytes were written successfully
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <Flash_ReadArray>:


void Flash_ReadArray(uint32_t address, uint64_t *data, uint32_t length)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b084      	sub	sp, #16
 800140a:	af00      	add	r7, sp, #0
 800140c:	60f8      	str	r0, [r7, #12]
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
	Flash_Read(data, length);
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	68b8      	ldr	r0, [r7, #8]
 8001416:	f7ff ffbf 	bl	8001398 <Flash_Read>
}
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <scores_handle_input>:


int scores_handle_input()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
	uint8_t pressed_button;
	if (HAL_UART_Receive(&huart2, &pressed_button, 1, 5) == HAL_OK)
 800142a:	1df9      	adds	r1, r7, #7
 800142c:	2305      	movs	r3, #5
 800142e:	2201      	movs	r2, #1
 8001430:	480a      	ldr	r0, [pc, #40]	@ (800145c <scores_handle_input+0x38>)
 8001432:	f003 fec1 	bl	80051b8 <HAL_UART_Receive>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d109      	bne.n	8001450 <scores_handle_input+0x2c>
	{
        if (pressed_button == 'z')
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	2b7a      	cmp	r3, #122	@ 0x7a
 8001440:	d104      	bne.n	800144c <scores_handle_input+0x28>
        {
    		ST7735_FillScreen(ST7735_CASET);
 8001442:	202a      	movs	r0, #42	@ 0x2a
 8001444:	f000 fd64 	bl	8001f10 <ST7735_FillScreen>

			// Go do menu
    		return 1;
 8001448:	2301      	movs	r3, #1
 800144a:	e002      	b.n	8001452 <scores_handle_input+0x2e>
        }

        return 0;  // Successfully handled input
 800144c:	2300      	movs	r3, #0
 800144e:	e000      	b.n	8001452 <scores_handle_input+0x2e>
	}
	return 0;
 8001450:	2300      	movs	r3, #0

}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000160 	.word	0x20000160

08001460 <scores_draw>:

void scores_draw()
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b0b0      	sub	sp, #192	@ 0xc0
 8001464:	af00      	add	r7, sp, #0
	uint64_t scores[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 8001466:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800146a:	2250      	movs	r2, #80	@ 0x50
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f005 fa1b 	bl	80068aa <memset>

    Flash_ReadArray(FLASH_USER_START_ADDR, scores, 10);
 8001474:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001478:	220a      	movs	r2, #10
 800147a:	4619      	mov	r1, r3
 800147c:	4819      	ldr	r0, [pc, #100]	@ (80014e4 <scores_draw+0x84>)
 800147e:	f7ff ffc2 	bl	8001406 <Flash_ReadArray>

    for (int i = 0; i < 10; i++)
 8001482:	2300      	movs	r3, #0
 8001484:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001488:	e022      	b.n	80014d0 <scores_draw+0x70>
    {
    	uint32_t score = scores[i];
 800148a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	33c0      	adds	r3, #192	@ 0xc0
 8001492:	443b      	add	r3, r7
 8001494:	3b58      	subs	r3, #88	@ 0x58
 8001496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149a:	4613      	mov	r3, r2
 800149c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    	char buffer[100];
        sprintf(buffer, "%d. %lu", i, score);
 80014a0:	1d38      	adds	r0, r7, #4
 80014a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80014a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80014aa:	490f      	ldr	r1, [pc, #60]	@ (80014e8 <scores_draw+0x88>)
 80014ac:	f005 f99a 	bl	80067e4 <siprintf>

    	ST7735_DrawString(5, 3 + i, buffer, ST7735_WHITE);
 80014b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	3303      	adds	r3, #3
 80014b8:	b299      	uxth	r1, r3
 80014ba:	1d3a      	adds	r2, r7, #4
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295
 80014c0:	2005      	movs	r0, #5
 80014c2:	f000 fba1 	bl	8001c08 <ST7735_DrawString>
    for (int i = 0; i < 10; i++)
 80014c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80014ca:	3301      	adds	r3, #1
 80014cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80014d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80014d4:	2b09      	cmp	r3, #9
 80014d6:	ddd8      	ble.n	800148a <scores_draw+0x2a>

    }
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	37c0      	adds	r7, #192	@ 0xc0
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	08080000 	.word	0x08080000
 80014e8:	080078a8 	.word	0x080078a8

080014ec <high_scores>:

int high_scores()
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
	ST7735_FillScreen(ST7735_CASET);
 80014f2:	202a      	movs	r0, #42	@ 0x2a
 80014f4:	f000 fd0c 	bl	8001f10 <ST7735_FillScreen>

	scores_draw();
 80014f8:	f7ff ffb2 	bl	8001460 <scores_draw>

	while (1)
	{
		int status = scores_handle_input();
 80014fc:	f7ff ff92 	bl	8001424 <scores_handle_input>
 8001500:	6078      	str	r0, [r7, #4]
		if (status != 0)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0f9      	beq.n	80014fc <high_scores+0x10>
		{
			return 0;
 8001508:	2300      	movs	r3, #0
		}
	}
	return 0;
}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001518:	f000 ff50 	bl	80023bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800151c:	f000 f821 	bl	8001562 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001520:	f7ff fe82 	bl	8001228 <MX_GPIO_Init>
  MX_DMA_Init();
 8001524:	f7ff f81c 	bl	8000560 <MX_DMA_Init>
  MX_SPI1_Init();
 8001528:	f000 f908 	bl	800173c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800152c:	f000 fe88 	bl	8002240 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  ST7735_Init();
 8001530:	f000 f9ea 	bl	8001908 <ST7735_Init>
  // RESET SCORES
//  uint64_t writeData[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
//  Flash_WriteArray(FLASH_USER_START_ADDR, writeData, 10);
  // END RESET SCORES

  int status = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	607b      	str	r3, [r7, #4]
  while(1)
  {
	  if (status == 0)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d103      	bne.n	8001546 <main+0x34>
	  {
		  status = menu();
 800153e:	f000 f8e1 	bl	8001704 <menu>
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	e7f8      	b.n	8001538 <main+0x26>
	  }
	  else if (status == 1)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d103      	bne.n	8001554 <main+0x42>
	  {
		  status = game();
 800154c:	f7ff fd78 	bl	8001040 <game>
 8001550:	6078      	str	r0, [r7, #4]
 8001552:	e7f1      	b.n	8001538 <main+0x26>
	  }
	  else if (status == 2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d1ee      	bne.n	8001538 <main+0x26>
	  {
		  status = high_scores();
 800155a:	f7ff ffc7 	bl	80014ec <high_scores>
 800155e:	6078      	str	r0, [r7, #4]
	  if (status == 0)
 8001560:	e7ea      	b.n	8001538 <main+0x26>

08001562 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b096      	sub	sp, #88	@ 0x58
 8001566:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	2244      	movs	r2, #68	@ 0x44
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f005 f99a 	bl	80068aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001576:	463b      	mov	r3, r7
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001584:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001588:	f001 ff38 	bl	80033fc <HAL_PWREx_ControlVoltageScaling>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001592:	f000 f837 	bl	8001604 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001596:	2302      	movs	r3, #2
 8001598:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800159a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800159e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015a0:	2310      	movs	r3, #16
 80015a2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a4:	2302      	movs	r3, #2
 80015a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015a8:	2302      	movs	r3, #2
 80015aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015ac:	2301      	movs	r3, #1
 80015ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80015b0:	230a      	movs	r3, #10
 80015b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015b4:	2307      	movs	r3, #7
 80015b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015b8:	2302      	movs	r3, #2
 80015ba:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015bc:	2302      	movs	r3, #2
 80015be:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4618      	mov	r0, r3
 80015c6:	f001 ff6f 	bl	80034a8 <HAL_RCC_OscConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80015d0:	f000 f818 	bl	8001604 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d4:	230f      	movs	r3, #15
 80015d6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d8:	2303      	movs	r3, #3
 80015da:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015e4:	2300      	movs	r3, #0
 80015e6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015e8:	463b      	mov	r3, r7
 80015ea:	2104      	movs	r1, #4
 80015ec:	4618      	mov	r0, r3
 80015ee:	f002 fb37 	bl	8003c60 <HAL_RCC_ClockConfig>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015f8:	f000 f804 	bl	8001604 <Error_Handler>
  }
}
 80015fc:	bf00      	nop
 80015fe:	3758      	adds	r7, #88	@ 0x58
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001608:	b672      	cpsid	i
}
 800160a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <Error_Handler+0x8>

08001610 <menu_handle_input>:
#include "stdlib.h"
#include "usart.h"


int menu_handle_input(int* status)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	uint8_t pressed_button;
	if (HAL_UART_Receive(&huart2, &pressed_button, 1, 5) == HAL_OK)
 8001618:	f107 010f 	add.w	r1, r7, #15
 800161c:	2305      	movs	r3, #5
 800161e:	2201      	movs	r2, #1
 8001620:	481d      	ldr	r0, [pc, #116]	@ (8001698 <menu_handle_input+0x88>)
 8001622:	f003 fdc9 	bl	80051b8 <HAL_UART_Receive>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d12f      	bne.n	800168c <menu_handle_input+0x7c>
	{
        if (pressed_button == 's')
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	2b73      	cmp	r3, #115	@ 0x73
 8001630:	d10e      	bne.n	8001650 <menu_handle_input+0x40>
        {
    		ST7735_FillScreen(ST7735_CASET);
 8001632:	202a      	movs	r0, #42	@ 0x2a
 8001634:	f000 fc6c 	bl	8001f10 <ST7735_FillScreen>
            *status = (*status + 1) % 2;  // Correctly update the value pointed to by 'status'
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	3301      	adds	r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	bfb8      	it	lt
 8001646:	425b      	neglt	r3, r3
 8001648:	461a      	mov	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	e01b      	b.n	8001688 <menu_handle_input+0x78>
        }
        else if (pressed_button == 'w')
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	2b77      	cmp	r3, #119	@ 0x77
 8001654:	d10e      	bne.n	8001674 <menu_handle_input+0x64>
        {
    		ST7735_FillScreen(ST7735_CASET);
 8001656:	202a      	movs	r0, #42	@ 0x2a
 8001658:	f000 fc5a 	bl	8001f10 <ST7735_FillScreen>
            *status = (*status - 1 + 2) % 2;  // Ensure wrapping around with proper precedence
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	3301      	adds	r3, #1
 8001662:	2b00      	cmp	r3, #0
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	bfb8      	it	lt
 800166a:	425b      	neglt	r3, r3
 800166c:	461a      	mov	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	e009      	b.n	8001688 <menu_handle_input+0x78>
        }
        else if (pressed_button == 'z')
 8001674:	7bfb      	ldrb	r3, [r7, #15]
 8001676:	2b7a      	cmp	r3, #122	@ 0x7a
 8001678:	d106      	bne.n	8001688 <menu_handle_input+0x78>
        {
    		ST7735_FillScreen(ST7735_CASET);
 800167a:	202a      	movs	r0, #42	@ 0x2a
 800167c:	f000 fc48 	bl	8001f10 <ST7735_FillScreen>

			// 0 is game 1 is highscores
        	// but it should be 1 and 2
            return *status + 1;  // Return the current status
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	3301      	adds	r3, #1
 8001686:	e002      	b.n	800168e <menu_handle_input+0x7e>
        }

        return 0;  // Successfully handled input
 8001688:	2300      	movs	r3, #0
 800168a:	e000      	b.n	800168e <menu_handle_input+0x7e>
	}
	return 0;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000160 	.word	0x20000160

0800169c <menu_draw>:

void menu_draw(int option)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	if (option == 0)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d10e      	bne.n	80016c8 <menu_draw+0x2c>
	{
		ST7735_DrawString(5, 5, "> Game", ST7735_GREEN);
 80016aa:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80016ae:	4a11      	ldr	r2, [pc, #68]	@ (80016f4 <menu_draw+0x58>)
 80016b0:	2105      	movs	r1, #5
 80016b2:	2005      	movs	r0, #5
 80016b4:	f000 faa8 	bl	8001c08 <ST7735_DrawString>
		ST7735_DrawString(5, 6, "Highscores", ST7735_WHITE);
 80016b8:	f04f 33ff 	mov.w	r3, #4294967295
 80016bc:	4a0e      	ldr	r2, [pc, #56]	@ (80016f8 <menu_draw+0x5c>)
 80016be:	2106      	movs	r1, #6
 80016c0:	2005      	movs	r0, #5
 80016c2:	f000 faa1 	bl	8001c08 <ST7735_DrawString>
	{
		ST7735_DrawString(5, 5, "Game", ST7735_WHITE);
		ST7735_DrawString(5, 6, "> Highscores", ST7735_GREEN);

	}
}
 80016c6:	e010      	b.n	80016ea <menu_draw+0x4e>
	else if (option == 1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d10d      	bne.n	80016ea <menu_draw+0x4e>
		ST7735_DrawString(5, 5, "Game", ST7735_WHITE);
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
 80016d2:	4a0a      	ldr	r2, [pc, #40]	@ (80016fc <menu_draw+0x60>)
 80016d4:	2105      	movs	r1, #5
 80016d6:	2005      	movs	r0, #5
 80016d8:	f000 fa96 	bl	8001c08 <ST7735_DrawString>
		ST7735_DrawString(5, 6, "> Highscores", ST7735_GREEN);
 80016dc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80016e0:	4a07      	ldr	r2, [pc, #28]	@ (8001700 <menu_draw+0x64>)
 80016e2:	2106      	movs	r1, #6
 80016e4:	2005      	movs	r0, #5
 80016e6:	f000 fa8f 	bl	8001c08 <ST7735_DrawString>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	080078b0 	.word	0x080078b0
 80016f8:	080078b8 	.word	0x080078b8
 80016fc:	080078c4 	.word	0x080078c4
 8001700:	080078cc 	.word	0x080078cc

08001704 <menu>:

int menu()
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
	int option = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	603b      	str	r3, [r7, #0]
	ST7735_FillScreen(ST7735_CASET);
 800170e:	202a      	movs	r0, #42	@ 0x2a
 8001710:	f000 fbfe 	bl	8001f10 <ST7735_FillScreen>


	while(1)
	{
		int status = menu_handle_input(&option);
 8001714:	463b      	mov	r3, r7
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff ff7a 	bl	8001610 <menu_handle_input>
 800171c:	6078      	str	r0, [r7, #4]
		if (status != 0)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <menu+0x24>
		{
			return status;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	e004      	b.n	8001732 <menu+0x2e>
		}

		menu_draw(option);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff ffb6 	bl	800169c <menu_draw>
	{
 8001730:	e7f0      	b.n	8001714 <menu+0x10>
	}

}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001740:	4b1b      	ldr	r3, [pc, #108]	@ (80017b0 <MX_SPI1_Init+0x74>)
 8001742:	4a1c      	ldr	r2, [pc, #112]	@ (80017b4 <MX_SPI1_Init+0x78>)
 8001744:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001746:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <MX_SPI1_Init+0x74>)
 8001748:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800174c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800174e:	4b18      	ldr	r3, [pc, #96]	@ (80017b0 <MX_SPI1_Init+0x74>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001754:	4b16      	ldr	r3, [pc, #88]	@ (80017b0 <MX_SPI1_Init+0x74>)
 8001756:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800175a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800175c:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <MX_SPI1_Init+0x74>)
 800175e:	2200      	movs	r2, #0
 8001760:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001762:	4b13      	ldr	r3, [pc, #76]	@ (80017b0 <MX_SPI1_Init+0x74>)
 8001764:	2200      	movs	r2, #0
 8001766:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001768:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <MX_SPI1_Init+0x74>)
 800176a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800176e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001770:	4b0f      	ldr	r3, [pc, #60]	@ (80017b0 <MX_SPI1_Init+0x74>)
 8001772:	2210      	movs	r2, #16
 8001774:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001776:	4b0e      	ldr	r3, [pc, #56]	@ (80017b0 <MX_SPI1_Init+0x74>)
 8001778:	2200      	movs	r2, #0
 800177a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800177c:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <MX_SPI1_Init+0x74>)
 800177e:	2200      	movs	r2, #0
 8001780:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001782:	4b0b      	ldr	r3, [pc, #44]	@ (80017b0 <MX_SPI1_Init+0x74>)
 8001784:	2200      	movs	r2, #0
 8001786:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001788:	4b09      	ldr	r3, [pc, #36]	@ (80017b0 <MX_SPI1_Init+0x74>)
 800178a:	2207      	movs	r2, #7
 800178c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800178e:	4b08      	ldr	r3, [pc, #32]	@ (80017b0 <MX_SPI1_Init+0x74>)
 8001790:	2200      	movs	r2, #0
 8001792:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001794:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <MX_SPI1_Init+0x74>)
 8001796:	2208      	movs	r2, #8
 8001798:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800179a:	4805      	ldr	r0, [pc, #20]	@ (80017b0 <MX_SPI1_Init+0x74>)
 800179c:	f003 f940 	bl	8004a20 <HAL_SPI_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80017a6:	f7ff ff2d 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200000b0 	.word	0x200000b0
 80017b4:	40013000 	.word	0x40013000

080017b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	@ 0x28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a2c      	ldr	r2, [pc, #176]	@ (8001888 <HAL_SPI_MspInit+0xd0>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d151      	bne.n	800187e <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017da:	4b2c      	ldr	r3, [pc, #176]	@ (800188c <HAL_SPI_MspInit+0xd4>)
 80017dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017de:	4a2b      	ldr	r2, [pc, #172]	@ (800188c <HAL_SPI_MspInit+0xd4>)
 80017e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80017e6:	4b29      	ldr	r3, [pc, #164]	@ (800188c <HAL_SPI_MspInit+0xd4>)
 80017e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	4b26      	ldr	r3, [pc, #152]	@ (800188c <HAL_SPI_MspInit+0xd4>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f6:	4a25      	ldr	r2, [pc, #148]	@ (800188c <HAL_SPI_MspInit+0xd4>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017fe:	4b23      	ldr	r3, [pc, #140]	@ (800188c <HAL_SPI_MspInit+0xd4>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800180a:	23e0      	movs	r3, #224	@ 0xe0
 800180c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180e:	2302      	movs	r3, #2
 8001810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001816:	2303      	movs	r3, #3
 8001818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800181a:	2305      	movs	r3, #5
 800181c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	4619      	mov	r1, r3
 8001824:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001828:	f001 fbf4 	bl	8003014 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 800182c:	4b18      	ldr	r3, [pc, #96]	@ (8001890 <HAL_SPI_MspInit+0xd8>)
 800182e:	4a19      	ldr	r2, [pc, #100]	@ (8001894 <HAL_SPI_MspInit+0xdc>)
 8001830:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8001832:	4b17      	ldr	r3, [pc, #92]	@ (8001890 <HAL_SPI_MspInit+0xd8>)
 8001834:	2201      	movs	r2, #1
 8001836:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001838:	4b15      	ldr	r3, [pc, #84]	@ (8001890 <HAL_SPI_MspInit+0xd8>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800183e:	4b14      	ldr	r3, [pc, #80]	@ (8001890 <HAL_SPI_MspInit+0xd8>)
 8001840:	2200      	movs	r2, #0
 8001842:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001844:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <HAL_SPI_MspInit+0xd8>)
 8001846:	2280      	movs	r2, #128	@ 0x80
 8001848:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800184a:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <HAL_SPI_MspInit+0xd8>)
 800184c:	2200      	movs	r2, #0
 800184e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001850:	4b0f      	ldr	r3, [pc, #60]	@ (8001890 <HAL_SPI_MspInit+0xd8>)
 8001852:	2200      	movs	r2, #0
 8001854:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001856:	4b0e      	ldr	r3, [pc, #56]	@ (8001890 <HAL_SPI_MspInit+0xd8>)
 8001858:	2200      	movs	r2, #0
 800185a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800185c:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <HAL_SPI_MspInit+0xd8>)
 800185e:	2200      	movs	r2, #0
 8001860:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001862:	480b      	ldr	r0, [pc, #44]	@ (8001890 <HAL_SPI_MspInit+0xd8>)
 8001864:	f000 ff5c 	bl	8002720 <HAL_DMA_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 800186e:	f7ff fec9 	bl	8001604 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a06      	ldr	r2, [pc, #24]	@ (8001890 <HAL_SPI_MspInit+0xd8>)
 8001876:	659a      	str	r2, [r3, #88]	@ 0x58
 8001878:	4a05      	ldr	r2, [pc, #20]	@ (8001890 <HAL_SPI_MspInit+0xd8>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800187e:	bf00      	nop
 8001880:	3728      	adds	r7, #40	@ 0x28
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40013000 	.word	0x40013000
 800188c:	40021000 	.word	0x40021000
 8001890:	20000114 	.word	0x20000114
 8001894:	4002001c 	.word	0x4002001c

08001898 <ST7735_SetAddressWindow>:
int32_t Ymax,Ymin,X;        // X goes from 0 to 127
int32_t Yrange; //YrangeDiv2;
int TimeIndex;
uint16_t PlotBGColor;
 
static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8001898:	b590      	push	{r4, r7, lr}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4604      	mov	r4, r0
 80018a0:	4608      	mov	r0, r1
 80018a2:	4611      	mov	r1, r2
 80018a4:	461a      	mov	r2, r3
 80018a6:	4623      	mov	r3, r4
 80018a8:	71fb      	strb	r3, [r7, #7]
 80018aa:	4603      	mov	r3, r0
 80018ac:	71bb      	strb	r3, [r7, #6]
 80018ae:	460b      	mov	r3, r1
 80018b0:	717b      	strb	r3, [r7, #5]
 80018b2:	4613      	mov	r3, r2
 80018b4:	713b      	strb	r3, [r7, #4]
    lcd7735_sendCmd(ST7735_CASET); // Column addr set
 80018b6:	202a      	movs	r0, #42	@ 0x2a
 80018b8:	f000 fb3c 	bl	8001f34 <lcd7735_sendCmd>
		lcd7735_sendData(0x00);            // XS15 ~ XS8
 80018bc:	2000      	movs	r0, #0
 80018be:	f000 fb4f 	bl	8001f60 <lcd7735_sendData>
		lcd7735_sendData(x0+ST7735_XSTART);     // XSTART       XS7 ~ XS0
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f000 fb4b 	bl	8001f60 <lcd7735_sendData>
		lcd7735_sendData(0x00);            // XE15 ~ XE8
 80018ca:	2000      	movs	r0, #0
 80018cc:	f000 fb48 	bl	8001f60 <lcd7735_sendData>
		lcd7735_sendData(x1+ST7735_XSTART);     // XEND         XE7 ~ XE0
 80018d0:	797b      	ldrb	r3, [r7, #5]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f000 fb44 	bl	8001f60 <lcd7735_sendData>
 
		lcd7735_sendCmd(ST7735_RASET); // Row addr set
 80018d8:	202b      	movs	r0, #43	@ 0x2b
 80018da:	f000 fb2b 	bl	8001f34 <lcd7735_sendCmd>
		lcd7735_sendData(0x00);
 80018de:	2000      	movs	r0, #0
 80018e0:	f000 fb3e 	bl	8001f60 <lcd7735_sendData>
		lcd7735_sendData(y0+ST7735_YSTART);     // YSTART
 80018e4:	79bb      	ldrb	r3, [r7, #6]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 fb3a 	bl	8001f60 <lcd7735_sendData>
		lcd7735_sendData(0x00);
 80018ec:	2000      	movs	r0, #0
 80018ee:	f000 fb37 	bl	8001f60 <lcd7735_sendData>
		lcd7735_sendData(y1+ST7735_YSTART);     // YEND
 80018f2:	793b      	ldrb	r3, [r7, #4]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 fb33 	bl	8001f60 <lcd7735_sendData>
	
		lcd7735_sendCmd(ST7735_RAMWR); 
 80018fa:	202c      	movs	r0, #44	@ 0x2c
 80018fc:	f000 fb1a 	bl	8001f34 <lcd7735_sendCmd>
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	bd90      	pop	{r4, r7, pc}

08001908 <ST7735_Init>:
void ST7735_Init() {
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
    //ST7735_Select();
	  LCD_CS0;
 800190c:	2200      	movs	r2, #0
 800190e:	2140      	movs	r1, #64	@ 0x40
 8001910:	480e      	ldr	r0, [pc, #56]	@ (800194c <ST7735_Init+0x44>)
 8001912:	f001 fd29 	bl	8003368 <HAL_GPIO_WritePin>
    //ST7735_Reset();
	  LCD_RST0;
 8001916:	2200      	movs	r2, #0
 8001918:	2180      	movs	r1, #128	@ 0x80
 800191a:	480c      	ldr	r0, [pc, #48]	@ (800194c <ST7735_Init+0x44>)
 800191c:	f001 fd24 	bl	8003368 <HAL_GPIO_WritePin>
		HAL_Delay(7);
 8001920:	2007      	movs	r0, #7
 8001922:	f000 fdc7 	bl	80024b4 <HAL_Delay>
		LCD_RST1;
 8001926:	2201      	movs	r2, #1
 8001928:	2180      	movs	r1, #128	@ 0x80
 800192a:	4808      	ldr	r0, [pc, #32]	@ (800194c <ST7735_Init+0x44>)
 800192c:	f001 fd1c 	bl	8003368 <HAL_GPIO_WritePin>
	
    //ST7735_ExecuteCommandList(init_cmds1);
		ST7735_Init_Command1();
 8001930:	f000 f80e 	bl	8001950 <ST7735_Init_Command1>
    //ST7735_ExecuteCommandList(init_cmds2);
		ST7735_Init_Command2();
 8001934:	f000 f892 	bl	8001a5c <ST7735_Init_Command2>
    //ST7735_ExecuteCommandList(init_cmds3);
		ST7735_Init_Command3();
 8001938:	f000 f8b2 	bl	8001aa0 <ST7735_Init_Command3>
	
    //ST7735_Unselect();
		LCD_CS1;		
 800193c:	2201      	movs	r2, #1
 800193e:	2140      	movs	r1, #64	@ 0x40
 8001940:	4802      	ldr	r0, [pc, #8]	@ (800194c <ST7735_Init+0x44>)
 8001942:	f001 fd11 	bl	8003368 <HAL_GPIO_WritePin>
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	48000400 	.word	0x48000400

08001950 <ST7735_Init_Command1>:
 
void ST7735_Init_Command1(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
	lcd7735_sendCmd(ST7735_SWRESET);		//  1: Software reset
 8001954:	2001      	movs	r0, #1
 8001956:	f000 faed 	bl	8001f34 <lcd7735_sendCmd>
	HAL_Delay(150);
 800195a:	2096      	movs	r0, #150	@ 0x96
 800195c:	f000 fdaa 	bl	80024b4 <HAL_Delay>
	lcd7735_sendCmd(ST7735_SLPOUT);			//  2: Out of sleep mode
 8001960:	2011      	movs	r0, #17
 8001962:	f000 fae7 	bl	8001f34 <lcd7735_sendCmd>
	HAL_Delay(500);
 8001966:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800196a:	f000 fda3 	bl	80024b4 <HAL_Delay>
	lcd7735_sendCmd(ST7735_FRMCTR1);		//  3: Frame rate ctrl - normal mode
 800196e:	20b1      	movs	r0, #177	@ 0xb1
 8001970:	f000 fae0 	bl	8001f34 <lcd7735_sendCmd>
	lcd7735_sendData(0x01);							//     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 8001974:	2001      	movs	r0, #1
 8001976:	f000 faf3 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 800197a:	202c      	movs	r0, #44	@ 0x2c
 800197c:	f000 faf0 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8001980:	202d      	movs	r0, #45	@ 0x2d
 8001982:	f000 faed 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_FRMCTR2);		//  4: Frame rate control - idle mode
 8001986:	20b2      	movs	r0, #178	@ 0xb2
 8001988:	f000 fad4 	bl	8001f34 <lcd7735_sendCmd>
	lcd7735_sendData(0x01);							//  Rate = fosc/(1x2+40) * (LINE+2C+2D)
 800198c:	2001      	movs	r0, #1
 800198e:	f000 fae7 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 8001992:	202c      	movs	r0, #44	@ 0x2c
 8001994:	f000 fae4 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8001998:	202d      	movs	r0, #45	@ 0x2d
 800199a:	f000 fae1 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_FRMCTR3);		//  5: Frame rate ctrl - partial mode
 800199e:	20b3      	movs	r0, #179	@ 0xb3
 80019a0:	f000 fac8 	bl	8001f34 <lcd7735_sendCmd>
	lcd7735_sendData(0x01);							//     Dot inversion mode
 80019a4:	2001      	movs	r0, #1
 80019a6:	f000 fadb 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 80019aa:	202c      	movs	r0, #44	@ 0x2c
 80019ac:	f000 fad8 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 80019b0:	202d      	movs	r0, #45	@ 0x2d
 80019b2:	f000 fad5 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x01);							//     Line inversion mode
 80019b6:	2001      	movs	r0, #1
 80019b8:	f000 fad2 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 80019bc:	202c      	movs	r0, #44	@ 0x2c
 80019be:	f000 facf 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 80019c2:	202d      	movs	r0, #45	@ 0x2d
 80019c4:	f000 facc 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_INVCTR);			//  6: Display inversion ctrl
 80019c8:	20b4      	movs	r0, #180	@ 0xb4
 80019ca:	f000 fab3 	bl	8001f34 <lcd7735_sendCmd>
	lcd7735_sendData(0x07);							//     No inversion
 80019ce:	2007      	movs	r0, #7
 80019d0:	f000 fac6 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR1);			//  7: Power control
 80019d4:	20c0      	movs	r0, #192	@ 0xc0
 80019d6:	f000 faad 	bl	8001f34 <lcd7735_sendCmd>
	lcd7735_sendData(0xA2);
 80019da:	20a2      	movs	r0, #162	@ 0xa2
 80019dc:	f000 fac0 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x02);							//     -4.6V
 80019e0:	2002      	movs	r0, #2
 80019e2:	f000 fabd 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x84);							//     AUTO mode
 80019e6:	2084      	movs	r0, #132	@ 0x84
 80019e8:	f000 faba 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR2);			//  8: Power control
 80019ec:	20c1      	movs	r0, #193	@ 0xc1
 80019ee:	f000 faa1 	bl	8001f34 <lcd7735_sendCmd>
	lcd7735_sendData(0xC5);							//     VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD
 80019f2:	20c5      	movs	r0, #197	@ 0xc5
 80019f4:	f000 fab4 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR3);			//  9: Power control
 80019f8:	20c2      	movs	r0, #194	@ 0xc2
 80019fa:	f000 fa9b 	bl	8001f34 <lcd7735_sendCmd>
	lcd7735_sendData(0x0A);							//     Opamp current small
 80019fe:	200a      	movs	r0, #10
 8001a00:	f000 faae 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x00);							//     Boost frequency
 8001a04:	2000      	movs	r0, #0
 8001a06:	f000 faab 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR4);			// 10: Power control
 8001a0a:	20c3      	movs	r0, #195	@ 0xc3
 8001a0c:	f000 fa92 	bl	8001f34 <lcd7735_sendCmd>
	lcd7735_sendData(0x8A);							//     BCLK/2, Opamp current small & Medium low
 8001a10:	208a      	movs	r0, #138	@ 0x8a
 8001a12:	f000 faa5 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x2A);
 8001a16:	202a      	movs	r0, #42	@ 0x2a
 8001a18:	f000 faa2 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR5);			// 11: Power control
 8001a1c:	20c4      	movs	r0, #196	@ 0xc4
 8001a1e:	f000 fa89 	bl	8001f34 <lcd7735_sendCmd>
	lcd7735_sendData(0x8A);
 8001a22:	208a      	movs	r0, #138	@ 0x8a
 8001a24:	f000 fa9c 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0xEE);
 8001a28:	20ee      	movs	r0, #238	@ 0xee
 8001a2a:	f000 fa99 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_VMCTR1);			// 12: Power control
 8001a2e:	20c5      	movs	r0, #197	@ 0xc5
 8001a30:	f000 fa80 	bl	8001f34 <lcd7735_sendCmd>
	lcd7735_sendData(0x0E);
 8001a34:	200e      	movs	r0, #14
 8001a36:	f000 fa93 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_INVOFF);			// 13: Don't invert display
 8001a3a:	2020      	movs	r0, #32
 8001a3c:	f000 fa7a 	bl	8001f34 <lcd7735_sendCmd>
	lcd7735_sendCmd(ST7735_MADCTL);			// 14: Memory access control (directions)
 8001a40:	2036      	movs	r0, #54	@ 0x36
 8001a42:	f000 fa77 	bl	8001f34 <lcd7735_sendCmd>
	lcd7735_sendData(ST7735_ROTATION);	//     row addr/col addr, bottom to top refresh
 8001a46:	20c0      	movs	r0, #192	@ 0xc0
 8001a48:	f000 fa8a 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_COLMOD);			// 15: set color mode
 8001a4c:	203a      	movs	r0, #58	@ 0x3a
 8001a4e:	f000 fa71 	bl	8001f34 <lcd7735_sendCmd>
	lcd7735_sendData(0x05);							//     16-bit color
 8001a52:	2005      	movs	r0, #5
 8001a54:	f000 fa84 	bl	8001f60 <lcd7735_sendData>
}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <ST7735_Init_Command2>:
 
void ST7735_Init_Command2(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
	lcd7735_sendCmd(ST7735_CASET);			//  1: Column addr set
 8001a60:	202a      	movs	r0, #42	@ 0x2a
 8001a62:	f000 fa67 	bl	8001f34 <lcd7735_sendCmd>
	lcd7735_sendData(0x00);							//     XSTART = 0
 8001a66:	2000      	movs	r0, #0
 8001a68:	f000 fa7a 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	f000 fa77 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x00);							//     XEND = 127
 8001a72:	2000      	movs	r0, #0
 8001a74:	f000 fa74 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x7F);
 8001a78:	207f      	movs	r0, #127	@ 0x7f
 8001a7a:	f000 fa71 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_RASET);			//  2: Row addr set
 8001a7e:	202b      	movs	r0, #43	@ 0x2b
 8001a80:	f000 fa58 	bl	8001f34 <lcd7735_sendCmd>
	lcd7735_sendData(0x00);							//     XSTART = 0
 8001a84:	2000      	movs	r0, #0
 8001a86:	f000 fa6b 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f000 fa68 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x00);							//     XEND = 127
 8001a90:	2000      	movs	r0, #0
 8001a92:	f000 fa65 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x7F);
 8001a96:	207f      	movs	r0, #127	@ 0x7f
 8001a98:	f000 fa62 	bl	8001f60 <lcd7735_sendData>
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <ST7735_Init_Command3>:
 
void ST7735_Init_Command3(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
	lcd7735_sendCmd(ST7735_GMCTRP1);  //  1: Magical unicorn dust
 8001aa4:	20e0      	movs	r0, #224	@ 0xe0
 8001aa6:	f000 fa45 	bl	8001f34 <lcd7735_sendCmd>
	lcd7735_sendData(0x02);
 8001aaa:	2002      	movs	r0, #2
 8001aac:	f000 fa58 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x1C);
 8001ab0:	201c      	movs	r0, #28
 8001ab2:	f000 fa55 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x07);
 8001ab6:	2007      	movs	r0, #7
 8001ab8:	f000 fa52 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x12);
 8001abc:	2012      	movs	r0, #18
 8001abe:	f000 fa4f 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x37);
 8001ac2:	2037      	movs	r0, #55	@ 0x37
 8001ac4:	f000 fa4c 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x32);
 8001ac8:	2032      	movs	r0, #50	@ 0x32
 8001aca:	f000 fa49 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x29);
 8001ace:	2029      	movs	r0, #41	@ 0x29
 8001ad0:	f000 fa46 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8001ad4:	202d      	movs	r0, #45	@ 0x2d
 8001ad6:	f000 fa43 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x29);
 8001ada:	2029      	movs	r0, #41	@ 0x29
 8001adc:	f000 fa40 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x25);
 8001ae0:	2025      	movs	r0, #37	@ 0x25
 8001ae2:	f000 fa3d 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x2B);
 8001ae6:	202b      	movs	r0, #43	@ 0x2b
 8001ae8:	f000 fa3a 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x39);
 8001aec:	2039      	movs	r0, #57	@ 0x39
 8001aee:	f000 fa37 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8001af2:	2000      	movs	r0, #0
 8001af4:	f000 fa34 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x01);
 8001af8:	2001      	movs	r0, #1
 8001afa:	f000 fa31 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x03);
 8001afe:	2003      	movs	r0, #3
 8001b00:	f000 fa2e 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x10);
 8001b04:	2010      	movs	r0, #16
 8001b06:	f000 fa2b 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_GMCTRN1);  //  2: Sparkles and rainbows
 8001b0a:	20e1      	movs	r0, #225	@ 0xe1
 8001b0c:	f000 fa12 	bl	8001f34 <lcd7735_sendCmd>
	lcd7735_sendData(0x03);
 8001b10:	2003      	movs	r0, #3
 8001b12:	f000 fa25 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x1D);
 8001b16:	201d      	movs	r0, #29
 8001b18:	f000 fa22 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x07);
 8001b1c:	2007      	movs	r0, #7
 8001b1e:	f000 fa1f 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x06);
 8001b22:	2006      	movs	r0, #6
 8001b24:	f000 fa1c 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x2E);
 8001b28:	202e      	movs	r0, #46	@ 0x2e
 8001b2a:	f000 fa19 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 8001b2e:	202c      	movs	r0, #44	@ 0x2c
 8001b30:	f000 fa16 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x29);
 8001b34:	2029      	movs	r0, #41	@ 0x29
 8001b36:	f000 fa13 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8001b3a:	202d      	movs	r0, #45	@ 0x2d
 8001b3c:	f000 fa10 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x2E);
 8001b40:	202e      	movs	r0, #46	@ 0x2e
 8001b42:	f000 fa0d 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x2E);
 8001b46:	202e      	movs	r0, #46	@ 0x2e
 8001b48:	f000 fa0a 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x37);
 8001b4c:	2037      	movs	r0, #55	@ 0x37
 8001b4e:	f000 fa07 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x3F);
 8001b52:	203f      	movs	r0, #63	@ 0x3f
 8001b54:	f000 fa04 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f000 fa01 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8001b5e:	2000      	movs	r0, #0
 8001b60:	f000 f9fe 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x02);
 8001b64:	2002      	movs	r0, #2
 8001b66:	f000 f9fb 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendData(0x10);
 8001b6a:	2010      	movs	r0, #16
 8001b6c:	f000 f9f8 	bl	8001f60 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_NORON);
 8001b70:	2013      	movs	r0, #19
 8001b72:	f000 f9df 	bl	8001f34 <lcd7735_sendCmd>
	HAL_Delay(10);
 8001b76:	200a      	movs	r0, #10
 8001b78:	f000 fc9c 	bl	80024b4 <HAL_Delay>
	lcd7735_sendCmd(ST7735_DISPON);
 8001b7c:	2029      	movs	r0, #41	@ 0x29
 8001b7e:	f000 f9d9 	bl	8001f34 <lcd7735_sendCmd>
	HAL_Delay(100);
 8001b82:	2064      	movs	r0, #100	@ 0x64
 8001b84:	f000 fc96 	bl	80024b4 <HAL_Delay>
}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <ST7735_DrawPixel>:
    TimeIndex = 0;
  }
  ST7735_DrawFastVLine(TimeIndex + 11, 17, 100, PlotBGColor);
}

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	80fb      	strh	r3, [r7, #6]
 8001b96:	460b      	mov	r3, r1
 8001b98:	80bb      	strh	r3, [r7, #4]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 8001b9e:	88fb      	ldrh	r3, [r7, #6]
 8001ba0:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ba2:	d82b      	bhi.n	8001bfc <ST7735_DrawPixel+0x70>
 8001ba4:	88bb      	ldrh	r3, [r7, #4]
 8001ba6:	2b9f      	cmp	r3, #159	@ 0x9f
 8001ba8:	d828      	bhi.n	8001bfc <ST7735_DrawPixel+0x70>
        return;
 
    LCD_CS0;
 8001baa:	2200      	movs	r2, #0
 8001bac:	2140      	movs	r1, #64	@ 0x40
 8001bae:	4815      	ldr	r0, [pc, #84]	@ (8001c04 <ST7735_DrawPixel+0x78>)
 8001bb0:	f001 fbda 	bl	8003368 <HAL_GPIO_WritePin>
 
    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8001bb4:	88fb      	ldrh	r3, [r7, #6]
 8001bb6:	b2d8      	uxtb	r0, r3
 8001bb8:	88bb      	ldrh	r3, [r7, #4]
 8001bba:	b2d9      	uxtb	r1, r3
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	88bb      	ldrh	r3, [r7, #4]
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	3301      	adds	r3, #1
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	f7ff fe64 	bl	8001898 <ST7735_SetAddressWindow>
    uint8_t data[2];
		data[0] = color >> 8;
 8001bd0:	887b      	ldrh	r3, [r7, #2]
 8001bd2:	0a1b      	lsrs	r3, r3, #8
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	733b      	strb	r3, [r7, #12]
		data[1] = color & 0xFF;
 8001bda:	887b      	ldrh	r3, [r7, #2]
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	737b      	strb	r3, [r7, #13]
		lcd7735_sendData(data[0]);
 8001be0:	7b3b      	ldrb	r3, [r7, #12]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 f9bc 	bl	8001f60 <lcd7735_sendData>
		lcd7735_sendData(data[1]);
 8001be8:	7b7b      	ldrb	r3, [r7, #13]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 f9b8 	bl	8001f60 <lcd7735_sendData>
 
    LCD_CS1;  //unselect
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	2140      	movs	r1, #64	@ 0x40
 8001bf4:	4803      	ldr	r0, [pc, #12]	@ (8001c04 <ST7735_DrawPixel+0x78>)
 8001bf6:	f001 fbb7 	bl	8003368 <HAL_GPIO_WritePin>
 8001bfa:	e000      	b.n	8001bfe <ST7735_DrawPixel+0x72>
        return;
 8001bfc:	bf00      	nop
}
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	48000400 	.word	0x48000400

08001c08 <ST7735_DrawString>:
uint32_t ST7735_DrawString(uint16_t x, uint16_t y, char *pt, int16_t textColor){
 8001c08:	b590      	push	{r4, r7, lr}
 8001c0a:	b089      	sub	sp, #36	@ 0x24
 8001c0c:	af02      	add	r7, sp, #8
 8001c0e:	60ba      	str	r2, [r7, #8]
 8001c10:	461a      	mov	r2, r3
 8001c12:	4603      	mov	r3, r0
 8001c14:	81fb      	strh	r3, [r7, #14]
 8001c16:	460b      	mov	r3, r1
 8001c18:	81bb      	strh	r3, [r7, #12]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	80fb      	strh	r3, [r7, #6]
  uint32_t count = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
  if(y>15) return 0;
 8001c22:	89bb      	ldrh	r3, [r7, #12]
 8001c24:	2b0f      	cmp	r3, #15
 8001c26:	d927      	bls.n	8001c78 <ST7735_DrawString+0x70>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	e02a      	b.n	8001c82 <ST7735_DrawString+0x7a>
  while(*pt){
    ST7735_DrawCharS(x*6, y*10, *pt, textColor, ST7735_BLACK, 1);
 8001c2c:	89fb      	ldrh	r3, [r7, #14]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	0052      	lsls	r2, r2, #1
 8001c32:	4413      	add	r3, r2
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	b218      	sxth	r0, r3
 8001c3a:	89bb      	ldrh	r3, [r7, #12]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	0092      	lsls	r2, r2, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	b219      	sxth	r1, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	781a      	ldrb	r2, [r3, #0]
 8001c4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c50:	2401      	movs	r4, #1
 8001c52:	9401      	str	r4, [sp, #4]
 8001c54:	2400      	movs	r4, #0
 8001c56:	9400      	str	r4, [sp, #0]
 8001c58:	f000 f818 	bl	8001c8c <ST7735_DrawCharS>
    pt++;
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	60bb      	str	r3, [r7, #8]
    x = x+1;
 8001c62:	89fb      	ldrh	r3, [r7, #14]
 8001c64:	3301      	adds	r3, #1
 8001c66:	81fb      	strh	r3, [r7, #14]
    if(x>20) return count;  // number of characters printed
 8001c68:	89fb      	ldrh	r3, [r7, #14]
 8001c6a:	2b14      	cmp	r3, #20
 8001c6c:	d901      	bls.n	8001c72 <ST7735_DrawString+0x6a>
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	e007      	b.n	8001c82 <ST7735_DrawString+0x7a>
    count++;
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	3301      	adds	r3, #1
 8001c76:	617b      	str	r3, [r7, #20]
  while(*pt){
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1d5      	bne.n	8001c2c <ST7735_DrawString+0x24>
  }
  return count;  // number of characters printed
 8001c80:	697b      	ldr	r3, [r7, #20]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	371c      	adds	r7, #28
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd90      	pop	{r4, r7, pc}
	...

08001c8c <ST7735_DrawCharS>:
void ST7735_DrawCharS(int16_t x, int16_t y, char c, int16_t textColor, int16_t bgColor, uint8_t size){
 8001c8c:	b590      	push	{r4, r7, lr}
 8001c8e:	b089      	sub	sp, #36	@ 0x24
 8001c90:	af02      	add	r7, sp, #8
 8001c92:	4604      	mov	r4, r0
 8001c94:	4608      	mov	r0, r1
 8001c96:	4611      	mov	r1, r2
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4623      	mov	r3, r4
 8001c9c:	80fb      	strh	r3, [r7, #6]
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	80bb      	strh	r3, [r7, #4]
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	70fb      	strb	r3, [r7, #3]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	803b      	strh	r3, [r7, #0]
  uint8_t line; 
  int32_t i, j;
  if((x >= ST7735_WIDTH)            || 
 8001caa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cae:	2b7f      	cmp	r3, #127	@ 0x7f
 8001cb0:	f300 80b3 	bgt.w	8001e1a <ST7735_DrawCharS+0x18e>
 8001cb4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001cb8:	2b9f      	cmp	r3, #159	@ 0x9f
 8001cba:	f300 80ae 	bgt.w	8001e1a <ST7735_DrawCharS+0x18e>
     (y >= ST7735_HEIGHT)           || 
     ((x + 5 * size - 1) < 0) || 
 8001cbe:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001cc2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	440b      	add	r3, r1
     (y >= ST7735_HEIGHT)           || 
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f340 80a3 	ble.w	8001e1a <ST7735_DrawCharS+0x18e>
     ((y + 8 * size - 1) < 0))   
 8001cd4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001cd8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4413      	add	r3, r2
     ((x + 5 * size - 1) < 0) || 
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f340 809a 	ble.w	8001e1a <ST7735_DrawCharS+0x18e>
    return;
 
  for (i=0; i<6; i++ ) {
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	e091      	b.n	8001e10 <ST7735_DrawCharS+0x184>
    if (i == 5)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	2b05      	cmp	r3, #5
 8001cf0:	d102      	bne.n	8001cf8 <ST7735_DrawCharS+0x6c>
      line = 0x0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	75fb      	strb	r3, [r7, #23]
 8001cf6:	e008      	b.n	8001d0a <ST7735_DrawCharS+0x7e>
    else
      line = Font[(c*5)+i];
 8001cf8:	78fa      	ldrb	r2, [r7, #3]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	441a      	add	r2, r3
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	4413      	add	r3, r2
 8001d04:	4a47      	ldr	r2, [pc, #284]	@ (8001e24 <ST7735_DrawCharS+0x198>)
 8001d06:	5cd3      	ldrb	r3, [r2, r3]
 8001d08:	75fb      	strb	r3, [r7, #23]
    for (j = 0; j<8; j++) {
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	e079      	b.n	8001e04 <ST7735_DrawCharS+0x178>
      if (line & 0x1) {
 8001d10:	7dfb      	ldrb	r3, [r7, #23]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d034      	beq.n	8001d84 <ST7735_DrawCharS+0xf8>
        if (size == 1) 
 8001d1a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d10e      	bne.n	8001d40 <ST7735_DrawCharS+0xb4>
          ST7735_DrawPixel(x+i, y+j, textColor);
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	88fb      	ldrh	r3, [r7, #6]
 8001d28:	4413      	add	r3, r2
 8001d2a:	b298      	uxth	r0, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	88bb      	ldrh	r3, [r7, #4]
 8001d32:	4413      	add	r3, r2
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	883a      	ldrh	r2, [r7, #0]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f7ff ff27 	bl	8001b8c <ST7735_DrawPixel>
 8001d3e:	e05b      	b.n	8001df8 <ST7735_DrawCharS+0x16c>
        else {  
          ST7735_FillRectangle(x+(i*size), y+(j*size), size, size, textColor);
 8001d40:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	fb12 f303 	smulbb	r3, r2, r3
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	88fb      	ldrh	r3, [r7, #6]
 8001d52:	4413      	add	r3, r2
 8001d54:	b298      	uxth	r0, r3
 8001d56:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	fb12 f303 	smulbb	r3, r2, r3
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	88bb      	ldrh	r3, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	b299      	uxth	r1, r3
 8001d6c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d76:	b29c      	uxth	r4, r3
 8001d78:	883b      	ldrh	r3, [r7, #0]
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	4623      	mov	r3, r4
 8001d7e:	f000 f853 	bl	8001e28 <ST7735_FillRectangle>
 8001d82:	e039      	b.n	8001df8 <ST7735_DrawCharS+0x16c>
        }
      } else if (bgColor != textColor) {
 8001d84:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 8001d88:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d033      	beq.n	8001df8 <ST7735_DrawCharS+0x16c>
        if (size == 1) // default size
 8001d90:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d10e      	bne.n	8001db6 <ST7735_DrawCharS+0x12a>
          ST7735_DrawPixel(x+i, y+j, bgColor);
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	4413      	add	r3, r2
 8001da0:	b298      	uxth	r0, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	88bb      	ldrh	r3, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001dae:	4619      	mov	r1, r3
 8001db0:	f7ff feec 	bl	8001b8c <ST7735_DrawPixel>
 8001db4:	e020      	b.n	8001df8 <ST7735_DrawCharS+0x16c>
        else {  // big size
         ST7735_FillRectangle(x+i*size, y+j*size, size, size, bgColor);
 8001db6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	fb12 f303 	smulbb	r3, r2, r3
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	88fb      	ldrh	r3, [r7, #6]
 8001dc8:	4413      	add	r3, r2
 8001dca:	b298      	uxth	r0, r3
 8001dcc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	fb12 f303 	smulbb	r3, r2, r3
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	88bb      	ldrh	r3, [r7, #4]
 8001dde:	4413      	add	r3, r2
 8001de0:	b299      	uxth	r1, r3
 8001de2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001dec:	b29c      	uxth	r4, r3
 8001dee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	4623      	mov	r3, r4
 8001df4:	f000 f818 	bl	8001e28 <ST7735_FillRectangle>
        }
      }
      line >>= 1;
 8001df8:	7dfb      	ldrb	r3, [r7, #23]
 8001dfa:	085b      	lsrs	r3, r3, #1
 8001dfc:	75fb      	strb	r3, [r7, #23]
    for (j = 0; j<8; j++) {
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	3301      	adds	r3, #1
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2b07      	cmp	r3, #7
 8001e08:	dd82      	ble.n	8001d10 <ST7735_DrawCharS+0x84>
  for (i=0; i<6; i++ ) {
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	2b05      	cmp	r3, #5
 8001e14:	f77f af6a 	ble.w	8001cec <ST7735_DrawCharS+0x60>
 8001e18:	e000      	b.n	8001e1c <ST7735_DrawCharS+0x190>
    return;
 8001e1a:	bf00      	nop
    }
  }
}
 8001e1c:	371c      	adds	r7, #28
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd90      	pop	{r4, r7, pc}
 8001e22:	bf00      	nop
 8001e24:	080078dc 	.word	0x080078dc

08001e28 <ST7735_FillRectangle>:
    lcd7735_sendData(lo);
  }
	LCD_CS1;
}
	
void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001e28:	b590      	push	{r4, r7, lr}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4604      	mov	r4, r0
 8001e30:	4608      	mov	r0, r1
 8001e32:	4611      	mov	r1, r2
 8001e34:	461a      	mov	r2, r3
 8001e36:	4623      	mov	r3, r4
 8001e38:	80fb      	strh	r3, [r7, #6]
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	80bb      	strh	r3, [r7, #4]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	807b      	strh	r3, [r7, #2]
 8001e42:	4613      	mov	r3, r2
 8001e44:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e4a:	d85a      	bhi.n	8001f02 <ST7735_FillRectangle+0xda>
 8001e4c:	88bb      	ldrh	r3, [r7, #4]
 8001e4e:	2b9f      	cmp	r3, #159	@ 0x9f
 8001e50:	d857      	bhi.n	8001f02 <ST7735_FillRectangle+0xda>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8001e52:	88fa      	ldrh	r2, [r7, #6]
 8001e54:	887b      	ldrh	r3, [r7, #2]
 8001e56:	4413      	add	r3, r2
 8001e58:	2b80      	cmp	r3, #128	@ 0x80
 8001e5a:	dd03      	ble.n	8001e64 <ST7735_FillRectangle+0x3c>
 8001e5c:	88fb      	ldrh	r3, [r7, #6]
 8001e5e:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001e62:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001e64:	88ba      	ldrh	r2, [r7, #4]
 8001e66:	883b      	ldrh	r3, [r7, #0]
 8001e68:	4413      	add	r3, r2
 8001e6a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e6c:	dd03      	ble.n	8001e76 <ST7735_FillRectangle+0x4e>
 8001e6e:	88bb      	ldrh	r3, [r7, #4]
 8001e70:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8001e74:	803b      	strh	r3, [r7, #0]
 
    LCD_CS0;
 8001e76:	2200      	movs	r2, #0
 8001e78:	2140      	movs	r1, #64	@ 0x40
 8001e7a:	4824      	ldr	r0, [pc, #144]	@ (8001f0c <ST7735_FillRectangle+0xe4>)
 8001e7c:	f001 fa74 	bl	8003368 <HAL_GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001e80:	88fb      	ldrh	r3, [r7, #6]
 8001e82:	b2d8      	uxtb	r0, r3
 8001e84:	88bb      	ldrh	r3, [r7, #4]
 8001e86:	b2d9      	uxtb	r1, r3
 8001e88:	88fb      	ldrh	r3, [r7, #6]
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	887b      	ldrh	r3, [r7, #2]
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	4413      	add	r3, r2
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	3b01      	subs	r3, #1
 8001e96:	b2dc      	uxtb	r4, r3
 8001e98:	88bb      	ldrh	r3, [r7, #4]
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	883b      	ldrh	r3, [r7, #0]
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	4622      	mov	r2, r4
 8001eaa:	f7ff fcf5 	bl	8001898 <ST7735_SetAddressWindow>
    LCD_DC1;
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001eb4:	4815      	ldr	r0, [pc, #84]	@ (8001f0c <ST7735_FillRectangle+0xe4>)
 8001eb6:	f001 fa57 	bl	8003368 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001eba:	883b      	ldrh	r3, [r7, #0]
 8001ebc:	80bb      	strh	r3, [r7, #4]
 8001ebe:	e017      	b.n	8001ef0 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {            
 8001ec0:	887b      	ldrh	r3, [r7, #2]
 8001ec2:	80fb      	strh	r3, [r7, #6]
 8001ec4:	e00e      	b.n	8001ee4 <ST7735_FillRectangle+0xbc>
					lcd7735_sendData(color>>8);
 8001ec6:	8b3b      	ldrh	r3, [r7, #24]
 8001ec8:	0a1b      	lsrs	r3, r3, #8
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 f846 	bl	8001f60 <lcd7735_sendData>
					lcd7735_sendData(color);
 8001ed4:	8b3b      	ldrh	r3, [r7, #24]
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 f841 	bl	8001f60 <lcd7735_sendData>
        for(x = w; x > 0; x--) {            
 8001ede:	88fb      	ldrh	r3, [r7, #6]
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	80fb      	strh	r3, [r7, #6]
 8001ee4:	88fb      	ldrh	r3, [r7, #6]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1ed      	bne.n	8001ec6 <ST7735_FillRectangle+0x9e>
    for(y = h; y > 0; y--) {
 8001eea:	88bb      	ldrh	r3, [r7, #4]
 8001eec:	3b01      	subs	r3, #1
 8001eee:	80bb      	strh	r3, [r7, #4]
 8001ef0:	88bb      	ldrh	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1e4      	bne.n	8001ec0 <ST7735_FillRectangle+0x98>
        }
    }
		
		LCD_CS1;  //Unselect
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	2140      	movs	r1, #64	@ 0x40
 8001efa:	4804      	ldr	r0, [pc, #16]	@ (8001f0c <ST7735_FillRectangle+0xe4>)
 8001efc:	f001 fa34 	bl	8003368 <HAL_GPIO_WritePin>
 8001f00:	e000      	b.n	8001f04 <ST7735_FillRectangle+0xdc>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001f02:	bf00      	nop
}
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd90      	pop	{r4, r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	48000400 	.word	0x48000400

08001f10 <ST7735_FillScreen>:
void ST7735_FillScreen(uint16_t color) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af02      	add	r7, sp, #8
 8001f16:	4603      	mov	r3, r0
 8001f18:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8001f1a:	88fb      	ldrh	r3, [r7, #6]
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	23a0      	movs	r3, #160	@ 0xa0
 8001f20:	2280      	movs	r2, #128	@ 0x80
 8001f22:	2100      	movs	r1, #0
 8001f24:	2000      	movs	r0, #0
 8001f26:	f7ff ff7f 	bl	8001e28 <ST7735_FillRectangle>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <lcd7735_sendCmd>:
  //ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
	lcd7735_sendCmd(invert ? ST7735_INVON : ST7735_INVOFF);
  LCD_CS1;  //Unselect
}
 
void lcd7735_sendCmd(uint8_t cmd) {  //uint8_t       //unsigned char
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
   LCD_DC0; //Set DC low
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f44:	4805      	ldr	r0, [pc, #20]	@ (8001f5c <lcd7735_sendCmd+0x28>)
 8001f46:	f001 fa0f 	bl	8003368 <HAL_GPIO_WritePin>
   lcd7735_senddata(cmd);
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f000 f81d 	bl	8001f8c <lcd7735_senddata>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	48000400 	.word	0x48000400

08001f60 <lcd7735_sendData>:
 
 
void lcd7735_sendData(uint8_t data) {  //uint8_t      //unsigned char
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
   LCD_DC1;//Set DC HIGH
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f70:	4805      	ldr	r0, [pc, #20]	@ (8001f88 <lcd7735_sendData+0x28>)
 8001f72:	f001 f9f9 	bl	8003368 <HAL_GPIO_WritePin>
   lcd7735_senddata(data);
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 f807 	bl	8001f8c <lcd7735_senddata>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	48000400 	.word	0x48000400

08001f8c <lcd7735_senddata>:
 
void lcd7735_senddata(uint8_t data) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi1, &data,sizeof(data),0x1);
 8001f96:	1df9      	adds	r1, r7, #7
 8001f98:	2301      	movs	r3, #1
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	4803      	ldr	r0, [pc, #12]	@ (8001fac <lcd7735_senddata+0x20>)
 8001f9e:	f002 fde2 	bl	8004b66 <HAL_SPI_Transmit>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	200000b0 	.word	0x200000b0

08001fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff4 <HAL_MspInit+0x44>)
 8001fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fba:	4a0e      	ldr	r2, [pc, #56]	@ (8001ff4 <HAL_MspInit+0x44>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff4 <HAL_MspInit+0x44>)
 8001fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	4b09      	ldr	r3, [pc, #36]	@ (8001ff4 <HAL_MspInit+0x44>)
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd2:	4a08      	ldr	r2, [pc, #32]	@ (8001ff4 <HAL_MspInit+0x44>)
 8001fd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fda:	4b06      	ldr	r3, [pc, #24]	@ (8001ff4 <HAL_MspInit+0x44>)
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe2:	603b      	str	r3, [r7, #0]
 8001fe4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40021000 	.word	0x40021000

08001ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ffc:	bf00      	nop
 8001ffe:	e7fd      	b.n	8001ffc <NMI_Handler+0x4>

08002000 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002004:	bf00      	nop
 8002006:	e7fd      	b.n	8002004 <HardFault_Handler+0x4>

08002008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800200c:	bf00      	nop
 800200e:	e7fd      	b.n	800200c <MemManage_Handler+0x4>

08002010 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <BusFault_Handler+0x4>

08002018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <UsageFault_Handler+0x4>

08002020 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800204e:	f000 fa11 	bl	8002474 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800205c:	4802      	ldr	r0, [pc, #8]	@ (8002068 <DMA1_Channel2_IRQHandler+0x10>)
 800205e:	f000 fc96 	bl	800298e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20000114 	.word	0x20000114

0800206c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002070:	4802      	ldr	r0, [pc, #8]	@ (800207c <USART2_IRQHandler+0x10>)
 8002072:	f003 f96b 	bl	800534c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000160 	.word	0x20000160

08002080 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8002084:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002088:	f001 f986 	bl	8003398 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}

08002090 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return 1;
 8002094:	2301      	movs	r3, #1
}
 8002096:	4618      	mov	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <_kill>:

int _kill(int pid, int sig)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020aa:	f004 fc8b 	bl	80069c4 <__errno>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2216      	movs	r2, #22
 80020b2:	601a      	str	r2, [r3, #0]
  return -1;
 80020b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <_exit>:

void _exit (int status)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020c8:	f04f 31ff 	mov.w	r1, #4294967295
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff ffe7 	bl	80020a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020d2:	bf00      	nop
 80020d4:	e7fd      	b.n	80020d2 <_exit+0x12>

080020d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b086      	sub	sp, #24
 80020da:	af00      	add	r7, sp, #0
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	e00a      	b.n	80020fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020e8:	f3af 8000 	nop.w
 80020ec:	4601      	mov	r1, r0
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	1c5a      	adds	r2, r3, #1
 80020f2:	60ba      	str	r2, [r7, #8]
 80020f4:	b2ca      	uxtb	r2, r1
 80020f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	3301      	adds	r3, #1
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	429a      	cmp	r2, r3
 8002104:	dbf0      	blt.n	80020e8 <_read+0x12>
  }

  return len;
 8002106:	687b      	ldr	r3, [r7, #4]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	e009      	b.n	8002136 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	60ba      	str	r2, [r7, #8]
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	3301      	adds	r3, #1
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	429a      	cmp	r2, r3
 800213c:	dbf1      	blt.n	8002122 <_write+0x12>
  }
  return len;
 800213e:	687b      	ldr	r3, [r7, #4]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <_close>:

int _close(int file)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002150:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002154:	4618      	mov	r0, r3
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002170:	605a      	str	r2, [r3, #4]
  return 0;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <_isatty>:

int _isatty(int file)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002188:	2301      	movs	r3, #1
}
 800218a:	4618      	mov	r0, r3
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002196:	b480      	push	{r7}
 8002198:	b085      	sub	sp, #20
 800219a:	af00      	add	r7, sp, #0
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021b8:	4a14      	ldr	r2, [pc, #80]	@ (800220c <_sbrk+0x5c>)
 80021ba:	4b15      	ldr	r3, [pc, #84]	@ (8002210 <_sbrk+0x60>)
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c4:	4b13      	ldr	r3, [pc, #76]	@ (8002214 <_sbrk+0x64>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d102      	bne.n	80021d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021cc:	4b11      	ldr	r3, [pc, #68]	@ (8002214 <_sbrk+0x64>)
 80021ce:	4a12      	ldr	r2, [pc, #72]	@ (8002218 <_sbrk+0x68>)
 80021d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021d2:	4b10      	ldr	r3, [pc, #64]	@ (8002214 <_sbrk+0x64>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4413      	add	r3, r2
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d207      	bcs.n	80021f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021e0:	f004 fbf0 	bl	80069c4 <__errno>
 80021e4:	4603      	mov	r3, r0
 80021e6:	220c      	movs	r2, #12
 80021e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ea:	f04f 33ff 	mov.w	r3, #4294967295
 80021ee:	e009      	b.n	8002204 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021f0:	4b08      	ldr	r3, [pc, #32]	@ (8002214 <_sbrk+0x64>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021f6:	4b07      	ldr	r3, [pc, #28]	@ (8002214 <_sbrk+0x64>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4413      	add	r3, r2
 80021fe:	4a05      	ldr	r2, [pc, #20]	@ (8002214 <_sbrk+0x64>)
 8002200:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002202:	68fb      	ldr	r3, [r7, #12]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20018000 	.word	0x20018000
 8002210:	00000400 	.word	0x00000400
 8002214:	2000015c 	.word	0x2000015c
 8002218:	20000338 	.word	0x20000338

0800221c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002220:	4b06      	ldr	r3, [pc, #24]	@ (800223c <SystemInit+0x20>)
 8002222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002226:	4a05      	ldr	r2, [pc, #20]	@ (800223c <SystemInit+0x20>)
 8002228:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800222c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002244:	4b14      	ldr	r3, [pc, #80]	@ (8002298 <MX_USART2_UART_Init+0x58>)
 8002246:	4a15      	ldr	r2, [pc, #84]	@ (800229c <MX_USART2_UART_Init+0x5c>)
 8002248:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800224a:	4b13      	ldr	r3, [pc, #76]	@ (8002298 <MX_USART2_UART_Init+0x58>)
 800224c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002250:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002252:	4b11      	ldr	r3, [pc, #68]	@ (8002298 <MX_USART2_UART_Init+0x58>)
 8002254:	2200      	movs	r2, #0
 8002256:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002258:	4b0f      	ldr	r3, [pc, #60]	@ (8002298 <MX_USART2_UART_Init+0x58>)
 800225a:	2200      	movs	r2, #0
 800225c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800225e:	4b0e      	ldr	r3, [pc, #56]	@ (8002298 <MX_USART2_UART_Init+0x58>)
 8002260:	2200      	movs	r2, #0
 8002262:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002264:	4b0c      	ldr	r3, [pc, #48]	@ (8002298 <MX_USART2_UART_Init+0x58>)
 8002266:	220c      	movs	r2, #12
 8002268:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800226a:	4b0b      	ldr	r3, [pc, #44]	@ (8002298 <MX_USART2_UART_Init+0x58>)
 800226c:	2200      	movs	r2, #0
 800226e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002270:	4b09      	ldr	r3, [pc, #36]	@ (8002298 <MX_USART2_UART_Init+0x58>)
 8002272:	2200      	movs	r2, #0
 8002274:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002276:	4b08      	ldr	r3, [pc, #32]	@ (8002298 <MX_USART2_UART_Init+0x58>)
 8002278:	2200      	movs	r2, #0
 800227a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800227c:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <MX_USART2_UART_Init+0x58>)
 800227e:	2200      	movs	r2, #0
 8002280:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002282:	4805      	ldr	r0, [pc, #20]	@ (8002298 <MX_USART2_UART_Init+0x58>)
 8002284:	f002 ff4a 	bl	800511c <HAL_UART_Init>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800228e:	f7ff f9b9 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000160 	.word	0x20000160
 800229c:	40004400 	.word	0x40004400

080022a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b0ac      	sub	sp, #176	@ 0xb0
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	60da      	str	r2, [r3, #12]
 80022b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	2288      	movs	r2, #136	@ 0x88
 80022be:	2100      	movs	r1, #0
 80022c0:	4618      	mov	r0, r3
 80022c2:	f004 faf2 	bl	80068aa <memset>
  if(uartHandle->Instance==USART2)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a25      	ldr	r2, [pc, #148]	@ (8002360 <HAL_UART_MspInit+0xc0>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d143      	bne.n	8002358 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80022d0:	2302      	movs	r3, #2
 80022d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80022d4:	2300      	movs	r3, #0
 80022d6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022d8:	f107 0314 	add.w	r3, r7, #20
 80022dc:	4618      	mov	r0, r3
 80022de:	f001 fee3 	bl	80040a8 <HAL_RCCEx_PeriphCLKConfig>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022e8:	f7ff f98c 	bl	8001604 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002364 <HAL_UART_MspInit+0xc4>)
 80022ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f0:	4a1c      	ldr	r2, [pc, #112]	@ (8002364 <HAL_UART_MspInit+0xc4>)
 80022f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80022f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002364 <HAL_UART_MspInit+0xc4>)
 80022fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002300:	613b      	str	r3, [r7, #16]
 8002302:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002304:	4b17      	ldr	r3, [pc, #92]	@ (8002364 <HAL_UART_MspInit+0xc4>)
 8002306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002308:	4a16      	ldr	r2, [pc, #88]	@ (8002364 <HAL_UART_MspInit+0xc4>)
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002310:	4b14      	ldr	r3, [pc, #80]	@ (8002364 <HAL_UART_MspInit+0xc4>)
 8002312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800231c:	230c      	movs	r3, #12
 800231e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002322:	2302      	movs	r3, #2
 8002324:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232e:	2303      	movs	r3, #3
 8002330:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002334:	2307      	movs	r3, #7
 8002336:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800233e:	4619      	mov	r1, r3
 8002340:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002344:	f000 fe66 	bl	8003014 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002348:	2200      	movs	r2, #0
 800234a:	2100      	movs	r1, #0
 800234c:	2026      	movs	r0, #38	@ 0x26
 800234e:	f000 f9b0 	bl	80026b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002352:	2026      	movs	r0, #38	@ 0x26
 8002354:	f000 f9c9 	bl	80026ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002358:	bf00      	nop
 800235a:	37b0      	adds	r7, #176	@ 0xb0
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40004400 	.word	0x40004400
 8002364:	40021000 	.word	0x40021000

08002368 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002368:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800236c:	f7ff ff56 	bl	800221c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002370:	480c      	ldr	r0, [pc, #48]	@ (80023a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002372:	490d      	ldr	r1, [pc, #52]	@ (80023a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002374:	4a0d      	ldr	r2, [pc, #52]	@ (80023ac <LoopForever+0xe>)
  movs r3, #0
 8002376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002378:	e002      	b.n	8002380 <LoopCopyDataInit>

0800237a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800237a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800237c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800237e:	3304      	adds	r3, #4

08002380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002384:	d3f9      	bcc.n	800237a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002386:	4a0a      	ldr	r2, [pc, #40]	@ (80023b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002388:	4c0a      	ldr	r4, [pc, #40]	@ (80023b4 <LoopForever+0x16>)
  movs r3, #0
 800238a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800238c:	e001      	b.n	8002392 <LoopFillZerobss>

0800238e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800238e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002390:	3204      	adds	r2, #4

08002392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002394:	d3fb      	bcc.n	800238e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002396:	f004 fb1b 	bl	80069d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800239a:	f7ff f8ba 	bl	8001512 <main>

0800239e <LoopForever>:

LoopForever:
    b LoopForever
 800239e:	e7fe      	b.n	800239e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80023a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023a8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80023ac:	08007f10 	.word	0x08007f10
  ldr r2, =_sbss
 80023b0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80023b4:	20000338 	.word	0x20000338

080023b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023b8:	e7fe      	b.n	80023b8 <ADC1_2_IRQHandler>
	...

080023bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023c2:	2300      	movs	r3, #0
 80023c4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023c6:	4b0c      	ldr	r3, [pc, #48]	@ (80023f8 <HAL_Init+0x3c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a0b      	ldr	r2, [pc, #44]	@ (80023f8 <HAL_Init+0x3c>)
 80023cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023d0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d2:	2003      	movs	r0, #3
 80023d4:	f000 f962 	bl	800269c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023d8:	2000      	movs	r0, #0
 80023da:	f000 f80f 	bl	80023fc <HAL_InitTick>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	71fb      	strb	r3, [r7, #7]
 80023e8:	e001      	b.n	80023ee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023ea:	f7ff fde1 	bl	8001fb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023ee:	79fb      	ldrb	r3, [r7, #7]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40022000 	.word	0x40022000

080023fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002408:	4b17      	ldr	r3, [pc, #92]	@ (8002468 <HAL_InitTick+0x6c>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d023      	beq.n	8002458 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002410:	4b16      	ldr	r3, [pc, #88]	@ (800246c <HAL_InitTick+0x70>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	4b14      	ldr	r3, [pc, #80]	@ (8002468 <HAL_InitTick+0x6c>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	4619      	mov	r1, r3
 800241a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800241e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002422:	fbb2 f3f3 	udiv	r3, r2, r3
 8002426:	4618      	mov	r0, r3
 8002428:	f000 f96d 	bl	8002706 <HAL_SYSTICK_Config>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10f      	bne.n	8002452 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b0f      	cmp	r3, #15
 8002436:	d809      	bhi.n	800244c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002438:	2200      	movs	r2, #0
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	f04f 30ff 	mov.w	r0, #4294967295
 8002440:	f000 f937 	bl	80026b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002444:	4a0a      	ldr	r2, [pc, #40]	@ (8002470 <HAL_InitTick+0x74>)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	e007      	b.n	800245c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
 8002450:	e004      	b.n	800245c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	73fb      	strb	r3, [r7, #15]
 8002456:	e001      	b.n	800245c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800245c:	7bfb      	ldrb	r3, [r7, #15]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000010 	.word	0x20000010
 800246c:	20000008 	.word	0x20000008
 8002470:	2000000c 	.word	0x2000000c

08002474 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002478:	4b06      	ldr	r3, [pc, #24]	@ (8002494 <HAL_IncTick+0x20>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	461a      	mov	r2, r3
 800247e:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <HAL_IncTick+0x24>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4413      	add	r3, r2
 8002484:	4a04      	ldr	r2, [pc, #16]	@ (8002498 <HAL_IncTick+0x24>)
 8002486:	6013      	str	r3, [r2, #0]
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	20000010 	.word	0x20000010
 8002498:	200001e8 	.word	0x200001e8

0800249c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  return uwTick;
 80024a0:	4b03      	ldr	r3, [pc, #12]	@ (80024b0 <HAL_GetTick+0x14>)
 80024a2:	681b      	ldr	r3, [r3, #0]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	200001e8 	.word	0x200001e8

080024b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024bc:	f7ff ffee 	bl	800249c <HAL_GetTick>
 80024c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024cc:	d005      	beq.n	80024da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80024ce:	4b0a      	ldr	r3, [pc, #40]	@ (80024f8 <HAL_Delay+0x44>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4413      	add	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024da:	bf00      	nop
 80024dc:	f7ff ffde 	bl	800249c <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d8f7      	bhi.n	80024dc <HAL_Delay+0x28>
  {
  }
}
 80024ec:	bf00      	nop
 80024ee:	bf00      	nop
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000010 	.word	0x20000010

080024fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800250c:	4b0c      	ldr	r3, [pc, #48]	@ (8002540 <__NVIC_SetPriorityGrouping+0x44>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002518:	4013      	ands	r3, r2
 800251a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002524:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002528:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800252c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800252e:	4a04      	ldr	r2, [pc, #16]	@ (8002540 <__NVIC_SetPriorityGrouping+0x44>)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	60d3      	str	r3, [r2, #12]
}
 8002534:	bf00      	nop
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002548:	4b04      	ldr	r3, [pc, #16]	@ (800255c <__NVIC_GetPriorityGrouping+0x18>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	0a1b      	lsrs	r3, r3, #8
 800254e:	f003 0307 	and.w	r3, r3, #7
}
 8002552:	4618      	mov	r0, r3
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256e:	2b00      	cmp	r3, #0
 8002570:	db0b      	blt.n	800258a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	f003 021f 	and.w	r2, r3, #31
 8002578:	4907      	ldr	r1, [pc, #28]	@ (8002598 <__NVIC_EnableIRQ+0x38>)
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	095b      	lsrs	r3, r3, #5
 8002580:	2001      	movs	r0, #1
 8002582:	fa00 f202 	lsl.w	r2, r0, r2
 8002586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	e000e100 	.word	0xe000e100

0800259c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	6039      	str	r1, [r7, #0]
 80025a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	db0a      	blt.n	80025c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	490c      	ldr	r1, [pc, #48]	@ (80025e8 <__NVIC_SetPriority+0x4c>)
 80025b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ba:	0112      	lsls	r2, r2, #4
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	440b      	add	r3, r1
 80025c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025c4:	e00a      	b.n	80025dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	4908      	ldr	r1, [pc, #32]	@ (80025ec <__NVIC_SetPriority+0x50>)
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	3b04      	subs	r3, #4
 80025d4:	0112      	lsls	r2, r2, #4
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	440b      	add	r3, r1
 80025da:	761a      	strb	r2, [r3, #24]
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	e000e100 	.word	0xe000e100
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b089      	sub	sp, #36	@ 0x24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f1c3 0307 	rsb	r3, r3, #7
 800260a:	2b04      	cmp	r3, #4
 800260c:	bf28      	it	cs
 800260e:	2304      	movcs	r3, #4
 8002610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3304      	adds	r3, #4
 8002616:	2b06      	cmp	r3, #6
 8002618:	d902      	bls.n	8002620 <NVIC_EncodePriority+0x30>
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3b03      	subs	r3, #3
 800261e:	e000      	b.n	8002622 <NVIC_EncodePriority+0x32>
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002624:	f04f 32ff 	mov.w	r2, #4294967295
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43da      	mvns	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	401a      	ands	r2, r3
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002638:	f04f 31ff 	mov.w	r1, #4294967295
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	fa01 f303 	lsl.w	r3, r1, r3
 8002642:	43d9      	mvns	r1, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002648:	4313      	orrs	r3, r2
         );
}
 800264a:	4618      	mov	r0, r3
 800264c:	3724      	adds	r7, #36	@ 0x24
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
	...

08002658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3b01      	subs	r3, #1
 8002664:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002668:	d301      	bcc.n	800266e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800266a:	2301      	movs	r3, #1
 800266c:	e00f      	b.n	800268e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800266e:	4a0a      	ldr	r2, [pc, #40]	@ (8002698 <SysTick_Config+0x40>)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3b01      	subs	r3, #1
 8002674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002676:	210f      	movs	r1, #15
 8002678:	f04f 30ff 	mov.w	r0, #4294967295
 800267c:	f7ff ff8e 	bl	800259c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002680:	4b05      	ldr	r3, [pc, #20]	@ (8002698 <SysTick_Config+0x40>)
 8002682:	2200      	movs	r2, #0
 8002684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002686:	4b04      	ldr	r3, [pc, #16]	@ (8002698 <SysTick_Config+0x40>)
 8002688:	2207      	movs	r2, #7
 800268a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	e000e010 	.word	0xe000e010

0800269c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7ff ff29 	bl	80024fc <__NVIC_SetPriorityGrouping>
}
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b086      	sub	sp, #24
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	4603      	mov	r3, r0
 80026ba:	60b9      	str	r1, [r7, #8]
 80026bc:	607a      	str	r2, [r7, #4]
 80026be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026c4:	f7ff ff3e 	bl	8002544 <__NVIC_GetPriorityGrouping>
 80026c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	68b9      	ldr	r1, [r7, #8]
 80026ce:	6978      	ldr	r0, [r7, #20]
 80026d0:	f7ff ff8e 	bl	80025f0 <NVIC_EncodePriority>
 80026d4:	4602      	mov	r2, r0
 80026d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026da:	4611      	mov	r1, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff ff5d 	bl	800259c <__NVIC_SetPriority>
}
 80026e2:	bf00      	nop
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	4603      	mov	r3, r0
 80026f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ff31 	bl	8002560 <__NVIC_EnableIRQ>
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7ff ffa2 	bl	8002658 <SysTick_Config>
 8002714:	4603      	mov	r3, r0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e098      	b.n	8002864 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	461a      	mov	r2, r3
 8002738:	4b4d      	ldr	r3, [pc, #308]	@ (8002870 <HAL_DMA_Init+0x150>)
 800273a:	429a      	cmp	r2, r3
 800273c:	d80f      	bhi.n	800275e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	4b4b      	ldr	r3, [pc, #300]	@ (8002874 <HAL_DMA_Init+0x154>)
 8002746:	4413      	add	r3, r2
 8002748:	4a4b      	ldr	r2, [pc, #300]	@ (8002878 <HAL_DMA_Init+0x158>)
 800274a:	fba2 2303 	umull	r2, r3, r2, r3
 800274e:	091b      	lsrs	r3, r3, #4
 8002750:	009a      	lsls	r2, r3, #2
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a48      	ldr	r2, [pc, #288]	@ (800287c <HAL_DMA_Init+0x15c>)
 800275a:	641a      	str	r2, [r3, #64]	@ 0x40
 800275c:	e00e      	b.n	800277c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	461a      	mov	r2, r3
 8002764:	4b46      	ldr	r3, [pc, #280]	@ (8002880 <HAL_DMA_Init+0x160>)
 8002766:	4413      	add	r3, r2
 8002768:	4a43      	ldr	r2, [pc, #268]	@ (8002878 <HAL_DMA_Init+0x158>)
 800276a:	fba2 2303 	umull	r2, r3, r2, r3
 800276e:	091b      	lsrs	r3, r3, #4
 8002770:	009a      	lsls	r2, r3, #2
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a42      	ldr	r2, [pc, #264]	@ (8002884 <HAL_DMA_Init+0x164>)
 800277a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2202      	movs	r2, #2
 8002780:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002796:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80027a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027d6:	d039      	beq.n	800284c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027dc:	4a27      	ldr	r2, [pc, #156]	@ (800287c <HAL_DMA_Init+0x15c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d11a      	bne.n	8002818 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80027e2:	4b29      	ldr	r3, [pc, #164]	@ (8002888 <HAL_DMA_Init+0x168>)
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ea:	f003 031c 	and.w	r3, r3, #28
 80027ee:	210f      	movs	r1, #15
 80027f0:	fa01 f303 	lsl.w	r3, r1, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	4924      	ldr	r1, [pc, #144]	@ (8002888 <HAL_DMA_Init+0x168>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80027fc:	4b22      	ldr	r3, [pc, #136]	@ (8002888 <HAL_DMA_Init+0x168>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6859      	ldr	r1, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002808:	f003 031c 	and.w	r3, r3, #28
 800280c:	fa01 f303 	lsl.w	r3, r1, r3
 8002810:	491d      	ldr	r1, [pc, #116]	@ (8002888 <HAL_DMA_Init+0x168>)
 8002812:	4313      	orrs	r3, r2
 8002814:	600b      	str	r3, [r1, #0]
 8002816:	e019      	b.n	800284c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002818:	4b1c      	ldr	r3, [pc, #112]	@ (800288c <HAL_DMA_Init+0x16c>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002820:	f003 031c 	and.w	r3, r3, #28
 8002824:	210f      	movs	r1, #15
 8002826:	fa01 f303 	lsl.w	r3, r1, r3
 800282a:	43db      	mvns	r3, r3
 800282c:	4917      	ldr	r1, [pc, #92]	@ (800288c <HAL_DMA_Init+0x16c>)
 800282e:	4013      	ands	r3, r2
 8002830:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002832:	4b16      	ldr	r3, [pc, #88]	@ (800288c <HAL_DMA_Init+0x16c>)
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6859      	ldr	r1, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283e:	f003 031c 	and.w	r3, r3, #28
 8002842:	fa01 f303 	lsl.w	r3, r1, r3
 8002846:	4911      	ldr	r1, [pc, #68]	@ (800288c <HAL_DMA_Init+0x16c>)
 8002848:	4313      	orrs	r3, r2
 800284a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	40020407 	.word	0x40020407
 8002874:	bffdfff8 	.word	0xbffdfff8
 8002878:	cccccccd 	.word	0xcccccccd
 800287c:	40020000 	.word	0x40020000
 8002880:	bffdfbf8 	.word	0xbffdfbf8
 8002884:	40020400 	.word	0x40020400
 8002888:	400200a8 	.word	0x400200a8
 800288c:	400204a8 	.word	0x400204a8

08002890 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d008      	beq.n	80028ba <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2204      	movs	r2, #4
 80028ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e022      	b.n	8002900 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 020e 	bic.w	r2, r2, #14
 80028c8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0201 	bic.w	r2, r2, #1
 80028d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028de:	f003 021c 	and.w	r2, r3, #28
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e6:	2101      	movs	r1, #1
 80028e8:	fa01 f202 	lsl.w	r2, r1, r2
 80028ec:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002900:	4618      	mov	r0, r3
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d005      	beq.n	8002930 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2204      	movs	r2, #4
 8002928:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	73fb      	strb	r3, [r7, #15]
 800292e:	e029      	b.n	8002984 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 020e 	bic.w	r2, r2, #14
 800293e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0201 	bic.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002954:	f003 021c 	and.w	r2, r3, #28
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295c:	2101      	movs	r1, #1
 800295e:	fa01 f202 	lsl.w	r2, r1, r2
 8002962:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	4798      	blx	r3
    }
  }
  return status;
 8002984:	7bfb      	ldrb	r3, [r7, #15]
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b084      	sub	sp, #16
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029aa:	f003 031c 	and.w	r3, r3, #28
 80029ae:	2204      	movs	r2, #4
 80029b0:	409a      	lsls	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d026      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x7a>
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d021      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0320 	and.w	r3, r3, #32
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d107      	bne.n	80029e2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0204 	bic.w	r2, r2, #4
 80029e0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e6:	f003 021c 	and.w	r2, r3, #28
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	2104      	movs	r1, #4
 80029f0:	fa01 f202 	lsl.w	r2, r1, r2
 80029f4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d071      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002a06:	e06c      	b.n	8002ae2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0c:	f003 031c 	and.w	r3, r3, #28
 8002a10:	2202      	movs	r2, #2
 8002a12:	409a      	lsls	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d02e      	beq.n	8002a7a <HAL_DMA_IRQHandler+0xec>
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d029      	beq.n	8002a7a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0320 	and.w	r3, r3, #32
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10b      	bne.n	8002a4c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 020a 	bic.w	r2, r2, #10
 8002a42:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a50:	f003 021c 	and.w	r2, r3, #28
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a58:	2102      	movs	r1, #2
 8002a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a5e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d038      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002a78:	e033      	b.n	8002ae2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7e:	f003 031c 	and.w	r3, r3, #28
 8002a82:	2208      	movs	r2, #8
 8002a84:	409a      	lsls	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d02a      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x156>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	f003 0308 	and.w	r3, r3, #8
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d025      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 020e 	bic.w	r2, r2, #14
 8002aa6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aac:	f003 021c 	and.w	r2, r3, #28
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8002aba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d004      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ae2:	bf00      	nop
 8002ae4:	bf00      	nop
}
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002afe:	4b2f      	ldr	r3, [pc, #188]	@ (8002bbc <HAL_FLASH_Program+0xd0>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d101      	bne.n	8002b0a <HAL_FLASH_Program+0x1e>
 8002b06:	2302      	movs	r3, #2
 8002b08:	e053      	b.n	8002bb2 <HAL_FLASH_Program+0xc6>
 8002b0a:	4b2c      	ldr	r3, [pc, #176]	@ (8002bbc <HAL_FLASH_Program+0xd0>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b10:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002b14:	f000 f888 	bl	8002c28 <FLASH_WaitForLastOperation>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8002b1c:	7dfb      	ldrb	r3, [r7, #23]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d143      	bne.n	8002baa <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002b22:	4b26      	ldr	r3, [pc, #152]	@ (8002bbc <HAL_FLASH_Program+0xd0>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002b28:	4b25      	ldr	r3, [pc, #148]	@ (8002bc0 <HAL_FLASH_Program+0xd4>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d009      	beq.n	8002b48 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002b34:	4b22      	ldr	r3, [pc, #136]	@ (8002bc0 <HAL_FLASH_Program+0xd4>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a21      	ldr	r2, [pc, #132]	@ (8002bc0 <HAL_FLASH_Program+0xd4>)
 8002b3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002b3e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002b40:	4b1e      	ldr	r3, [pc, #120]	@ (8002bbc <HAL_FLASH_Program+0xd0>)
 8002b42:	2202      	movs	r2, #2
 8002b44:	771a      	strb	r2, [r3, #28]
 8002b46:	e002      	b.n	8002b4e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002b48:	4b1c      	ldr	r3, [pc, #112]	@ (8002bbc <HAL_FLASH_Program+0xd0>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d107      	bne.n	8002b64 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8002b54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b58:	68b8      	ldr	r0, [r7, #8]
 8002b5a:	f000 f8bb 	bl	8002cd4 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	e010      	b.n	8002b86 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d002      	beq.n	8002b70 <HAL_FLASH_Program+0x84>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d10a      	bne.n	8002b86 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	4619      	mov	r1, r3
 8002b74:	68b8      	ldr	r0, [r7, #8]
 8002b76:	f000 f8d3 	bl	8002d20 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d102      	bne.n	8002b86 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8002b80:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002b84:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b86:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002b8a:	f000 f84d 	bl	8002c28 <FLASH_WaitForLastOperation>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d006      	beq.n	8002ba6 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8002b98:	4b09      	ldr	r3, [pc, #36]	@ (8002bc0 <HAL_FLASH_Program+0xd4>)
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	4907      	ldr	r1, [pc, #28]	@ (8002bc0 <HAL_FLASH_Program+0xd4>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002ba6:	f000 f9eb 	bl	8002f80 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002baa:	4b04      	ldr	r3, [pc, #16]	@ (8002bbc <HAL_FLASH_Program+0xd0>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	701a      	strb	r2, [r3, #0]

  return status;
 8002bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000014 	.word	0x20000014
 8002bc0:	40022000 	.word	0x40022000

08002bc4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002bce:	4b0b      	ldr	r3, [pc, #44]	@ (8002bfc <HAL_FLASH_Unlock+0x38>)
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	da0b      	bge.n	8002bee <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002bd6:	4b09      	ldr	r3, [pc, #36]	@ (8002bfc <HAL_FLASH_Unlock+0x38>)
 8002bd8:	4a09      	ldr	r2, [pc, #36]	@ (8002c00 <HAL_FLASH_Unlock+0x3c>)
 8002bda:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002bdc:	4b07      	ldr	r3, [pc, #28]	@ (8002bfc <HAL_FLASH_Unlock+0x38>)
 8002bde:	4a09      	ldr	r2, [pc, #36]	@ (8002c04 <HAL_FLASH_Unlock+0x40>)
 8002be0:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002be2:	4b06      	ldr	r3, [pc, #24]	@ (8002bfc <HAL_FLASH_Unlock+0x38>)
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	da01      	bge.n	8002bee <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002bee:	79fb      	ldrb	r3, [r7, #7]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	40022000 	.word	0x40022000
 8002c00:	45670123 	.word	0x45670123
 8002c04:	cdef89ab 	.word	0xcdef89ab

08002c08 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002c0c:	4b05      	ldr	r3, [pc, #20]	@ (8002c24 <HAL_FLASH_Lock+0x1c>)
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	4a04      	ldr	r2, [pc, #16]	@ (8002c24 <HAL_FLASH_Lock+0x1c>)
 8002c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002c16:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	40022000 	.word	0x40022000

08002c28 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8002c30:	f7ff fc34 	bl	800249c <HAL_GetTick>
 8002c34:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002c36:	e00d      	b.n	8002c54 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3e:	d009      	beq.n	8002c54 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8002c40:	f7ff fc2c 	bl	800249c <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d801      	bhi.n	8002c54 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e036      	b.n	8002cc2 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002c54:	4b1d      	ldr	r3, [pc, #116]	@ (8002ccc <FLASH_WaitForLastOperation+0xa4>)
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1eb      	bne.n	8002c38 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8002c60:	4b1a      	ldr	r3, [pc, #104]	@ (8002ccc <FLASH_WaitForLastOperation+0xa4>)
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8002c68:	4013      	ands	r3, r2
 8002c6a:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d01d      	beq.n	8002cae <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8002c72:	4b17      	ldr	r3, [pc, #92]	@ (8002cd0 <FLASH_WaitForLastOperation+0xa8>)
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	4a15      	ldr	r2, [pc, #84]	@ (8002cd0 <FLASH_WaitForLastOperation+0xa8>)
 8002c7c:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c84:	d307      	bcc.n	8002c96 <FLASH_WaitForLastOperation+0x6e>
 8002c86:	4b11      	ldr	r3, [pc, #68]	@ (8002ccc <FLASH_WaitForLastOperation+0xa4>)
 8002c88:	699a      	ldr	r2, [r3, #24]
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8002c90:	490e      	ldr	r1, [pc, #56]	@ (8002ccc <FLASH_WaitForLastOperation+0xa4>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	618b      	str	r3, [r1, #24]
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d004      	beq.n	8002caa <FLASH_WaitForLastOperation+0x82>
 8002ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8002ccc <FLASH_WaitForLastOperation+0xa4>)
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002ca8:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e009      	b.n	8002cc2 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002cae:	4b07      	ldr	r3, [pc, #28]	@ (8002ccc <FLASH_WaitForLastOperation+0xa4>)
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d002      	beq.n	8002cc0 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002cba:	4b04      	ldr	r3, [pc, #16]	@ (8002ccc <FLASH_WaitForLastOperation+0xa4>)
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40022000 	.word	0x40022000
 8002cd0:	20000014 	.word	0x20000014

08002cd4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8002d1c <FLASH_Program_DoubleWord+0x48>)
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	4a0d      	ldr	r2, [pc, #52]	@ (8002d1c <FLASH_Program_DoubleWord+0x48>)
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002cf2:	f3bf 8f6f 	isb	sy
}
 8002cf6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8002cf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	f04f 0300 	mov.w	r3, #0
 8002d04:	000a      	movs	r2, r1
 8002d06:	2300      	movs	r3, #0
 8002d08:	68f9      	ldr	r1, [r7, #12]
 8002d0a:	3104      	adds	r1, #4
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	600b      	str	r3, [r1, #0]
}
 8002d10:	bf00      	nop
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	40022000 	.word	0x40022000

08002d20 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b089      	sub	sp, #36	@ 0x24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8002d2a:	2340      	movs	r3, #64	@ 0x40
 8002d2c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8002d36:	4b14      	ldr	r3, [pc, #80]	@ (8002d88 <FLASH_Program_Fast+0x68>)
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	4a13      	ldr	r2, [pc, #76]	@ (8002d88 <FLASH_Program_Fast+0x68>)
 8002d3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d40:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d42:	f3ef 8310 	mrs	r3, PRIMASK
 8002d46:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d48:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8002d4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d4c:	b672      	cpsid	i
}
 8002d4e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	3304      	adds	r3, #4
 8002d62:	617b      	str	r3, [r7, #20]
    row_index--;
 8002d64:	7ffb      	ldrb	r3, [r7, #31]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8002d6a:	7ffb      	ldrb	r3, [r7, #31]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1ef      	bne.n	8002d50 <FLASH_Program_Fast+0x30>
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f383 8810 	msr	PRIMASK, r3
}
 8002d7a:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8002d7c:	bf00      	nop
 8002d7e:	3724      	adds	r7, #36	@ 0x24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	40022000 	.word	0x40022000

08002d8c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002d96:	4b49      	ldr	r3, [pc, #292]	@ (8002ebc <HAL_FLASHEx_Erase+0x130>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <HAL_FLASHEx_Erase+0x16>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e087      	b.n	8002eb2 <HAL_FLASHEx_Erase+0x126>
 8002da2:	4b46      	ldr	r3, [pc, #280]	@ (8002ebc <HAL_FLASHEx_Erase+0x130>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002da8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002dac:	f7ff ff3c 	bl	8002c28 <FLASH_WaitForLastOperation>
 8002db0:	4603      	mov	r3, r0
 8002db2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d177      	bne.n	8002eaa <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002dba:	4b40      	ldr	r3, [pc, #256]	@ (8002ebc <HAL_FLASHEx_Erase+0x130>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002dc0:	4b3f      	ldr	r3, [pc, #252]	@ (8002ec0 <HAL_FLASHEx_Erase+0x134>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d013      	beq.n	8002df4 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002dcc:	4b3c      	ldr	r3, [pc, #240]	@ (8002ec0 <HAL_FLASHEx_Erase+0x134>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d009      	beq.n	8002dec <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8002dd8:	4b39      	ldr	r3, [pc, #228]	@ (8002ec0 <HAL_FLASHEx_Erase+0x134>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a38      	ldr	r2, [pc, #224]	@ (8002ec0 <HAL_FLASHEx_Erase+0x134>)
 8002dde:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002de2:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8002de4:	4b35      	ldr	r3, [pc, #212]	@ (8002ebc <HAL_FLASHEx_Erase+0x130>)
 8002de6:	2203      	movs	r2, #3
 8002de8:	771a      	strb	r2, [r3, #28]
 8002dea:	e016      	b.n	8002e1a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8002dec:	4b33      	ldr	r3, [pc, #204]	@ (8002ebc <HAL_FLASHEx_Erase+0x130>)
 8002dee:	2201      	movs	r2, #1
 8002df0:	771a      	strb	r2, [r3, #28]
 8002df2:	e012      	b.n	8002e1a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002df4:	4b32      	ldr	r3, [pc, #200]	@ (8002ec0 <HAL_FLASHEx_Erase+0x134>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d009      	beq.n	8002e14 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002e00:	4b2f      	ldr	r3, [pc, #188]	@ (8002ec0 <HAL_FLASHEx_Erase+0x134>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a2e      	ldr	r2, [pc, #184]	@ (8002ec0 <HAL_FLASHEx_Erase+0x134>)
 8002e06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e0a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8002ebc <HAL_FLASHEx_Erase+0x130>)
 8002e0e:	2202      	movs	r2, #2
 8002e10:	771a      	strb	r2, [r3, #28]
 8002e12:	e002      	b.n	8002e1a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002e14:	4b29      	ldr	r3, [pc, #164]	@ (8002ebc <HAL_FLASHEx_Erase+0x130>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d113      	bne.n	8002e4a <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 f84c 	bl	8002ec4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e2c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002e30:	f7ff fefa 	bl	8002c28 <FLASH_WaitForLastOperation>
 8002e34:	4603      	mov	r3, r0
 8002e36:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8002e38:	4b21      	ldr	r3, [pc, #132]	@ (8002ec0 <HAL_FLASHEx_Erase+0x134>)
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	4a20      	ldr	r2, [pc, #128]	@ (8002ec0 <HAL_FLASHEx_Erase+0x134>)
 8002e3e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002e42:	f023 0304 	bic.w	r3, r3, #4
 8002e46:	6153      	str	r3, [r2, #20]
 8002e48:	e02d      	b.n	8002ea6 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e50:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	e01d      	b.n	8002e96 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	4619      	mov	r1, r3
 8002e60:	68b8      	ldr	r0, [r7, #8]
 8002e62:	f000 f857 	bl	8002f14 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e66:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002e6a:	f7ff fedd 	bl	8002c28 <FLASH_WaitForLastOperation>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8002e72:	4b13      	ldr	r3, [pc, #76]	@ (8002ec0 <HAL_FLASHEx_Erase+0x134>)
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	4a12      	ldr	r2, [pc, #72]	@ (8002ec0 <HAL_FLASHEx_Erase+0x134>)
 8002e78:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002e7c:	f023 0302 	bic.w	r3, r3, #2
 8002e80:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8002e82:	7bfb      	ldrb	r3, [r7, #15]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	601a      	str	r2, [r3, #0]
          break;
 8002e8e:	e00a      	b.n	8002ea6 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	3301      	adds	r3, #1
 8002e94:	60bb      	str	r3, [r7, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d3d9      	bcc.n	8002e5a <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002ea6:	f000 f86b 	bl	8002f80 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002eaa:	4b04      	ldr	r3, [pc, #16]	@ (8002ebc <HAL_FLASHEx_Erase+0x130>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	701a      	strb	r2, [r3, #0]

  return status;
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20000014 	.word	0x20000014
 8002ec0:	40022000 	.word	0x40022000

08002ec4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d005      	beq.n	8002ee2 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8002ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8002f10 <FLASH_MassErase+0x4c>)
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	4a0d      	ldr	r2, [pc, #52]	@ (8002f10 <FLASH_MassErase+0x4c>)
 8002edc:	f043 0304 	orr.w	r3, r3, #4
 8002ee0:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8002eec:	4b08      	ldr	r3, [pc, #32]	@ (8002f10 <FLASH_MassErase+0x4c>)
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	4a07      	ldr	r2, [pc, #28]	@ (8002f10 <FLASH_MassErase+0x4c>)
 8002ef2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ef6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002ef8:	4b05      	ldr	r3, [pc, #20]	@ (8002f10 <FLASH_MassErase+0x4c>)
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	4a04      	ldr	r2, [pc, #16]	@ (8002f10 <FLASH_MassErase+0x4c>)
 8002efe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f02:	6153      	str	r3, [r2, #20]
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	40022000 	.word	0x40022000

08002f14 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d006      	beq.n	8002f36 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8002f28:	4b14      	ldr	r3, [pc, #80]	@ (8002f7c <FLASH_PageErase+0x68>)
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	4a13      	ldr	r2, [pc, #76]	@ (8002f7c <FLASH_PageErase+0x68>)
 8002f2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f32:	6153      	str	r3, [r2, #20]
 8002f34:	e005      	b.n	8002f42 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8002f36:	4b11      	ldr	r3, [pc, #68]	@ (8002f7c <FLASH_PageErase+0x68>)
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	4a10      	ldr	r2, [pc, #64]	@ (8002f7c <FLASH_PageErase+0x68>)
 8002f3c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002f40:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8002f42:	4b0e      	ldr	r3, [pc, #56]	@ (8002f7c <FLASH_PageErase+0x68>)
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 8002f52:	490a      	ldr	r1, [pc, #40]	@ (8002f7c <FLASH_PageErase+0x68>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002f58:	4b08      	ldr	r3, [pc, #32]	@ (8002f7c <FLASH_PageErase+0x68>)
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	4a07      	ldr	r2, [pc, #28]	@ (8002f7c <FLASH_PageErase+0x68>)
 8002f5e:	f043 0302 	orr.w	r3, r3, #2
 8002f62:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002f64:	4b05      	ldr	r3, [pc, #20]	@ (8002f7c <FLASH_PageErase+0x68>)
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	4a04      	ldr	r2, [pc, #16]	@ (8002f7c <FLASH_PageErase+0x68>)
 8002f6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f6e:	6153      	str	r3, [r2, #20]
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	40022000 	.word	0x40022000

08002f80 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8002f86:	4b21      	ldr	r3, [pc, #132]	@ (800300c <FLASH_FlushCaches+0x8c>)
 8002f88:	7f1b      	ldrb	r3, [r3, #28]
 8002f8a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d002      	beq.n	8002f98 <FLASH_FlushCaches+0x18>
 8002f92:	79fb      	ldrb	r3, [r7, #7]
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d117      	bne.n	8002fc8 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002f98:	4b1d      	ldr	r3, [pc, #116]	@ (8003010 <FLASH_FlushCaches+0x90>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a1c      	ldr	r2, [pc, #112]	@ (8003010 <FLASH_FlushCaches+0x90>)
 8002f9e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002fa2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8003010 <FLASH_FlushCaches+0x90>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a19      	ldr	r2, [pc, #100]	@ (8003010 <FLASH_FlushCaches+0x90>)
 8002faa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002fae:	6013      	str	r3, [r2, #0]
 8002fb0:	4b17      	ldr	r3, [pc, #92]	@ (8003010 <FLASH_FlushCaches+0x90>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a16      	ldr	r2, [pc, #88]	@ (8003010 <FLASH_FlushCaches+0x90>)
 8002fb6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002fba:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fbc:	4b14      	ldr	r3, [pc, #80]	@ (8003010 <FLASH_FlushCaches+0x90>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a13      	ldr	r2, [pc, #76]	@ (8003010 <FLASH_FlushCaches+0x90>)
 8002fc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fc6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d002      	beq.n	8002fd4 <FLASH_FlushCaches+0x54>
 8002fce:	79fb      	ldrb	r3, [r7, #7]
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d111      	bne.n	8002ff8 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8003010 <FLASH_FlushCaches+0x90>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a0d      	ldr	r2, [pc, #52]	@ (8003010 <FLASH_FlushCaches+0x90>)
 8002fda:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002fde:	6013      	str	r3, [r2, #0]
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8003010 <FLASH_FlushCaches+0x90>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a0a      	ldr	r2, [pc, #40]	@ (8003010 <FLASH_FlushCaches+0x90>)
 8002fe6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002fea:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fec:	4b08      	ldr	r3, [pc, #32]	@ (8003010 <FLASH_FlushCaches+0x90>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a07      	ldr	r2, [pc, #28]	@ (8003010 <FLASH_FlushCaches+0x90>)
 8002ff2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ff6:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002ff8:	4b04      	ldr	r3, [pc, #16]	@ (800300c <FLASH_FlushCaches+0x8c>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	771a      	strb	r2, [r3, #28]
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	20000014 	.word	0x20000014
 8003010:	40022000 	.word	0x40022000

08003014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003014:	b480      	push	{r7}
 8003016:	b087      	sub	sp, #28
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003022:	e17f      	b.n	8003324 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	2101      	movs	r1, #1
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	fa01 f303 	lsl.w	r3, r1, r3
 8003030:	4013      	ands	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 8171 	beq.w	800331e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	2b01      	cmp	r3, #1
 8003046:	d005      	beq.n	8003054 <HAL_GPIO_Init+0x40>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 0303 	and.w	r3, r3, #3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d130      	bne.n	80030b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	2203      	movs	r2, #3
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	43db      	mvns	r3, r3
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4013      	ands	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4313      	orrs	r3, r2
 800307c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800308a:	2201      	movs	r2, #1
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43db      	mvns	r3, r3
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	4013      	ands	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	091b      	lsrs	r3, r3, #4
 80030a0:	f003 0201 	and.w	r2, r3, #1
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	2b03      	cmp	r3, #3
 80030c0:	d118      	bne.n	80030f4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80030c8:	2201      	movs	r2, #1
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	43db      	mvns	r3, r3
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4013      	ands	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	08db      	lsrs	r3, r3, #3
 80030de:	f003 0201 	and.w	r2, r3, #1
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f003 0303 	and.w	r3, r3, #3
 80030fc:	2b03      	cmp	r3, #3
 80030fe:	d017      	beq.n	8003130 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	2203      	movs	r2, #3
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	43db      	mvns	r3, r3
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4013      	ands	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	4313      	orrs	r3, r2
 8003128:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 0303 	and.w	r3, r3, #3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d123      	bne.n	8003184 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	08da      	lsrs	r2, r3, #3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3208      	adds	r2, #8
 8003144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003148:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	220f      	movs	r2, #15
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4013      	ands	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	691a      	ldr	r2, [r3, #16]
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	08da      	lsrs	r2, r3, #3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	3208      	adds	r2, #8
 800317e:	6939      	ldr	r1, [r7, #16]
 8003180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	2203      	movs	r2, #3
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	4013      	ands	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 0203 	and.w	r2, r3, #3
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 80ac 	beq.w	800331e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031c6:	4b5f      	ldr	r3, [pc, #380]	@ (8003344 <HAL_GPIO_Init+0x330>)
 80031c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ca:	4a5e      	ldr	r2, [pc, #376]	@ (8003344 <HAL_GPIO_Init+0x330>)
 80031cc:	f043 0301 	orr.w	r3, r3, #1
 80031d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80031d2:	4b5c      	ldr	r3, [pc, #368]	@ (8003344 <HAL_GPIO_Init+0x330>)
 80031d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031de:	4a5a      	ldr	r2, [pc, #360]	@ (8003348 <HAL_GPIO_Init+0x334>)
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	089b      	lsrs	r3, r3, #2
 80031e4:	3302      	adds	r3, #2
 80031e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	220f      	movs	r2, #15
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	43db      	mvns	r3, r3
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	4013      	ands	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003208:	d025      	beq.n	8003256 <HAL_GPIO_Init+0x242>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a4f      	ldr	r2, [pc, #316]	@ (800334c <HAL_GPIO_Init+0x338>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d01f      	beq.n	8003252 <HAL_GPIO_Init+0x23e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a4e      	ldr	r2, [pc, #312]	@ (8003350 <HAL_GPIO_Init+0x33c>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d019      	beq.n	800324e <HAL_GPIO_Init+0x23a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a4d      	ldr	r2, [pc, #308]	@ (8003354 <HAL_GPIO_Init+0x340>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d013      	beq.n	800324a <HAL_GPIO_Init+0x236>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a4c      	ldr	r2, [pc, #304]	@ (8003358 <HAL_GPIO_Init+0x344>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00d      	beq.n	8003246 <HAL_GPIO_Init+0x232>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a4b      	ldr	r2, [pc, #300]	@ (800335c <HAL_GPIO_Init+0x348>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d007      	beq.n	8003242 <HAL_GPIO_Init+0x22e>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a4a      	ldr	r2, [pc, #296]	@ (8003360 <HAL_GPIO_Init+0x34c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d101      	bne.n	800323e <HAL_GPIO_Init+0x22a>
 800323a:	2306      	movs	r3, #6
 800323c:	e00c      	b.n	8003258 <HAL_GPIO_Init+0x244>
 800323e:	2307      	movs	r3, #7
 8003240:	e00a      	b.n	8003258 <HAL_GPIO_Init+0x244>
 8003242:	2305      	movs	r3, #5
 8003244:	e008      	b.n	8003258 <HAL_GPIO_Init+0x244>
 8003246:	2304      	movs	r3, #4
 8003248:	e006      	b.n	8003258 <HAL_GPIO_Init+0x244>
 800324a:	2303      	movs	r3, #3
 800324c:	e004      	b.n	8003258 <HAL_GPIO_Init+0x244>
 800324e:	2302      	movs	r3, #2
 8003250:	e002      	b.n	8003258 <HAL_GPIO_Init+0x244>
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <HAL_GPIO_Init+0x244>
 8003256:	2300      	movs	r3, #0
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	f002 0203 	and.w	r2, r2, #3
 800325e:	0092      	lsls	r2, r2, #2
 8003260:	4093      	lsls	r3, r2
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	4313      	orrs	r3, r2
 8003266:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003268:	4937      	ldr	r1, [pc, #220]	@ (8003348 <HAL_GPIO_Init+0x334>)
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	089b      	lsrs	r3, r3, #2
 800326e:	3302      	adds	r3, #2
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003276:	4b3b      	ldr	r3, [pc, #236]	@ (8003364 <HAL_GPIO_Init+0x350>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	43db      	mvns	r3, r3
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4013      	ands	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800329a:	4a32      	ldr	r2, [pc, #200]	@ (8003364 <HAL_GPIO_Init+0x350>)
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80032a0:	4b30      	ldr	r3, [pc, #192]	@ (8003364 <HAL_GPIO_Init+0x350>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	43db      	mvns	r3, r3
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	4013      	ands	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032c4:	4a27      	ldr	r2, [pc, #156]	@ (8003364 <HAL_GPIO_Init+0x350>)
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80032ca:	4b26      	ldr	r3, [pc, #152]	@ (8003364 <HAL_GPIO_Init+0x350>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	43db      	mvns	r3, r3
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4013      	ands	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003364 <HAL_GPIO_Init+0x350>)
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80032f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003364 <HAL_GPIO_Init+0x350>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	43db      	mvns	r3, r3
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	4013      	ands	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4313      	orrs	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003318:	4a12      	ldr	r2, [pc, #72]	@ (8003364 <HAL_GPIO_Init+0x350>)
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	3301      	adds	r3, #1
 8003322:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	fa22 f303 	lsr.w	r3, r2, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	f47f ae78 	bne.w	8003024 <HAL_GPIO_Init+0x10>
  }
}
 8003334:	bf00      	nop
 8003336:	bf00      	nop
 8003338:	371c      	adds	r7, #28
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40021000 	.word	0x40021000
 8003348:	40010000 	.word	0x40010000
 800334c:	48000400 	.word	0x48000400
 8003350:	48000800 	.word	0x48000800
 8003354:	48000c00 	.word	0x48000c00
 8003358:	48001000 	.word	0x48001000
 800335c:	48001400 	.word	0x48001400
 8003360:	48001800 	.word	0x48001800
 8003364:	40010400 	.word	0x40010400

08003368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	807b      	strh	r3, [r7, #2]
 8003374:	4613      	mov	r3, r2
 8003376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003378:	787b      	ldrb	r3, [r7, #1]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800337e:	887a      	ldrh	r2, [r7, #2]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003384:	e002      	b.n	800338c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003386:	887a      	ldrh	r2, [r7, #2]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80033a2:	4b08      	ldr	r3, [pc, #32]	@ (80033c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033a4:	695a      	ldr	r2, [r3, #20]
 80033a6:	88fb      	ldrh	r3, [r7, #6]
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d006      	beq.n	80033bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033ae:	4a05      	ldr	r2, [pc, #20]	@ (80033c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033b0:	88fb      	ldrh	r3, [r7, #6]
 80033b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033b4:	88fb      	ldrh	r3, [r7, #6]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 f806 	bl	80033c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80033bc:	bf00      	nop
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40010400 	.word	0x40010400

080033c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
	...

080033e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80033e4:	4b04      	ldr	r3, [pc, #16]	@ (80033f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40007000 	.word	0x40007000

080033fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800340a:	d130      	bne.n	800346e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800340c:	4b23      	ldr	r3, [pc, #140]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003414:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003418:	d038      	beq.n	800348c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800341a:	4b20      	ldr	r3, [pc, #128]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003422:	4a1e      	ldr	r2, [pc, #120]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003424:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003428:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800342a:	4b1d      	ldr	r3, [pc, #116]	@ (80034a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2232      	movs	r2, #50	@ 0x32
 8003430:	fb02 f303 	mul.w	r3, r2, r3
 8003434:	4a1b      	ldr	r2, [pc, #108]	@ (80034a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003436:	fba2 2303 	umull	r2, r3, r2, r3
 800343a:	0c9b      	lsrs	r3, r3, #18
 800343c:	3301      	adds	r3, #1
 800343e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003440:	e002      	b.n	8003448 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	3b01      	subs	r3, #1
 8003446:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003448:	4b14      	ldr	r3, [pc, #80]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003450:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003454:	d102      	bne.n	800345c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1f2      	bne.n	8003442 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800345c:	4b0f      	ldr	r3, [pc, #60]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003464:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003468:	d110      	bne.n	800348c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e00f      	b.n	800348e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800346e:	4b0b      	ldr	r3, [pc, #44]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003476:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800347a:	d007      	beq.n	800348c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800347c:	4b07      	ldr	r3, [pc, #28]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003484:	4a05      	ldr	r2, [pc, #20]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003486:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800348a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40007000 	.word	0x40007000
 80034a0:	20000008 	.word	0x20000008
 80034a4:	431bde83 	.word	0x431bde83

080034a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b088      	sub	sp, #32
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e3ca      	b.n	8003c50 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034ba:	4b97      	ldr	r3, [pc, #604]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 030c 	and.w	r3, r3, #12
 80034c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034c4:	4b94      	ldr	r3, [pc, #592]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0303 	and.w	r3, r3, #3
 80034cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0310 	and.w	r3, r3, #16
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 80e4 	beq.w	80036a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d007      	beq.n	80034f2 <HAL_RCC_OscConfig+0x4a>
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	2b0c      	cmp	r3, #12
 80034e6:	f040 808b 	bne.w	8003600 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	f040 8087 	bne.w	8003600 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034f2:	4b89      	ldr	r3, [pc, #548]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d005      	beq.n	800350a <HAL_RCC_OscConfig+0x62>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e3a2      	b.n	8003c50 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1a      	ldr	r2, [r3, #32]
 800350e:	4b82      	ldr	r3, [pc, #520]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0308 	and.w	r3, r3, #8
 8003516:	2b00      	cmp	r3, #0
 8003518:	d004      	beq.n	8003524 <HAL_RCC_OscConfig+0x7c>
 800351a:	4b7f      	ldr	r3, [pc, #508]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003522:	e005      	b.n	8003530 <HAL_RCC_OscConfig+0x88>
 8003524:	4b7c      	ldr	r3, [pc, #496]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 8003526:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800352a:	091b      	lsrs	r3, r3, #4
 800352c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003530:	4293      	cmp	r3, r2
 8003532:	d223      	bcs.n	800357c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	4618      	mov	r0, r3
 800353a:	f000 fd55 	bl	8003fe8 <RCC_SetFlashLatencyFromMSIRange>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e383      	b.n	8003c50 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003548:	4b73      	ldr	r3, [pc, #460]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a72      	ldr	r2, [pc, #456]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 800354e:	f043 0308 	orr.w	r3, r3, #8
 8003552:	6013      	str	r3, [r2, #0]
 8003554:	4b70      	ldr	r3, [pc, #448]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	496d      	ldr	r1, [pc, #436]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 8003562:	4313      	orrs	r3, r2
 8003564:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003566:	4b6c      	ldr	r3, [pc, #432]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	021b      	lsls	r3, r3, #8
 8003574:	4968      	ldr	r1, [pc, #416]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 8003576:	4313      	orrs	r3, r2
 8003578:	604b      	str	r3, [r1, #4]
 800357a:	e025      	b.n	80035c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800357c:	4b66      	ldr	r3, [pc, #408]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a65      	ldr	r2, [pc, #404]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 8003582:	f043 0308 	orr.w	r3, r3, #8
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	4b63      	ldr	r3, [pc, #396]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	4960      	ldr	r1, [pc, #384]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 8003596:	4313      	orrs	r3, r2
 8003598:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800359a:	4b5f      	ldr	r3, [pc, #380]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	021b      	lsls	r3, r3, #8
 80035a8:	495b      	ldr	r1, [pc, #364]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d109      	bne.n	80035c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 fd15 	bl	8003fe8 <RCC_SetFlashLatencyFromMSIRange>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e343      	b.n	8003c50 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035c8:	f000 fc4a 	bl	8003e60 <HAL_RCC_GetSysClockFreq>
 80035cc:	4602      	mov	r2, r0
 80035ce:	4b52      	ldr	r3, [pc, #328]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	091b      	lsrs	r3, r3, #4
 80035d4:	f003 030f 	and.w	r3, r3, #15
 80035d8:	4950      	ldr	r1, [pc, #320]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 80035da:	5ccb      	ldrb	r3, [r1, r3]
 80035dc:	f003 031f 	and.w	r3, r3, #31
 80035e0:	fa22 f303 	lsr.w	r3, r2, r3
 80035e4:	4a4e      	ldr	r2, [pc, #312]	@ (8003720 <HAL_RCC_OscConfig+0x278>)
 80035e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80035e8:	4b4e      	ldr	r3, [pc, #312]	@ (8003724 <HAL_RCC_OscConfig+0x27c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fe ff05 	bl	80023fc <HAL_InitTick>
 80035f2:	4603      	mov	r3, r0
 80035f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d052      	beq.n	80036a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	e327      	b.n	8003c50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d032      	beq.n	800366e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003608:	4b43      	ldr	r3, [pc, #268]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a42      	ldr	r2, [pc, #264]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 800360e:	f043 0301 	orr.w	r3, r3, #1
 8003612:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003614:	f7fe ff42 	bl	800249c <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800361c:	f7fe ff3e 	bl	800249c <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e310      	b.n	8003c50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800362e:	4b3a      	ldr	r3, [pc, #232]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0f0      	beq.n	800361c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800363a:	4b37      	ldr	r3, [pc, #220]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a36      	ldr	r2, [pc, #216]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 8003640:	f043 0308 	orr.w	r3, r3, #8
 8003644:	6013      	str	r3, [r2, #0]
 8003646:	4b34      	ldr	r3, [pc, #208]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	4931      	ldr	r1, [pc, #196]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 8003654:	4313      	orrs	r3, r2
 8003656:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003658:	4b2f      	ldr	r3, [pc, #188]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	021b      	lsls	r3, r3, #8
 8003666:	492c      	ldr	r1, [pc, #176]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 8003668:	4313      	orrs	r3, r2
 800366a:	604b      	str	r3, [r1, #4]
 800366c:	e01a      	b.n	80036a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800366e:	4b2a      	ldr	r3, [pc, #168]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a29      	ldr	r2, [pc, #164]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 8003674:	f023 0301 	bic.w	r3, r3, #1
 8003678:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800367a:	f7fe ff0f 	bl	800249c <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003680:	e008      	b.n	8003694 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003682:	f7fe ff0b 	bl	800249c <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e2dd      	b.n	8003c50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003694:	4b20      	ldr	r3, [pc, #128]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1f0      	bne.n	8003682 <HAL_RCC_OscConfig+0x1da>
 80036a0:	e000      	b.n	80036a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d074      	beq.n	800379a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d005      	beq.n	80036c2 <HAL_RCC_OscConfig+0x21a>
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	2b0c      	cmp	r3, #12
 80036ba:	d10e      	bne.n	80036da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2b03      	cmp	r3, #3
 80036c0:	d10b      	bne.n	80036da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c2:	4b15      	ldr	r3, [pc, #84]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d064      	beq.n	8003798 <HAL_RCC_OscConfig+0x2f0>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d160      	bne.n	8003798 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e2ba      	b.n	8003c50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036e2:	d106      	bne.n	80036f2 <HAL_RCC_OscConfig+0x24a>
 80036e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a0b      	ldr	r2, [pc, #44]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 80036ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036ee:	6013      	str	r3, [r2, #0]
 80036f0:	e026      	b.n	8003740 <HAL_RCC_OscConfig+0x298>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036fa:	d115      	bne.n	8003728 <HAL_RCC_OscConfig+0x280>
 80036fc:	4b06      	ldr	r3, [pc, #24]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a05      	ldr	r2, [pc, #20]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 8003702:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	4b03      	ldr	r3, [pc, #12]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a02      	ldr	r2, [pc, #8]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 800370e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003712:	6013      	str	r3, [r2, #0]
 8003714:	e014      	b.n	8003740 <HAL_RCC_OscConfig+0x298>
 8003716:	bf00      	nop
 8003718:	40021000 	.word	0x40021000
 800371c:	08007dd8 	.word	0x08007dd8
 8003720:	20000008 	.word	0x20000008
 8003724:	2000000c 	.word	0x2000000c
 8003728:	4ba0      	ldr	r3, [pc, #640]	@ (80039ac <HAL_RCC_OscConfig+0x504>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a9f      	ldr	r2, [pc, #636]	@ (80039ac <HAL_RCC_OscConfig+0x504>)
 800372e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003732:	6013      	str	r3, [r2, #0]
 8003734:	4b9d      	ldr	r3, [pc, #628]	@ (80039ac <HAL_RCC_OscConfig+0x504>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a9c      	ldr	r2, [pc, #624]	@ (80039ac <HAL_RCC_OscConfig+0x504>)
 800373a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800373e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d013      	beq.n	8003770 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003748:	f7fe fea8 	bl	800249c <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003750:	f7fe fea4 	bl	800249c <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b64      	cmp	r3, #100	@ 0x64
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e276      	b.n	8003c50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003762:	4b92      	ldr	r3, [pc, #584]	@ (80039ac <HAL_RCC_OscConfig+0x504>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0f0      	beq.n	8003750 <HAL_RCC_OscConfig+0x2a8>
 800376e:	e014      	b.n	800379a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003770:	f7fe fe94 	bl	800249c <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003778:	f7fe fe90 	bl	800249c <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b64      	cmp	r3, #100	@ 0x64
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e262      	b.n	8003c50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800378a:	4b88      	ldr	r3, [pc, #544]	@ (80039ac <HAL_RCC_OscConfig+0x504>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1f0      	bne.n	8003778 <HAL_RCC_OscConfig+0x2d0>
 8003796:	e000      	b.n	800379a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d060      	beq.n	8003868 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d005      	beq.n	80037b8 <HAL_RCC_OscConfig+0x310>
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	2b0c      	cmp	r3, #12
 80037b0:	d119      	bne.n	80037e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d116      	bne.n	80037e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037b8:	4b7c      	ldr	r3, [pc, #496]	@ (80039ac <HAL_RCC_OscConfig+0x504>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d005      	beq.n	80037d0 <HAL_RCC_OscConfig+0x328>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e23f      	b.n	8003c50 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d0:	4b76      	ldr	r3, [pc, #472]	@ (80039ac <HAL_RCC_OscConfig+0x504>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	061b      	lsls	r3, r3, #24
 80037de:	4973      	ldr	r1, [pc, #460]	@ (80039ac <HAL_RCC_OscConfig+0x504>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037e4:	e040      	b.n	8003868 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d023      	beq.n	8003836 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037ee:	4b6f      	ldr	r3, [pc, #444]	@ (80039ac <HAL_RCC_OscConfig+0x504>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a6e      	ldr	r2, [pc, #440]	@ (80039ac <HAL_RCC_OscConfig+0x504>)
 80037f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fa:	f7fe fe4f 	bl	800249c <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003802:	f7fe fe4b 	bl	800249c <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e21d      	b.n	8003c50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003814:	4b65      	ldr	r3, [pc, #404]	@ (80039ac <HAL_RCC_OscConfig+0x504>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800381c:	2b00      	cmp	r3, #0
 800381e:	d0f0      	beq.n	8003802 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003820:	4b62      	ldr	r3, [pc, #392]	@ (80039ac <HAL_RCC_OscConfig+0x504>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	061b      	lsls	r3, r3, #24
 800382e:	495f      	ldr	r1, [pc, #380]	@ (80039ac <HAL_RCC_OscConfig+0x504>)
 8003830:	4313      	orrs	r3, r2
 8003832:	604b      	str	r3, [r1, #4]
 8003834:	e018      	b.n	8003868 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003836:	4b5d      	ldr	r3, [pc, #372]	@ (80039ac <HAL_RCC_OscConfig+0x504>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a5c      	ldr	r2, [pc, #368]	@ (80039ac <HAL_RCC_OscConfig+0x504>)
 800383c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003840:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003842:	f7fe fe2b 	bl	800249c <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800384a:	f7fe fe27 	bl	800249c <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e1f9      	b.n	8003c50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800385c:	4b53      	ldr	r3, [pc, #332]	@ (80039ac <HAL_RCC_OscConfig+0x504>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1f0      	bne.n	800384a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b00      	cmp	r3, #0
 8003872:	d03c      	beq.n	80038ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d01c      	beq.n	80038b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800387c:	4b4b      	ldr	r3, [pc, #300]	@ (80039ac <HAL_RCC_OscConfig+0x504>)
 800387e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003882:	4a4a      	ldr	r2, [pc, #296]	@ (80039ac <HAL_RCC_OscConfig+0x504>)
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800388c:	f7fe fe06 	bl	800249c <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003894:	f7fe fe02 	bl	800249c <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e1d4      	b.n	8003c50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038a6:	4b41      	ldr	r3, [pc, #260]	@ (80039ac <HAL_RCC_OscConfig+0x504>)
 80038a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0ef      	beq.n	8003894 <HAL_RCC_OscConfig+0x3ec>
 80038b4:	e01b      	b.n	80038ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038b6:	4b3d      	ldr	r3, [pc, #244]	@ (80039ac <HAL_RCC_OscConfig+0x504>)
 80038b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038bc:	4a3b      	ldr	r2, [pc, #236]	@ (80039ac <HAL_RCC_OscConfig+0x504>)
 80038be:	f023 0301 	bic.w	r3, r3, #1
 80038c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c6:	f7fe fde9 	bl	800249c <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ce:	f7fe fde5 	bl	800249c <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e1b7      	b.n	8003c50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038e0:	4b32      	ldr	r3, [pc, #200]	@ (80039ac <HAL_RCC_OscConfig+0x504>)
 80038e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1ef      	bne.n	80038ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0304 	and.w	r3, r3, #4
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 80a6 	beq.w	8003a48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038fc:	2300      	movs	r3, #0
 80038fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003900:	4b2a      	ldr	r3, [pc, #168]	@ (80039ac <HAL_RCC_OscConfig+0x504>)
 8003902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003904:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10d      	bne.n	8003928 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800390c:	4b27      	ldr	r3, [pc, #156]	@ (80039ac <HAL_RCC_OscConfig+0x504>)
 800390e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003910:	4a26      	ldr	r2, [pc, #152]	@ (80039ac <HAL_RCC_OscConfig+0x504>)
 8003912:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003916:	6593      	str	r3, [r2, #88]	@ 0x58
 8003918:	4b24      	ldr	r3, [pc, #144]	@ (80039ac <HAL_RCC_OscConfig+0x504>)
 800391a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800391c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003920:	60bb      	str	r3, [r7, #8]
 8003922:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003924:	2301      	movs	r3, #1
 8003926:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003928:	4b21      	ldr	r3, [pc, #132]	@ (80039b0 <HAL_RCC_OscConfig+0x508>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003930:	2b00      	cmp	r3, #0
 8003932:	d118      	bne.n	8003966 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003934:	4b1e      	ldr	r3, [pc, #120]	@ (80039b0 <HAL_RCC_OscConfig+0x508>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a1d      	ldr	r2, [pc, #116]	@ (80039b0 <HAL_RCC_OscConfig+0x508>)
 800393a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800393e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003940:	f7fe fdac 	bl	800249c <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003948:	f7fe fda8 	bl	800249c <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e17a      	b.n	8003c50 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800395a:	4b15      	ldr	r3, [pc, #84]	@ (80039b0 <HAL_RCC_OscConfig+0x508>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0f0      	beq.n	8003948 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d108      	bne.n	8003980 <HAL_RCC_OscConfig+0x4d8>
 800396e:	4b0f      	ldr	r3, [pc, #60]	@ (80039ac <HAL_RCC_OscConfig+0x504>)
 8003970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003974:	4a0d      	ldr	r2, [pc, #52]	@ (80039ac <HAL_RCC_OscConfig+0x504>)
 8003976:	f043 0301 	orr.w	r3, r3, #1
 800397a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800397e:	e029      	b.n	80039d4 <HAL_RCC_OscConfig+0x52c>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	2b05      	cmp	r3, #5
 8003986:	d115      	bne.n	80039b4 <HAL_RCC_OscConfig+0x50c>
 8003988:	4b08      	ldr	r3, [pc, #32]	@ (80039ac <HAL_RCC_OscConfig+0x504>)
 800398a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800398e:	4a07      	ldr	r2, [pc, #28]	@ (80039ac <HAL_RCC_OscConfig+0x504>)
 8003990:	f043 0304 	orr.w	r3, r3, #4
 8003994:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003998:	4b04      	ldr	r3, [pc, #16]	@ (80039ac <HAL_RCC_OscConfig+0x504>)
 800399a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800399e:	4a03      	ldr	r2, [pc, #12]	@ (80039ac <HAL_RCC_OscConfig+0x504>)
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039a8:	e014      	b.n	80039d4 <HAL_RCC_OscConfig+0x52c>
 80039aa:	bf00      	nop
 80039ac:	40021000 	.word	0x40021000
 80039b0:	40007000 	.word	0x40007000
 80039b4:	4b9c      	ldr	r3, [pc, #624]	@ (8003c28 <HAL_RCC_OscConfig+0x780>)
 80039b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ba:	4a9b      	ldr	r2, [pc, #620]	@ (8003c28 <HAL_RCC_OscConfig+0x780>)
 80039bc:	f023 0301 	bic.w	r3, r3, #1
 80039c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039c4:	4b98      	ldr	r3, [pc, #608]	@ (8003c28 <HAL_RCC_OscConfig+0x780>)
 80039c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ca:	4a97      	ldr	r2, [pc, #604]	@ (8003c28 <HAL_RCC_OscConfig+0x780>)
 80039cc:	f023 0304 	bic.w	r3, r3, #4
 80039d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d016      	beq.n	8003a0a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039dc:	f7fe fd5e 	bl	800249c <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039e2:	e00a      	b.n	80039fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039e4:	f7fe fd5a 	bl	800249c <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e12a      	b.n	8003c50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039fa:	4b8b      	ldr	r3, [pc, #556]	@ (8003c28 <HAL_RCC_OscConfig+0x780>)
 80039fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0ed      	beq.n	80039e4 <HAL_RCC_OscConfig+0x53c>
 8003a08:	e015      	b.n	8003a36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a0a:	f7fe fd47 	bl	800249c <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a10:	e00a      	b.n	8003a28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a12:	f7fe fd43 	bl	800249c <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e113      	b.n	8003c50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a28:	4b7f      	ldr	r3, [pc, #508]	@ (8003c28 <HAL_RCC_OscConfig+0x780>)
 8003a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1ed      	bne.n	8003a12 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a36:	7ffb      	ldrb	r3, [r7, #31]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d105      	bne.n	8003a48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a3c:	4b7a      	ldr	r3, [pc, #488]	@ (8003c28 <HAL_RCC_OscConfig+0x780>)
 8003a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a40:	4a79      	ldr	r2, [pc, #484]	@ (8003c28 <HAL_RCC_OscConfig+0x780>)
 8003a42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a46:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 80fe 	beq.w	8003c4e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	f040 80d0 	bne.w	8003bfc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a5c:	4b72      	ldr	r3, [pc, #456]	@ (8003c28 <HAL_RCC_OscConfig+0x780>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f003 0203 	and.w	r2, r3, #3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d130      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d127      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d11f      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003a9c:	2a07      	cmp	r2, #7
 8003a9e:	bf14      	ite	ne
 8003aa0:	2201      	movne	r2, #1
 8003aa2:	2200      	moveq	r2, #0
 8003aa4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d113      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab4:	085b      	lsrs	r3, r3, #1
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d109      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac8:	085b      	lsrs	r3, r3, #1
 8003aca:	3b01      	subs	r3, #1
 8003acc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d06e      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	2b0c      	cmp	r3, #12
 8003ad6:	d069      	beq.n	8003bac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ad8:	4b53      	ldr	r3, [pc, #332]	@ (8003c28 <HAL_RCC_OscConfig+0x780>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d105      	bne.n	8003af0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ae4:	4b50      	ldr	r3, [pc, #320]	@ (8003c28 <HAL_RCC_OscConfig+0x780>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e0ad      	b.n	8003c50 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003af4:	4b4c      	ldr	r3, [pc, #304]	@ (8003c28 <HAL_RCC_OscConfig+0x780>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a4b      	ldr	r2, [pc, #300]	@ (8003c28 <HAL_RCC_OscConfig+0x780>)
 8003afa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003afe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b00:	f7fe fccc 	bl	800249c <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b08:	f7fe fcc8 	bl	800249c <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e09a      	b.n	8003c50 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b1a:	4b43      	ldr	r3, [pc, #268]	@ (8003c28 <HAL_RCC_OscConfig+0x780>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1f0      	bne.n	8003b08 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b26:	4b40      	ldr	r3, [pc, #256]	@ (8003c28 <HAL_RCC_OscConfig+0x780>)
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	4b40      	ldr	r3, [pc, #256]	@ (8003c2c <HAL_RCC_OscConfig+0x784>)
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003b36:	3a01      	subs	r2, #1
 8003b38:	0112      	lsls	r2, r2, #4
 8003b3a:	4311      	orrs	r1, r2
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003b40:	0212      	lsls	r2, r2, #8
 8003b42:	4311      	orrs	r1, r2
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b48:	0852      	lsrs	r2, r2, #1
 8003b4a:	3a01      	subs	r2, #1
 8003b4c:	0552      	lsls	r2, r2, #21
 8003b4e:	4311      	orrs	r1, r2
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003b54:	0852      	lsrs	r2, r2, #1
 8003b56:	3a01      	subs	r2, #1
 8003b58:	0652      	lsls	r2, r2, #25
 8003b5a:	4311      	orrs	r1, r2
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003b60:	0912      	lsrs	r2, r2, #4
 8003b62:	0452      	lsls	r2, r2, #17
 8003b64:	430a      	orrs	r2, r1
 8003b66:	4930      	ldr	r1, [pc, #192]	@ (8003c28 <HAL_RCC_OscConfig+0x780>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b6c:	4b2e      	ldr	r3, [pc, #184]	@ (8003c28 <HAL_RCC_OscConfig+0x780>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a2d      	ldr	r2, [pc, #180]	@ (8003c28 <HAL_RCC_OscConfig+0x780>)
 8003b72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b78:	4b2b      	ldr	r3, [pc, #172]	@ (8003c28 <HAL_RCC_OscConfig+0x780>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	4a2a      	ldr	r2, [pc, #168]	@ (8003c28 <HAL_RCC_OscConfig+0x780>)
 8003b7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b84:	f7fe fc8a 	bl	800249c <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b8c:	f7fe fc86 	bl	800249c <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e058      	b.n	8003c50 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b9e:	4b22      	ldr	r3, [pc, #136]	@ (8003c28 <HAL_RCC_OscConfig+0x780>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0f0      	beq.n	8003b8c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003baa:	e050      	b.n	8003c4e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e04f      	b.n	8003c50 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8003c28 <HAL_RCC_OscConfig+0x780>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d148      	bne.n	8003c4e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8003c28 <HAL_RCC_OscConfig+0x780>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a19      	ldr	r2, [pc, #100]	@ (8003c28 <HAL_RCC_OscConfig+0x780>)
 8003bc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bc6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bc8:	4b17      	ldr	r3, [pc, #92]	@ (8003c28 <HAL_RCC_OscConfig+0x780>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	4a16      	ldr	r2, [pc, #88]	@ (8003c28 <HAL_RCC_OscConfig+0x780>)
 8003bce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bd2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bd4:	f7fe fc62 	bl	800249c <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bdc:	f7fe fc5e 	bl	800249c <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e030      	b.n	8003c50 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bee:	4b0e      	ldr	r3, [pc, #56]	@ (8003c28 <HAL_RCC_OscConfig+0x780>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0f0      	beq.n	8003bdc <HAL_RCC_OscConfig+0x734>
 8003bfa:	e028      	b.n	8003c4e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	2b0c      	cmp	r3, #12
 8003c00:	d023      	beq.n	8003c4a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c02:	4b09      	ldr	r3, [pc, #36]	@ (8003c28 <HAL_RCC_OscConfig+0x780>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a08      	ldr	r2, [pc, #32]	@ (8003c28 <HAL_RCC_OscConfig+0x780>)
 8003c08:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0e:	f7fe fc45 	bl	800249c <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c14:	e00c      	b.n	8003c30 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c16:	f7fe fc41 	bl	800249c <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d905      	bls.n	8003c30 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e013      	b.n	8003c50 <HAL_RCC_OscConfig+0x7a8>
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c30:	4b09      	ldr	r3, [pc, #36]	@ (8003c58 <HAL_RCC_OscConfig+0x7b0>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1ec      	bne.n	8003c16 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c3c:	4b06      	ldr	r3, [pc, #24]	@ (8003c58 <HAL_RCC_OscConfig+0x7b0>)
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	4905      	ldr	r1, [pc, #20]	@ (8003c58 <HAL_RCC_OscConfig+0x7b0>)
 8003c42:	4b06      	ldr	r3, [pc, #24]	@ (8003c5c <HAL_RCC_OscConfig+0x7b4>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	60cb      	str	r3, [r1, #12]
 8003c48:	e001      	b.n	8003c4e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e000      	b.n	8003c50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3720      	adds	r7, #32
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	feeefffc 	.word	0xfeeefffc

08003c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e0e7      	b.n	8003e44 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c74:	4b75      	ldr	r3, [pc, #468]	@ (8003e4c <HAL_RCC_ClockConfig+0x1ec>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d910      	bls.n	8003ca4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c82:	4b72      	ldr	r3, [pc, #456]	@ (8003e4c <HAL_RCC_ClockConfig+0x1ec>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f023 0207 	bic.w	r2, r3, #7
 8003c8a:	4970      	ldr	r1, [pc, #448]	@ (8003e4c <HAL_RCC_ClockConfig+0x1ec>)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c92:	4b6e      	ldr	r3, [pc, #440]	@ (8003e4c <HAL_RCC_ClockConfig+0x1ec>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e0cf      	b.n	8003e44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d010      	beq.n	8003cd2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	4b66      	ldr	r3, [pc, #408]	@ (8003e50 <HAL_RCC_ClockConfig+0x1f0>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d908      	bls.n	8003cd2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cc0:	4b63      	ldr	r3, [pc, #396]	@ (8003e50 <HAL_RCC_ClockConfig+0x1f0>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	4960      	ldr	r1, [pc, #384]	@ (8003e50 <HAL_RCC_ClockConfig+0x1f0>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d04c      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2b03      	cmp	r3, #3
 8003ce4:	d107      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ce6:	4b5a      	ldr	r3, [pc, #360]	@ (8003e50 <HAL_RCC_ClockConfig+0x1f0>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d121      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e0a6      	b.n	8003e44 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d107      	bne.n	8003d0e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cfe:	4b54      	ldr	r3, [pc, #336]	@ (8003e50 <HAL_RCC_ClockConfig+0x1f0>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d115      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e09a      	b.n	8003e44 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d107      	bne.n	8003d26 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d16:	4b4e      	ldr	r3, [pc, #312]	@ (8003e50 <HAL_RCC_ClockConfig+0x1f0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d109      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e08e      	b.n	8003e44 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d26:	4b4a      	ldr	r3, [pc, #296]	@ (8003e50 <HAL_RCC_ClockConfig+0x1f0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e086      	b.n	8003e44 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d36:	4b46      	ldr	r3, [pc, #280]	@ (8003e50 <HAL_RCC_ClockConfig+0x1f0>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f023 0203 	bic.w	r2, r3, #3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	4943      	ldr	r1, [pc, #268]	@ (8003e50 <HAL_RCC_ClockConfig+0x1f0>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d48:	f7fe fba8 	bl	800249c <HAL_GetTick>
 8003d4c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4e:	e00a      	b.n	8003d66 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d50:	f7fe fba4 	bl	800249c <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e06e      	b.n	8003e44 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d66:	4b3a      	ldr	r3, [pc, #232]	@ (8003e50 <HAL_RCC_ClockConfig+0x1f0>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 020c 	and.w	r2, r3, #12
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d1eb      	bne.n	8003d50 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d010      	beq.n	8003da6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	4b31      	ldr	r3, [pc, #196]	@ (8003e50 <HAL_RCC_ClockConfig+0x1f0>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d208      	bcs.n	8003da6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d94:	4b2e      	ldr	r3, [pc, #184]	@ (8003e50 <HAL_RCC_ClockConfig+0x1f0>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	492b      	ldr	r1, [pc, #172]	@ (8003e50 <HAL_RCC_ClockConfig+0x1f0>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003da6:	4b29      	ldr	r3, [pc, #164]	@ (8003e4c <HAL_RCC_ClockConfig+0x1ec>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d210      	bcs.n	8003dd6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db4:	4b25      	ldr	r3, [pc, #148]	@ (8003e4c <HAL_RCC_ClockConfig+0x1ec>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f023 0207 	bic.w	r2, r3, #7
 8003dbc:	4923      	ldr	r1, [pc, #140]	@ (8003e4c <HAL_RCC_ClockConfig+0x1ec>)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc4:	4b21      	ldr	r3, [pc, #132]	@ (8003e4c <HAL_RCC_ClockConfig+0x1ec>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d001      	beq.n	8003dd6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e036      	b.n	8003e44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0304 	and.w	r3, r3, #4
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d008      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003de2:	4b1b      	ldr	r3, [pc, #108]	@ (8003e50 <HAL_RCC_ClockConfig+0x1f0>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	4918      	ldr	r1, [pc, #96]	@ (8003e50 <HAL_RCC_ClockConfig+0x1f0>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d009      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e00:	4b13      	ldr	r3, [pc, #76]	@ (8003e50 <HAL_RCC_ClockConfig+0x1f0>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	4910      	ldr	r1, [pc, #64]	@ (8003e50 <HAL_RCC_ClockConfig+0x1f0>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e14:	f000 f824 	bl	8003e60 <HAL_RCC_GetSysClockFreq>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e50 <HAL_RCC_ClockConfig+0x1f0>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	091b      	lsrs	r3, r3, #4
 8003e20:	f003 030f 	and.w	r3, r3, #15
 8003e24:	490b      	ldr	r1, [pc, #44]	@ (8003e54 <HAL_RCC_ClockConfig+0x1f4>)
 8003e26:	5ccb      	ldrb	r3, [r1, r3]
 8003e28:	f003 031f 	and.w	r3, r3, #31
 8003e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e30:	4a09      	ldr	r2, [pc, #36]	@ (8003e58 <HAL_RCC_ClockConfig+0x1f8>)
 8003e32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e34:	4b09      	ldr	r3, [pc, #36]	@ (8003e5c <HAL_RCC_ClockConfig+0x1fc>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7fe fadf 	bl	80023fc <HAL_InitTick>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e42:	7afb      	ldrb	r3, [r7, #11]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40022000 	.word	0x40022000
 8003e50:	40021000 	.word	0x40021000
 8003e54:	08007dd8 	.word	0x08007dd8
 8003e58:	20000008 	.word	0x20000008
 8003e5c:	2000000c 	.word	0x2000000c

08003e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b089      	sub	sp, #36	@ 0x24
 8003e64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61fb      	str	r3, [r7, #28]
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e6e:	4b3e      	ldr	r3, [pc, #248]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 030c 	and.w	r3, r3, #12
 8003e76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e78:	4b3b      	ldr	r3, [pc, #236]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f003 0303 	and.w	r3, r3, #3
 8003e80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d005      	beq.n	8003e94 <HAL_RCC_GetSysClockFreq+0x34>
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	2b0c      	cmp	r3, #12
 8003e8c:	d121      	bne.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d11e      	bne.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e94:	4b34      	ldr	r3, [pc, #208]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d107      	bne.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ea0:	4b31      	ldr	r3, [pc, #196]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ea6:	0a1b      	lsrs	r3, r3, #8
 8003ea8:	f003 030f 	and.w	r3, r3, #15
 8003eac:	61fb      	str	r3, [r7, #28]
 8003eae:	e005      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003eb0:	4b2d      	ldr	r3, [pc, #180]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	091b      	lsrs	r3, r3, #4
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ebc:	4a2b      	ldr	r2, [pc, #172]	@ (8003f6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ec4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10d      	bne.n	8003ee8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ed0:	e00a      	b.n	8003ee8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	2b04      	cmp	r3, #4
 8003ed6:	d102      	bne.n	8003ede <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ed8:	4b25      	ldr	r3, [pc, #148]	@ (8003f70 <HAL_RCC_GetSysClockFreq+0x110>)
 8003eda:	61bb      	str	r3, [r7, #24]
 8003edc:	e004      	b.n	8003ee8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	2b08      	cmp	r3, #8
 8003ee2:	d101      	bne.n	8003ee8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ee4:	4b23      	ldr	r3, [pc, #140]	@ (8003f74 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ee6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	2b0c      	cmp	r3, #12
 8003eec:	d134      	bne.n	8003f58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003eee:	4b1e      	ldr	r3, [pc, #120]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d003      	beq.n	8003f06 <HAL_RCC_GetSysClockFreq+0xa6>
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	2b03      	cmp	r3, #3
 8003f02:	d003      	beq.n	8003f0c <HAL_RCC_GetSysClockFreq+0xac>
 8003f04:	e005      	b.n	8003f12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f06:	4b1a      	ldr	r3, [pc, #104]	@ (8003f70 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f08:	617b      	str	r3, [r7, #20]
      break;
 8003f0a:	e005      	b.n	8003f18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f0c:	4b19      	ldr	r3, [pc, #100]	@ (8003f74 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f0e:	617b      	str	r3, [r7, #20]
      break;
 8003f10:	e002      	b.n	8003f18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	617b      	str	r3, [r7, #20]
      break;
 8003f16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f18:	4b13      	ldr	r3, [pc, #76]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	091b      	lsrs	r3, r3, #4
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	3301      	adds	r3, #1
 8003f24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f26:	4b10      	ldr	r3, [pc, #64]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	0a1b      	lsrs	r3, r3, #8
 8003f2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	fb03 f202 	mul.w	r2, r3, r2
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	0e5b      	lsrs	r3, r3, #25
 8003f44:	f003 0303 	and.w	r3, r3, #3
 8003f48:	3301      	adds	r3, #1
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f58:	69bb      	ldr	r3, [r7, #24]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3724      	adds	r7, #36	@ 0x24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	08007df0 	.word	0x08007df0
 8003f70:	00f42400 	.word	0x00f42400
 8003f74:	007a1200 	.word	0x007a1200

08003f78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f7c:	4b03      	ldr	r3, [pc, #12]	@ (8003f8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	20000008 	.word	0x20000008

08003f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f94:	f7ff fff0 	bl	8003f78 <HAL_RCC_GetHCLKFreq>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	4b06      	ldr	r3, [pc, #24]	@ (8003fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	0a1b      	lsrs	r3, r3, #8
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	4904      	ldr	r1, [pc, #16]	@ (8003fb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fa6:	5ccb      	ldrb	r3, [r1, r3]
 8003fa8:	f003 031f 	and.w	r3, r3, #31
 8003fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	08007de8 	.word	0x08007de8

08003fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003fc0:	f7ff ffda 	bl	8003f78 <HAL_RCC_GetHCLKFreq>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	4b06      	ldr	r3, [pc, #24]	@ (8003fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	0adb      	lsrs	r3, r3, #11
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	4904      	ldr	r1, [pc, #16]	@ (8003fe4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fd2:	5ccb      	ldrb	r3, [r1, r3]
 8003fd4:	f003 031f 	and.w	r3, r3, #31
 8003fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	08007de8 	.word	0x08007de8

08003fe8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ff4:	4b2a      	ldr	r3, [pc, #168]	@ (80040a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004000:	f7ff f9ee 	bl	80033e0 <HAL_PWREx_GetVoltageRange>
 8004004:	6178      	str	r0, [r7, #20]
 8004006:	e014      	b.n	8004032 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004008:	4b25      	ldr	r3, [pc, #148]	@ (80040a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800400a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800400c:	4a24      	ldr	r2, [pc, #144]	@ (80040a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800400e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004012:	6593      	str	r3, [r2, #88]	@ 0x58
 8004014:	4b22      	ldr	r3, [pc, #136]	@ (80040a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004018:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004020:	f7ff f9de 	bl	80033e0 <HAL_PWREx_GetVoltageRange>
 8004024:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004026:	4b1e      	ldr	r3, [pc, #120]	@ (80040a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800402a:	4a1d      	ldr	r2, [pc, #116]	@ (80040a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800402c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004030:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004038:	d10b      	bne.n	8004052 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b80      	cmp	r3, #128	@ 0x80
 800403e:	d919      	bls.n	8004074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2ba0      	cmp	r3, #160	@ 0xa0
 8004044:	d902      	bls.n	800404c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004046:	2302      	movs	r3, #2
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	e013      	b.n	8004074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800404c:	2301      	movs	r3, #1
 800404e:	613b      	str	r3, [r7, #16]
 8004050:	e010      	b.n	8004074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b80      	cmp	r3, #128	@ 0x80
 8004056:	d902      	bls.n	800405e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004058:	2303      	movs	r3, #3
 800405a:	613b      	str	r3, [r7, #16]
 800405c:	e00a      	b.n	8004074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b80      	cmp	r3, #128	@ 0x80
 8004062:	d102      	bne.n	800406a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004064:	2302      	movs	r3, #2
 8004066:	613b      	str	r3, [r7, #16]
 8004068:	e004      	b.n	8004074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b70      	cmp	r3, #112	@ 0x70
 800406e:	d101      	bne.n	8004074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004070:	2301      	movs	r3, #1
 8004072:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004074:	4b0b      	ldr	r3, [pc, #44]	@ (80040a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f023 0207 	bic.w	r2, r3, #7
 800407c:	4909      	ldr	r1, [pc, #36]	@ (80040a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	4313      	orrs	r3, r2
 8004082:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004084:	4b07      	ldr	r3, [pc, #28]	@ (80040a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	429a      	cmp	r2, r3
 8004090:	d001      	beq.n	8004096 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e000      	b.n	8004098 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3718      	adds	r7, #24
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40021000 	.word	0x40021000
 80040a4:	40022000 	.word	0x40022000

080040a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040b0:	2300      	movs	r3, #0
 80040b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040b4:	2300      	movs	r3, #0
 80040b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d041      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040c8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80040cc:	d02a      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80040ce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80040d2:	d824      	bhi.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80040d8:	d008      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80040da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80040de:	d81e      	bhi.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00a      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80040e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040e8:	d010      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040ea:	e018      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040ec:	4b86      	ldr	r3, [pc, #536]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	4a85      	ldr	r2, [pc, #532]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040f8:	e015      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	3304      	adds	r3, #4
 80040fe:	2100      	movs	r1, #0
 8004100:	4618      	mov	r0, r3
 8004102:	f000 fabb 	bl	800467c <RCCEx_PLLSAI1_Config>
 8004106:	4603      	mov	r3, r0
 8004108:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800410a:	e00c      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	3320      	adds	r3, #32
 8004110:	2100      	movs	r1, #0
 8004112:	4618      	mov	r0, r3
 8004114:	f000 fba6 	bl	8004864 <RCCEx_PLLSAI2_Config>
 8004118:	4603      	mov	r3, r0
 800411a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800411c:	e003      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	74fb      	strb	r3, [r7, #19]
      break;
 8004122:	e000      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004124:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004126:	7cfb      	ldrb	r3, [r7, #19]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10b      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800412c:	4b76      	ldr	r3, [pc, #472]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800412e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004132:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800413a:	4973      	ldr	r1, [pc, #460]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800413c:	4313      	orrs	r3, r2
 800413e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004142:	e001      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004144:	7cfb      	ldrb	r3, [r7, #19]
 8004146:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d041      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004158:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800415c:	d02a      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800415e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004162:	d824      	bhi.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004164:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004168:	d008      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800416a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800416e:	d81e      	bhi.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004174:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004178:	d010      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800417a:	e018      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800417c:	4b62      	ldr	r3, [pc, #392]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	4a61      	ldr	r2, [pc, #388]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004182:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004186:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004188:	e015      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3304      	adds	r3, #4
 800418e:	2100      	movs	r1, #0
 8004190:	4618      	mov	r0, r3
 8004192:	f000 fa73 	bl	800467c <RCCEx_PLLSAI1_Config>
 8004196:	4603      	mov	r3, r0
 8004198:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800419a:	e00c      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3320      	adds	r3, #32
 80041a0:	2100      	movs	r1, #0
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fb5e 	bl	8004864 <RCCEx_PLLSAI2_Config>
 80041a8:	4603      	mov	r3, r0
 80041aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041ac:	e003      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	74fb      	strb	r3, [r7, #19]
      break;
 80041b2:	e000      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80041b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041b6:	7cfb      	ldrb	r3, [r7, #19]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10b      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041bc:	4b52      	ldr	r3, [pc, #328]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041ca:	494f      	ldr	r1, [pc, #316]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80041d2:	e001      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d4:	7cfb      	ldrb	r3, [r7, #19]
 80041d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 80a0 	beq.w	8004326 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041e6:	2300      	movs	r3, #0
 80041e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041ea:	4b47      	ldr	r3, [pc, #284]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80041f6:	2301      	movs	r3, #1
 80041f8:	e000      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80041fa:	2300      	movs	r3, #0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00d      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004200:	4b41      	ldr	r3, [pc, #260]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004204:	4a40      	ldr	r2, [pc, #256]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004206:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800420a:	6593      	str	r3, [r2, #88]	@ 0x58
 800420c:	4b3e      	ldr	r3, [pc, #248]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800420e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004214:	60bb      	str	r3, [r7, #8]
 8004216:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004218:	2301      	movs	r3, #1
 800421a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800421c:	4b3b      	ldr	r3, [pc, #236]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a3a      	ldr	r2, [pc, #232]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004222:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004226:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004228:	f7fe f938 	bl	800249c <HAL_GetTick>
 800422c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800422e:	e009      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004230:	f7fe f934 	bl	800249c <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d902      	bls.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	74fb      	strb	r3, [r7, #19]
        break;
 8004242:	e005      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004244:	4b31      	ldr	r3, [pc, #196]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0ef      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004250:	7cfb      	ldrb	r3, [r7, #19]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d15c      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004256:	4b2c      	ldr	r3, [pc, #176]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800425c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004260:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d01f      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	429a      	cmp	r2, r3
 8004272:	d019      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004274:	4b24      	ldr	r3, [pc, #144]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800427a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800427e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004280:	4b21      	ldr	r3, [pc, #132]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004286:	4a20      	ldr	r2, [pc, #128]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004288:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800428c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004290:	4b1d      	ldr	r3, [pc, #116]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004296:	4a1c      	ldr	r2, [pc, #112]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004298:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800429c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042a0:	4a19      	ldr	r2, [pc, #100]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d016      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b2:	f7fe f8f3 	bl	800249c <HAL_GetTick>
 80042b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042b8:	e00b      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ba:	f7fe f8ef 	bl	800249c <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d902      	bls.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	74fb      	strb	r3, [r7, #19]
            break;
 80042d0:	e006      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0ec      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80042e0:	7cfb      	ldrb	r3, [r7, #19]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10c      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042e6:	4b08      	ldr	r3, [pc, #32]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042f6:	4904      	ldr	r1, [pc, #16]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80042fe:	e009      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004300:	7cfb      	ldrb	r3, [r7, #19]
 8004302:	74bb      	strb	r3, [r7, #18]
 8004304:	e006      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004306:	bf00      	nop
 8004308:	40021000 	.word	0x40021000
 800430c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004310:	7cfb      	ldrb	r3, [r7, #19]
 8004312:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004314:	7c7b      	ldrb	r3, [r7, #17]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d105      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800431a:	4b9e      	ldr	r3, [pc, #632]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800431c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800431e:	4a9d      	ldr	r2, [pc, #628]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004320:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004324:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004332:	4b98      	ldr	r3, [pc, #608]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004338:	f023 0203 	bic.w	r2, r3, #3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004340:	4994      	ldr	r1, [pc, #592]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004354:	4b8f      	ldr	r3, [pc, #572]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800435a:	f023 020c 	bic.w	r2, r3, #12
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004362:	498c      	ldr	r1, [pc, #560]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004376:	4b87      	ldr	r3, [pc, #540]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800437c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004384:	4983      	ldr	r1, [pc, #524]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0308 	and.w	r3, r3, #8
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00a      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004398:	4b7e      	ldr	r3, [pc, #504]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800439a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800439e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043a6:	497b      	ldr	r1, [pc, #492]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0310 	and.w	r3, r3, #16
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043ba:	4b76      	ldr	r3, [pc, #472]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043c8:	4972      	ldr	r1, [pc, #456]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0320 	and.w	r3, r3, #32
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00a      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043dc:	4b6d      	ldr	r3, [pc, #436]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ea:	496a      	ldr	r1, [pc, #424]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043fe:	4b65      	ldr	r3, [pc, #404]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004404:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800440c:	4961      	ldr	r1, [pc, #388]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00a      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004420:	4b5c      	ldr	r3, [pc, #368]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004426:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800442e:	4959      	ldr	r1, [pc, #356]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004442:	4b54      	ldr	r3, [pc, #336]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004448:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004450:	4950      	ldr	r1, [pc, #320]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00a      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004464:	4b4b      	ldr	r3, [pc, #300]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800446a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004472:	4948      	ldr	r1, [pc, #288]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004486:	4b43      	ldr	r3, [pc, #268]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800448c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004494:	493f      	ldr	r1, [pc, #252]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004496:	4313      	orrs	r3, r2
 8004498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d028      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044a8:	4b3a      	ldr	r3, [pc, #232]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044b6:	4937      	ldr	r1, [pc, #220]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044c6:	d106      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044c8:	4b32      	ldr	r3, [pc, #200]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	4a31      	ldr	r2, [pc, #196]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044d2:	60d3      	str	r3, [r2, #12]
 80044d4:	e011      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044de:	d10c      	bne.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3304      	adds	r3, #4
 80044e4:	2101      	movs	r1, #1
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 f8c8 	bl	800467c <RCCEx_PLLSAI1_Config>
 80044ec:	4603      	mov	r3, r0
 80044ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80044f0:	7cfb      	ldrb	r3, [r7, #19]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80044f6:	7cfb      	ldrb	r3, [r7, #19]
 80044f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d028      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004506:	4b23      	ldr	r3, [pc, #140]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800450c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004514:	491f      	ldr	r1, [pc, #124]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004516:	4313      	orrs	r3, r2
 8004518:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004520:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004524:	d106      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004526:	4b1b      	ldr	r3, [pc, #108]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	4a1a      	ldr	r2, [pc, #104]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800452c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004530:	60d3      	str	r3, [r2, #12]
 8004532:	e011      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004538:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800453c:	d10c      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3304      	adds	r3, #4
 8004542:	2101      	movs	r1, #1
 8004544:	4618      	mov	r0, r3
 8004546:	f000 f899 	bl	800467c <RCCEx_PLLSAI1_Config>
 800454a:	4603      	mov	r3, r0
 800454c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800454e:	7cfb      	ldrb	r3, [r7, #19]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004554:	7cfb      	ldrb	r3, [r7, #19]
 8004556:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d02b      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004564:	4b0b      	ldr	r3, [pc, #44]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800456a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004572:	4908      	ldr	r1, [pc, #32]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004574:	4313      	orrs	r3, r2
 8004576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800457e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004582:	d109      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004584:	4b03      	ldr	r3, [pc, #12]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	4a02      	ldr	r2, [pc, #8]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800458a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800458e:	60d3      	str	r3, [r2, #12]
 8004590:	e014      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004592:	bf00      	nop
 8004594:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800459c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045a0:	d10c      	bne.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	3304      	adds	r3, #4
 80045a6:	2101      	movs	r1, #1
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 f867 	bl	800467c <RCCEx_PLLSAI1_Config>
 80045ae:	4603      	mov	r3, r0
 80045b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045b2:	7cfb      	ldrb	r3, [r7, #19]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80045b8:	7cfb      	ldrb	r3, [r7, #19]
 80045ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d02f      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045c8:	4b2b      	ldr	r3, [pc, #172]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045d6:	4928      	ldr	r1, [pc, #160]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045e6:	d10d      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3304      	adds	r3, #4
 80045ec:	2102      	movs	r1, #2
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 f844 	bl	800467c <RCCEx_PLLSAI1_Config>
 80045f4:	4603      	mov	r3, r0
 80045f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045f8:	7cfb      	ldrb	r3, [r7, #19]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d014      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80045fe:	7cfb      	ldrb	r3, [r7, #19]
 8004600:	74bb      	strb	r3, [r7, #18]
 8004602:	e011      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004608:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800460c:	d10c      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	3320      	adds	r3, #32
 8004612:	2102      	movs	r1, #2
 8004614:	4618      	mov	r0, r3
 8004616:	f000 f925 	bl	8004864 <RCCEx_PLLSAI2_Config>
 800461a:	4603      	mov	r3, r0
 800461c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800461e:	7cfb      	ldrb	r3, [r7, #19]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004624:	7cfb      	ldrb	r3, [r7, #19]
 8004626:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00a      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004634:	4b10      	ldr	r3, [pc, #64]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800463a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004642:	490d      	ldr	r1, [pc, #52]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00b      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004656:	4b08      	ldr	r3, [pc, #32]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800465c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004666:	4904      	ldr	r1, [pc, #16]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004668:	4313      	orrs	r3, r2
 800466a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800466e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40021000 	.word	0x40021000

0800467c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800468a:	4b75      	ldr	r3, [pc, #468]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d018      	beq.n	80046c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004696:	4b72      	ldr	r3, [pc, #456]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f003 0203 	and.w	r2, r3, #3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d10d      	bne.n	80046c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
       ||
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d009      	beq.n	80046c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80046ae:	4b6c      	ldr	r3, [pc, #432]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	091b      	lsrs	r3, r3, #4
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
       ||
 80046be:	429a      	cmp	r2, r3
 80046c0:	d047      	beq.n	8004752 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	73fb      	strb	r3, [r7, #15]
 80046c6:	e044      	b.n	8004752 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b03      	cmp	r3, #3
 80046ce:	d018      	beq.n	8004702 <RCCEx_PLLSAI1_Config+0x86>
 80046d0:	2b03      	cmp	r3, #3
 80046d2:	d825      	bhi.n	8004720 <RCCEx_PLLSAI1_Config+0xa4>
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d002      	beq.n	80046de <RCCEx_PLLSAI1_Config+0x62>
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d009      	beq.n	80046f0 <RCCEx_PLLSAI1_Config+0x74>
 80046dc:	e020      	b.n	8004720 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046de:	4b60      	ldr	r3, [pc, #384]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d11d      	bne.n	8004726 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046ee:	e01a      	b.n	8004726 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046f0:	4b5b      	ldr	r3, [pc, #364]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d116      	bne.n	800472a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004700:	e013      	b.n	800472a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004702:	4b57      	ldr	r3, [pc, #348]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10f      	bne.n	800472e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800470e:	4b54      	ldr	r3, [pc, #336]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d109      	bne.n	800472e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800471e:	e006      	b.n	800472e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	73fb      	strb	r3, [r7, #15]
      break;
 8004724:	e004      	b.n	8004730 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004726:	bf00      	nop
 8004728:	e002      	b.n	8004730 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800472a:	bf00      	nop
 800472c:	e000      	b.n	8004730 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800472e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004730:	7bfb      	ldrb	r3, [r7, #15]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10d      	bne.n	8004752 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004736:	4b4a      	ldr	r3, [pc, #296]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6819      	ldr	r1, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	3b01      	subs	r3, #1
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	430b      	orrs	r3, r1
 800474c:	4944      	ldr	r1, [pc, #272]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800474e:	4313      	orrs	r3, r2
 8004750:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004752:	7bfb      	ldrb	r3, [r7, #15]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d17d      	bne.n	8004854 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004758:	4b41      	ldr	r3, [pc, #260]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a40      	ldr	r2, [pc, #256]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800475e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004762:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004764:	f7fd fe9a 	bl	800249c <HAL_GetTick>
 8004768:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800476a:	e009      	b.n	8004780 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800476c:	f7fd fe96 	bl	800249c <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d902      	bls.n	8004780 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	73fb      	strb	r3, [r7, #15]
        break;
 800477e:	e005      	b.n	800478c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004780:	4b37      	ldr	r3, [pc, #220]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1ef      	bne.n	800476c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800478c:	7bfb      	ldrb	r3, [r7, #15]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d160      	bne.n	8004854 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d111      	bne.n	80047bc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004798:	4b31      	ldr	r3, [pc, #196]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80047a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6892      	ldr	r2, [r2, #8]
 80047a8:	0211      	lsls	r1, r2, #8
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	68d2      	ldr	r2, [r2, #12]
 80047ae:	0912      	lsrs	r2, r2, #4
 80047b0:	0452      	lsls	r2, r2, #17
 80047b2:	430a      	orrs	r2, r1
 80047b4:	492a      	ldr	r1, [pc, #168]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	610b      	str	r3, [r1, #16]
 80047ba:	e027      	b.n	800480c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d112      	bne.n	80047e8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047c2:	4b27      	ldr	r3, [pc, #156]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80047ca:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	6892      	ldr	r2, [r2, #8]
 80047d2:	0211      	lsls	r1, r2, #8
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	6912      	ldr	r2, [r2, #16]
 80047d8:	0852      	lsrs	r2, r2, #1
 80047da:	3a01      	subs	r2, #1
 80047dc:	0552      	lsls	r2, r2, #21
 80047de:	430a      	orrs	r2, r1
 80047e0:	491f      	ldr	r1, [pc, #124]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	610b      	str	r3, [r1, #16]
 80047e6:	e011      	b.n	800480c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80047f0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6892      	ldr	r2, [r2, #8]
 80047f8:	0211      	lsls	r1, r2, #8
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6952      	ldr	r2, [r2, #20]
 80047fe:	0852      	lsrs	r2, r2, #1
 8004800:	3a01      	subs	r2, #1
 8004802:	0652      	lsls	r2, r2, #25
 8004804:	430a      	orrs	r2, r1
 8004806:	4916      	ldr	r1, [pc, #88]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004808:	4313      	orrs	r3, r2
 800480a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800480c:	4b14      	ldr	r3, [pc, #80]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a13      	ldr	r2, [pc, #76]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004812:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004816:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004818:	f7fd fe40 	bl	800249c <HAL_GetTick>
 800481c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800481e:	e009      	b.n	8004834 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004820:	f7fd fe3c 	bl	800249c <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d902      	bls.n	8004834 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	73fb      	strb	r3, [r7, #15]
          break;
 8004832:	e005      	b.n	8004840 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004834:	4b0a      	ldr	r3, [pc, #40]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0ef      	beq.n	8004820 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004840:	7bfb      	ldrb	r3, [r7, #15]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d106      	bne.n	8004854 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004846:	4b06      	ldr	r3, [pc, #24]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004848:	691a      	ldr	r2, [r3, #16]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	4904      	ldr	r1, [pc, #16]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004850:	4313      	orrs	r3, r2
 8004852:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004854:	7bfb      	ldrb	r3, [r7, #15]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40021000 	.word	0x40021000

08004864 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004872:	4b6a      	ldr	r3, [pc, #424]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f003 0303 	and.w	r3, r3, #3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d018      	beq.n	80048b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800487e:	4b67      	ldr	r3, [pc, #412]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f003 0203 	and.w	r2, r3, #3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	429a      	cmp	r2, r3
 800488c:	d10d      	bne.n	80048aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
       ||
 8004892:	2b00      	cmp	r3, #0
 8004894:	d009      	beq.n	80048aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004896:	4b61      	ldr	r3, [pc, #388]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	091b      	lsrs	r3, r3, #4
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
       ||
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d047      	beq.n	800493a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	73fb      	strb	r3, [r7, #15]
 80048ae:	e044      	b.n	800493a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b03      	cmp	r3, #3
 80048b6:	d018      	beq.n	80048ea <RCCEx_PLLSAI2_Config+0x86>
 80048b8:	2b03      	cmp	r3, #3
 80048ba:	d825      	bhi.n	8004908 <RCCEx_PLLSAI2_Config+0xa4>
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d002      	beq.n	80048c6 <RCCEx_PLLSAI2_Config+0x62>
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d009      	beq.n	80048d8 <RCCEx_PLLSAI2_Config+0x74>
 80048c4:	e020      	b.n	8004908 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048c6:	4b55      	ldr	r3, [pc, #340]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d11d      	bne.n	800490e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048d6:	e01a      	b.n	800490e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048d8:	4b50      	ldr	r3, [pc, #320]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d116      	bne.n	8004912 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048e8:	e013      	b.n	8004912 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048ea:	4b4c      	ldr	r3, [pc, #304]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10f      	bne.n	8004916 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048f6:	4b49      	ldr	r3, [pc, #292]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d109      	bne.n	8004916 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004906:	e006      	b.n	8004916 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	73fb      	strb	r3, [r7, #15]
      break;
 800490c:	e004      	b.n	8004918 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800490e:	bf00      	nop
 8004910:	e002      	b.n	8004918 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004912:	bf00      	nop
 8004914:	e000      	b.n	8004918 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004916:	bf00      	nop
    }

    if(status == HAL_OK)
 8004918:	7bfb      	ldrb	r3, [r7, #15]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10d      	bne.n	800493a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800491e:	4b3f      	ldr	r3, [pc, #252]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6819      	ldr	r1, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	3b01      	subs	r3, #1
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	430b      	orrs	r3, r1
 8004934:	4939      	ldr	r1, [pc, #228]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004936:	4313      	orrs	r3, r2
 8004938:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800493a:	7bfb      	ldrb	r3, [r7, #15]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d167      	bne.n	8004a10 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004940:	4b36      	ldr	r3, [pc, #216]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a35      	ldr	r2, [pc, #212]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004946:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800494a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800494c:	f7fd fda6 	bl	800249c <HAL_GetTick>
 8004950:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004952:	e009      	b.n	8004968 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004954:	f7fd fda2 	bl	800249c <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d902      	bls.n	8004968 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	73fb      	strb	r3, [r7, #15]
        break;
 8004966:	e005      	b.n	8004974 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004968:	4b2c      	ldr	r3, [pc, #176]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1ef      	bne.n	8004954 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004974:	7bfb      	ldrb	r3, [r7, #15]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d14a      	bne.n	8004a10 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d111      	bne.n	80049a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004980:	4b26      	ldr	r3, [pc, #152]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004988:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6892      	ldr	r2, [r2, #8]
 8004990:	0211      	lsls	r1, r2, #8
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	68d2      	ldr	r2, [r2, #12]
 8004996:	0912      	lsrs	r2, r2, #4
 8004998:	0452      	lsls	r2, r2, #17
 800499a:	430a      	orrs	r2, r1
 800499c:	491f      	ldr	r1, [pc, #124]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	614b      	str	r3, [r1, #20]
 80049a2:	e011      	b.n	80049c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049a4:	4b1d      	ldr	r3, [pc, #116]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80049ac:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	6892      	ldr	r2, [r2, #8]
 80049b4:	0211      	lsls	r1, r2, #8
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	6912      	ldr	r2, [r2, #16]
 80049ba:	0852      	lsrs	r2, r2, #1
 80049bc:	3a01      	subs	r2, #1
 80049be:	0652      	lsls	r2, r2, #25
 80049c0:	430a      	orrs	r2, r1
 80049c2:	4916      	ldr	r1, [pc, #88]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80049c8:	4b14      	ldr	r3, [pc, #80]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a13      	ldr	r2, [pc, #76]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d4:	f7fd fd62 	bl	800249c <HAL_GetTick>
 80049d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049da:	e009      	b.n	80049f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049dc:	f7fd fd5e 	bl	800249c <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d902      	bls.n	80049f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	73fb      	strb	r3, [r7, #15]
          break;
 80049ee:	e005      	b.n	80049fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049f0:	4b0a      	ldr	r3, [pc, #40]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0ef      	beq.n	80049dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d106      	bne.n	8004a10 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004a02:	4b06      	ldr	r3, [pc, #24]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a04:	695a      	ldr	r2, [r3, #20]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	4904      	ldr	r1, [pc, #16]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40021000 	.word	0x40021000

08004a20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e095      	b.n	8004b5e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d108      	bne.n	8004a4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a42:	d009      	beq.n	8004a58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	61da      	str	r2, [r3, #28]
 8004a4a:	e005      	b.n	8004a58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d106      	bne.n	8004a78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7fc fea0 	bl	80017b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a98:	d902      	bls.n	8004aa0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60fb      	str	r3, [r7, #12]
 8004a9e:	e002      	b.n	8004aa6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004aa0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004aa4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004aae:	d007      	beq.n	8004ac0 <HAL_SPI_Init+0xa0>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004ab8:	d002      	beq.n	8004ac0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004af8:	431a      	orrs	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b02:	ea42 0103 	orr.w	r1, r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	0c1b      	lsrs	r3, r3, #16
 8004b1c:	f003 0204 	and.w	r2, r3, #4
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b24:	f003 0310 	and.w	r3, r3, #16
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b2e:	f003 0308 	and.w	r3, r3, #8
 8004b32:	431a      	orrs	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004b3c:	ea42 0103 	orr.w	r1, r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b088      	sub	sp, #32
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	60f8      	str	r0, [r7, #12]
 8004b6e:	60b9      	str	r1, [r7, #8]
 8004b70:	603b      	str	r3, [r7, #0]
 8004b72:	4613      	mov	r3, r2
 8004b74:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b76:	f7fd fc91 	bl	800249c <HAL_GetTick>
 8004b7a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004b7c:	88fb      	ldrh	r3, [r7, #6]
 8004b7e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d001      	beq.n	8004b90 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e15c      	b.n	8004e4a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d002      	beq.n	8004b9c <HAL_SPI_Transmit+0x36>
 8004b96:	88fb      	ldrh	r3, [r7, #6]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d101      	bne.n	8004ba0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e154      	b.n	8004e4a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d101      	bne.n	8004bae <HAL_SPI_Transmit+0x48>
 8004baa:	2302      	movs	r3, #2
 8004bac:	e14d      	b.n	8004e4a <HAL_SPI_Transmit+0x2e4>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2203      	movs	r2, #3
 8004bba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	88fa      	ldrh	r2, [r7, #6]
 8004bce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	88fa      	ldrh	r2, [r7, #6]
 8004bd4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c00:	d10f      	bne.n	8004c22 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c2c:	2b40      	cmp	r3, #64	@ 0x40
 8004c2e:	d007      	beq.n	8004c40 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c48:	d952      	bls.n	8004cf0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d002      	beq.n	8004c58 <HAL_SPI_Transmit+0xf2>
 8004c52:	8b7b      	ldrh	r3, [r7, #26]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d145      	bne.n	8004ce4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c5c:	881a      	ldrh	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c68:	1c9a      	adds	r2, r3, #2
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	3b01      	subs	r3, #1
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c7c:	e032      	b.n	8004ce4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d112      	bne.n	8004cb2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c90:	881a      	ldrh	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c9c:	1c9a      	adds	r2, r3, #2
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004cb0:	e018      	b.n	8004ce4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cb2:	f7fd fbf3 	bl	800249c <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d803      	bhi.n	8004cca <HAL_SPI_Transmit+0x164>
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc8:	d102      	bne.n	8004cd0 <HAL_SPI_Transmit+0x16a>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d109      	bne.n	8004ce4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e0b2      	b.n	8004e4a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1c7      	bne.n	8004c7e <HAL_SPI_Transmit+0x118>
 8004cee:	e083      	b.n	8004df8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d002      	beq.n	8004cfe <HAL_SPI_Transmit+0x198>
 8004cf8:	8b7b      	ldrh	r3, [r7, #26]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d177      	bne.n	8004dee <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d912      	bls.n	8004d2e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d0c:	881a      	ldrh	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d18:	1c9a      	adds	r2, r3, #2
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	3b02      	subs	r3, #2
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004d2c:	e05f      	b.n	8004dee <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	330c      	adds	r3, #12
 8004d38:	7812      	ldrb	r2, [r2, #0]
 8004d3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d40:	1c5a      	adds	r2, r3, #1
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004d54:	e04b      	b.n	8004dee <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d12b      	bne.n	8004dbc <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d912      	bls.n	8004d94 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d72:	881a      	ldrh	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7e:	1c9a      	adds	r2, r3, #2
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	3b02      	subs	r3, #2
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004d92:	e02c      	b.n	8004dee <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	330c      	adds	r3, #12
 8004d9e:	7812      	ldrb	r2, [r2, #0]
 8004da0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	3b01      	subs	r3, #1
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004dba:	e018      	b.n	8004dee <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dbc:	f7fd fb6e 	bl	800249c <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d803      	bhi.n	8004dd4 <HAL_SPI_Transmit+0x26e>
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd2:	d102      	bne.n	8004dda <HAL_SPI_Transmit+0x274>
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d109      	bne.n	8004dee <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e02d      	b.n	8004e4a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1ae      	bne.n	8004d56 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004df8:	69fa      	ldr	r2, [r7, #28]
 8004dfa:	6839      	ldr	r1, [r7, #0]
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 f947 	bl	8005090 <SPI_EndRxTxTransaction>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10a      	bne.n	8004e2c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e16:	2300      	movs	r3, #0
 8004e18:	617b      	str	r3, [r7, #20]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	617b      	str	r3, [r7, #20]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	617b      	str	r3, [r7, #20]
 8004e2a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d001      	beq.n	8004e48 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e000      	b.n	8004e4a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004e48:	2300      	movs	r3, #0
  }
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3720      	adds	r7, #32
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
	...

08004e54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b088      	sub	sp, #32
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	603b      	str	r3, [r7, #0]
 8004e60:	4613      	mov	r3, r2
 8004e62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e64:	f7fd fb1a 	bl	800249c <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6c:	1a9b      	subs	r3, r3, r2
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	4413      	add	r3, r2
 8004e72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e74:	f7fd fb12 	bl	800249c <HAL_GetTick>
 8004e78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e7a:	4b39      	ldr	r3, [pc, #228]	@ (8004f60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	015b      	lsls	r3, r3, #5
 8004e80:	0d1b      	lsrs	r3, r3, #20
 8004e82:	69fa      	ldr	r2, [r7, #28]
 8004e84:	fb02 f303 	mul.w	r3, r2, r3
 8004e88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e8a:	e054      	b.n	8004f36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e92:	d050      	beq.n	8004f36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e94:	f7fd fb02 	bl	800249c <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	69fa      	ldr	r2, [r7, #28]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d902      	bls.n	8004eaa <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d13d      	bne.n	8004f26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004eb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ec2:	d111      	bne.n	8004ee8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ecc:	d004      	beq.n	8004ed8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ed6:	d107      	bne.n	8004ee8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ee6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ef0:	d10f      	bne.n	8004f12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e017      	b.n	8004f56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d101      	bne.n	8004f30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	4013      	ands	r3, r2
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	bf0c      	ite	eq
 8004f46:	2301      	moveq	r3, #1
 8004f48:	2300      	movne	r3, #0
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	79fb      	ldrb	r3, [r7, #7]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d19b      	bne.n	8004e8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3720      	adds	r7, #32
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	20000008 	.word	0x20000008

08004f64 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b08a      	sub	sp, #40	@ 0x28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
 8004f70:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004f72:	2300      	movs	r3, #0
 8004f74:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004f76:	f7fd fa91 	bl	800249c <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7e:	1a9b      	subs	r3, r3, r2
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	4413      	add	r3, r2
 8004f84:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004f86:	f7fd fa89 	bl	800249c <HAL_GetTick>
 8004f8a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	330c      	adds	r3, #12
 8004f92:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004f94:	4b3d      	ldr	r3, [pc, #244]	@ (800508c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	00da      	lsls	r2, r3, #3
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	0d1b      	lsrs	r3, r3, #20
 8004fa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fa6:	fb02 f303 	mul.w	r3, r2, r3
 8004faa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004fac:	e060      	b.n	8005070 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004fb4:	d107      	bne.n	8004fc6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d104      	bne.n	8004fc6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004fc4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fcc:	d050      	beq.n	8005070 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fce:	f7fd fa65 	bl	800249c <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d902      	bls.n	8004fe4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d13d      	bne.n	8005060 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004ff2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ffc:	d111      	bne.n	8005022 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005006:	d004      	beq.n	8005012 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005010:	d107      	bne.n	8005022 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005020:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005026:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800502a:	d10f      	bne.n	800504c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800504a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e010      	b.n	8005082 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	3b01      	subs	r3, #1
 800506e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689a      	ldr	r2, [r3, #8]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	4013      	ands	r3, r2
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	429a      	cmp	r2, r3
 800507e:	d196      	bne.n	8004fae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3728      	adds	r7, #40	@ 0x28
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	20000008 	.word	0x20000008

08005090 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af02      	add	r7, sp, #8
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f7ff ff5b 	bl	8004f64 <SPI_WaitFifoStateUntilTimeout>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d007      	beq.n	80050c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050b8:	f043 0220 	orr.w	r2, r3, #32
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e027      	b.n	8005114 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	2200      	movs	r2, #0
 80050cc:	2180      	movs	r1, #128	@ 0x80
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f7ff fec0 	bl	8004e54 <SPI_WaitFlagStateUntilTimeout>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d007      	beq.n	80050ea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050de:	f043 0220 	orr.w	r2, r3, #32
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e014      	b.n	8005114 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f7ff ff34 	bl	8004f64 <SPI_WaitFifoStateUntilTimeout>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d007      	beq.n	8005112 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005106:	f043 0220 	orr.w	r2, r3, #32
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e000      	b.n	8005114 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e040      	b.n	80051b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005132:	2b00      	cmp	r3, #0
 8005134:	d106      	bne.n	8005144 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fd f8ae 	bl	80022a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2224      	movs	r2, #36	@ 0x24
 8005148:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0201 	bic.w	r2, r2, #1
 8005158:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515e:	2b00      	cmp	r3, #0
 8005160:	d002      	beq.n	8005168 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 fed0 	bl	8005f08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 fc15 	bl	8005998 <UART_SetConfig>
 800516e:	4603      	mov	r3, r0
 8005170:	2b01      	cmp	r3, #1
 8005172:	d101      	bne.n	8005178 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e01b      	b.n	80051b0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005186:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005196:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0201 	orr.w	r2, r2, #1
 80051a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 ff4f 	bl	800604c <UART_CheckIdleState>
 80051ae:	4603      	mov	r3, r0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08a      	sub	sp, #40	@ 0x28
 80051bc:	af02      	add	r7, sp, #8
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	4613      	mov	r3, r2
 80051c6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051ce:	2b20      	cmp	r3, #32
 80051d0:	f040 80b6 	bne.w	8005340 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d002      	beq.n	80051e0 <HAL_UART_Receive+0x28>
 80051da:	88fb      	ldrh	r3, [r7, #6]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e0ae      	b.n	8005342 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2222      	movs	r2, #34	@ 0x22
 80051f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051fa:	f7fd f94f 	bl	800249c <HAL_GetTick>
 80051fe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	88fa      	ldrh	r2, [r7, #6]
 8005204:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	88fa      	ldrh	r2, [r7, #6]
 800520c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005218:	d10e      	bne.n	8005238 <HAL_UART_Receive+0x80>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d105      	bne.n	800522e <HAL_UART_Receive+0x76>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005228:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800522c:	e02d      	b.n	800528a <HAL_UART_Receive+0xd2>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	22ff      	movs	r2, #255	@ 0xff
 8005232:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005236:	e028      	b.n	800528a <HAL_UART_Receive+0xd2>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10d      	bne.n	800525c <HAL_UART_Receive+0xa4>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d104      	bne.n	8005252 <HAL_UART_Receive+0x9a>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	22ff      	movs	r2, #255	@ 0xff
 800524c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005250:	e01b      	b.n	800528a <HAL_UART_Receive+0xd2>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	227f      	movs	r2, #127	@ 0x7f
 8005256:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800525a:	e016      	b.n	800528a <HAL_UART_Receive+0xd2>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005264:	d10d      	bne.n	8005282 <HAL_UART_Receive+0xca>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d104      	bne.n	8005278 <HAL_UART_Receive+0xc0>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	227f      	movs	r2, #127	@ 0x7f
 8005272:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005276:	e008      	b.n	800528a <HAL_UART_Receive+0xd2>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	223f      	movs	r2, #63	@ 0x3f
 800527c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005280:	e003      	b.n	800528a <HAL_UART_Receive+0xd2>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005290:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800529a:	d108      	bne.n	80052ae <HAL_UART_Receive+0xf6>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d104      	bne.n	80052ae <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80052a4:	2300      	movs	r3, #0
 80052a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	61bb      	str	r3, [r7, #24]
 80052ac:	e003      	b.n	80052b6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052b2:	2300      	movs	r3, #0
 80052b4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80052b6:	e037      	b.n	8005328 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	2200      	movs	r2, #0
 80052c0:	2120      	movs	r1, #32
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f000 ff6a 	bl	800619c <UART_WaitOnFlagUntilTimeout>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d005      	beq.n	80052da <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2220      	movs	r2, #32
 80052d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e033      	b.n	8005342 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10c      	bne.n	80052fa <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	8a7b      	ldrh	r3, [r7, #18]
 80052ea:	4013      	ands	r3, r2
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	3302      	adds	r3, #2
 80052f6:	61bb      	str	r3, [r7, #24]
 80052f8:	e00d      	b.n	8005316 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005300:	b29b      	uxth	r3, r3
 8005302:	b2da      	uxtb	r2, r3
 8005304:	8a7b      	ldrh	r3, [r7, #18]
 8005306:	b2db      	uxtb	r3, r3
 8005308:	4013      	ands	r3, r2
 800530a:	b2da      	uxtb	r2, r3
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	3301      	adds	r3, #1
 8005314:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800531c:	b29b      	uxth	r3, r3
 800531e:	3b01      	subs	r3, #1
 8005320:	b29a      	uxth	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800532e:	b29b      	uxth	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1c1      	bne.n	80052b8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2220      	movs	r2, #32
 8005338:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800533c:	2300      	movs	r3, #0
 800533e:	e000      	b.n	8005342 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8005340:	2302      	movs	r3, #2
  }
}
 8005342:	4618      	mov	r0, r3
 8005344:	3720      	adds	r7, #32
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b0ba      	sub	sp, #232	@ 0xe8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005372:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005376:	f640 030f 	movw	r3, #2063	@ 0x80f
 800537a:	4013      	ands	r3, r2
 800537c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005380:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005384:	2b00      	cmp	r3, #0
 8005386:	d115      	bne.n	80053b4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800538c:	f003 0320 	and.w	r3, r3, #32
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00f      	beq.n	80053b4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005398:	f003 0320 	and.w	r3, r3, #32
 800539c:	2b00      	cmp	r3, #0
 800539e:	d009      	beq.n	80053b4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 82ca 	beq.w	800593e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	4798      	blx	r3
      }
      return;
 80053b2:	e2c4      	b.n	800593e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80053b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f000 8117 	beq.w	80055ec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80053be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d106      	bne.n	80053d8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80053ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80053ce:	4b85      	ldr	r3, [pc, #532]	@ (80055e4 <HAL_UART_IRQHandler+0x298>)
 80053d0:	4013      	ands	r3, r2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 810a 	beq.w	80055ec <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d011      	beq.n	8005408 <HAL_UART_IRQHandler+0xbc>
 80053e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00b      	beq.n	8005408 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2201      	movs	r2, #1
 80053f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053fe:	f043 0201 	orr.w	r2, r3, #1
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d011      	beq.n	8005438 <HAL_UART_IRQHandler+0xec>
 8005414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00b      	beq.n	8005438 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2202      	movs	r2, #2
 8005426:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800542e:	f043 0204 	orr.w	r2, r3, #4
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b00      	cmp	r3, #0
 8005442:	d011      	beq.n	8005468 <HAL_UART_IRQHandler+0x11c>
 8005444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00b      	beq.n	8005468 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2204      	movs	r2, #4
 8005456:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800545e:	f043 0202 	orr.w	r2, r3, #2
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800546c:	f003 0308 	and.w	r3, r3, #8
 8005470:	2b00      	cmp	r3, #0
 8005472:	d017      	beq.n	80054a4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005478:	f003 0320 	and.w	r3, r3, #32
 800547c:	2b00      	cmp	r3, #0
 800547e:	d105      	bne.n	800548c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005480:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005484:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00b      	beq.n	80054a4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2208      	movs	r2, #8
 8005492:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800549a:	f043 0208 	orr.w	r2, r3, #8
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80054a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d012      	beq.n	80054d6 <HAL_UART_IRQHandler+0x18a>
 80054b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00c      	beq.n	80054d6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054cc:	f043 0220 	orr.w	r2, r3, #32
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f000 8230 	beq.w	8005942 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80054e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054e6:	f003 0320 	and.w	r3, r3, #32
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00d      	beq.n	800550a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054f2:	f003 0320 	and.w	r3, r3, #32
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d007      	beq.n	800550a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005510:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800551e:	2b40      	cmp	r3, #64	@ 0x40
 8005520:	d005      	beq.n	800552e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005522:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005526:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800552a:	2b00      	cmp	r3, #0
 800552c:	d04f      	beq.n	80055ce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 fea1 	bl	8006276 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800553e:	2b40      	cmp	r3, #64	@ 0x40
 8005540:	d141      	bne.n	80055c6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	3308      	adds	r3, #8
 8005548:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005550:	e853 3f00 	ldrex	r3, [r3]
 8005554:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005558:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800555c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005560:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	3308      	adds	r3, #8
 800556a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800556e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005572:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005576:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800557a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800557e:	e841 2300 	strex	r3, r2, [r1]
 8005582:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005586:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1d9      	bne.n	8005542 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005592:	2b00      	cmp	r3, #0
 8005594:	d013      	beq.n	80055be <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800559a:	4a13      	ldr	r2, [pc, #76]	@ (80055e8 <HAL_UART_IRQHandler+0x29c>)
 800559c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fd f9b2 	bl	800290c <HAL_DMA_Abort_IT>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d017      	beq.n	80055de <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80055b8:	4610      	mov	r0, r2
 80055ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055bc:	e00f      	b.n	80055de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f9d4 	bl	800596c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c4:	e00b      	b.n	80055de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f9d0 	bl	800596c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055cc:	e007      	b.n	80055de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f9cc 	bl	800596c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80055dc:	e1b1      	b.n	8005942 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055de:	bf00      	nop
    return;
 80055e0:	e1af      	b.n	8005942 <HAL_UART_IRQHandler+0x5f6>
 80055e2:	bf00      	nop
 80055e4:	04000120 	.word	0x04000120
 80055e8:	0800633f 	.word	0x0800633f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	f040 816a 	bne.w	80058ca <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80055f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055fa:	f003 0310 	and.w	r3, r3, #16
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f000 8163 	beq.w	80058ca <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005608:	f003 0310 	and.w	r3, r3, #16
 800560c:	2b00      	cmp	r3, #0
 800560e:	f000 815c 	beq.w	80058ca <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2210      	movs	r2, #16
 8005618:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005624:	2b40      	cmp	r3, #64	@ 0x40
 8005626:	f040 80d4 	bne.w	80057d2 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005636:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800563a:	2b00      	cmp	r3, #0
 800563c:	f000 80ad 	beq.w	800579a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005646:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800564a:	429a      	cmp	r2, r3
 800564c:	f080 80a5 	bcs.w	800579a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005656:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0320 	and.w	r3, r3, #32
 8005666:	2b00      	cmp	r3, #0
 8005668:	f040 8086 	bne.w	8005778 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005674:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005678:	e853 3f00 	ldrex	r3, [r3]
 800567c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005680:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005684:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005688:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	461a      	mov	r2, r3
 8005692:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005696:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800569a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80056a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80056a6:	e841 2300 	strex	r3, r2, [r1]
 80056aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80056ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1da      	bne.n	800566c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	3308      	adds	r3, #8
 80056bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056c0:	e853 3f00 	ldrex	r3, [r3]
 80056c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80056c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056c8:	f023 0301 	bic.w	r3, r3, #1
 80056cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3308      	adds	r3, #8
 80056d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80056da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80056de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80056e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80056e6:	e841 2300 	strex	r3, r2, [r1]
 80056ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80056ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1e1      	bne.n	80056b6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	3308      	adds	r3, #8
 80056f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056fc:	e853 3f00 	ldrex	r3, [r3]
 8005700:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005702:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005704:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005708:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	3308      	adds	r3, #8
 8005712:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005716:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005718:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800571c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800571e:	e841 2300 	strex	r3, r2, [r1]
 8005722:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005724:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1e3      	bne.n	80056f2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2220      	movs	r2, #32
 800572e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005740:	e853 3f00 	ldrex	r3, [r3]
 8005744:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005746:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005748:	f023 0310 	bic.w	r3, r3, #16
 800574c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	461a      	mov	r2, r3
 8005756:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800575a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800575c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005760:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005762:	e841 2300 	strex	r3, r2, [r1]
 8005766:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005768:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1e4      	bne.n	8005738 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005772:	4618      	mov	r0, r3
 8005774:	f7fd f88c 	bl	8002890 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800578a:	b29b      	uxth	r3, r3
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	b29b      	uxth	r3, r3
 8005790:	4619      	mov	r1, r3
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f8f4 	bl	8005980 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005798:	e0d5      	b.n	8005946 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80057a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80057a4:	429a      	cmp	r2, r3
 80057a6:	f040 80ce 	bne.w	8005946 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0320 	and.w	r3, r3, #32
 80057b6:	2b20      	cmp	r3, #32
 80057b8:	f040 80c5 	bne.w	8005946 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80057c8:	4619      	mov	r1, r3
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f8d8 	bl	8005980 <HAL_UARTEx_RxEventCallback>
      return;
 80057d0:	e0b9      	b.n	8005946 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80057de:	b29b      	uxth	r3, r3
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f000 80ab 	beq.w	800594a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80057f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f000 80a6 	beq.w	800594a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005806:	e853 3f00 	ldrex	r3, [r3]
 800580a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800580c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800580e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005812:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	461a      	mov	r2, r3
 800581c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005820:	647b      	str	r3, [r7, #68]	@ 0x44
 8005822:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005824:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005826:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005828:	e841 2300 	strex	r3, r2, [r1]
 800582c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800582e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1e4      	bne.n	80057fe <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	3308      	adds	r3, #8
 800583a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583e:	e853 3f00 	ldrex	r3, [r3]
 8005842:	623b      	str	r3, [r7, #32]
   return(result);
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	f023 0301 	bic.w	r3, r3, #1
 800584a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	3308      	adds	r3, #8
 8005854:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005858:	633a      	str	r2, [r7, #48]	@ 0x30
 800585a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800585e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005860:	e841 2300 	strex	r3, r2, [r1]
 8005864:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1e3      	bne.n	8005834 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2220      	movs	r2, #32
 8005870:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	e853 3f00 	ldrex	r3, [r3]
 800588c:	60fb      	str	r3, [r7, #12]
   return(result);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f023 0310 	bic.w	r3, r3, #16
 8005894:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	461a      	mov	r2, r3
 800589e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80058a2:	61fb      	str	r3, [r7, #28]
 80058a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a6:	69b9      	ldr	r1, [r7, #24]
 80058a8:	69fa      	ldr	r2, [r7, #28]
 80058aa:	e841 2300 	strex	r3, r2, [r1]
 80058ae:	617b      	str	r3, [r7, #20]
   return(result);
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1e4      	bne.n	8005880 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2202      	movs	r2, #2
 80058ba:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058c0:	4619      	mov	r1, r3
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f85c 	bl	8005980 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058c8:	e03f      	b.n	800594a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80058ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00e      	beq.n	80058f4 <HAL_UART_IRQHandler+0x5a8>
 80058d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d008      	beq.n	80058f4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80058ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 fd66 	bl	80063be <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058f2:	e02d      	b.n	8005950 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80058f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00e      	beq.n	800591e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005904:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005908:	2b00      	cmp	r3, #0
 800590a:	d008      	beq.n	800591e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005910:	2b00      	cmp	r3, #0
 8005912:	d01c      	beq.n	800594e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	4798      	blx	r3
    }
    return;
 800591c:	e017      	b.n	800594e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800591e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005926:	2b00      	cmp	r3, #0
 8005928:	d012      	beq.n	8005950 <HAL_UART_IRQHandler+0x604>
 800592a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800592e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00c      	beq.n	8005950 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 fd17 	bl	800636a <UART_EndTransmit_IT>
    return;
 800593c:	e008      	b.n	8005950 <HAL_UART_IRQHandler+0x604>
      return;
 800593e:	bf00      	nop
 8005940:	e006      	b.n	8005950 <HAL_UART_IRQHandler+0x604>
    return;
 8005942:	bf00      	nop
 8005944:	e004      	b.n	8005950 <HAL_UART_IRQHandler+0x604>
      return;
 8005946:	bf00      	nop
 8005948:	e002      	b.n	8005950 <HAL_UART_IRQHandler+0x604>
      return;
 800594a:	bf00      	nop
 800594c:	e000      	b.n	8005950 <HAL_UART_IRQHandler+0x604>
    return;
 800594e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005950:	37e8      	adds	r7, #232	@ 0xe8
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop

08005958 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	460b      	mov	r3, r1
 800598a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800599c:	b08a      	sub	sp, #40	@ 0x28
 800599e:	af00      	add	r7, sp, #0
 80059a0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059a2:	2300      	movs	r3, #0
 80059a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	431a      	orrs	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	431a      	orrs	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	4313      	orrs	r3, r2
 80059be:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	4ba4      	ldr	r3, [pc, #656]	@ (8005c58 <UART_SetConfig+0x2c0>)
 80059c8:	4013      	ands	r3, r2
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	6812      	ldr	r2, [r2, #0]
 80059ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059d0:	430b      	orrs	r3, r1
 80059d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	68da      	ldr	r2, [r3, #12]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	430a      	orrs	r2, r1
 80059e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a99      	ldr	r2, [pc, #612]	@ (8005c5c <UART_SetConfig+0x2c4>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d004      	beq.n	8005a04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a00:	4313      	orrs	r3, r2
 8005a02:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a14:	430a      	orrs	r2, r1
 8005a16:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a90      	ldr	r2, [pc, #576]	@ (8005c60 <UART_SetConfig+0x2c8>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d126      	bne.n	8005a70 <UART_SetConfig+0xd8>
 8005a22:	4b90      	ldr	r3, [pc, #576]	@ (8005c64 <UART_SetConfig+0x2cc>)
 8005a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a28:	f003 0303 	and.w	r3, r3, #3
 8005a2c:	2b03      	cmp	r3, #3
 8005a2e:	d81b      	bhi.n	8005a68 <UART_SetConfig+0xd0>
 8005a30:	a201      	add	r2, pc, #4	@ (adr r2, 8005a38 <UART_SetConfig+0xa0>)
 8005a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a36:	bf00      	nop
 8005a38:	08005a49 	.word	0x08005a49
 8005a3c:	08005a59 	.word	0x08005a59
 8005a40:	08005a51 	.word	0x08005a51
 8005a44:	08005a61 	.word	0x08005a61
 8005a48:	2301      	movs	r3, #1
 8005a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a4e:	e116      	b.n	8005c7e <UART_SetConfig+0x2e6>
 8005a50:	2302      	movs	r3, #2
 8005a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a56:	e112      	b.n	8005c7e <UART_SetConfig+0x2e6>
 8005a58:	2304      	movs	r3, #4
 8005a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a5e:	e10e      	b.n	8005c7e <UART_SetConfig+0x2e6>
 8005a60:	2308      	movs	r3, #8
 8005a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a66:	e10a      	b.n	8005c7e <UART_SetConfig+0x2e6>
 8005a68:	2310      	movs	r3, #16
 8005a6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a6e:	e106      	b.n	8005c7e <UART_SetConfig+0x2e6>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a7c      	ldr	r2, [pc, #496]	@ (8005c68 <UART_SetConfig+0x2d0>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d138      	bne.n	8005aec <UART_SetConfig+0x154>
 8005a7a:	4b7a      	ldr	r3, [pc, #488]	@ (8005c64 <UART_SetConfig+0x2cc>)
 8005a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a80:	f003 030c 	and.w	r3, r3, #12
 8005a84:	2b0c      	cmp	r3, #12
 8005a86:	d82d      	bhi.n	8005ae4 <UART_SetConfig+0x14c>
 8005a88:	a201      	add	r2, pc, #4	@ (adr r2, 8005a90 <UART_SetConfig+0xf8>)
 8005a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8e:	bf00      	nop
 8005a90:	08005ac5 	.word	0x08005ac5
 8005a94:	08005ae5 	.word	0x08005ae5
 8005a98:	08005ae5 	.word	0x08005ae5
 8005a9c:	08005ae5 	.word	0x08005ae5
 8005aa0:	08005ad5 	.word	0x08005ad5
 8005aa4:	08005ae5 	.word	0x08005ae5
 8005aa8:	08005ae5 	.word	0x08005ae5
 8005aac:	08005ae5 	.word	0x08005ae5
 8005ab0:	08005acd 	.word	0x08005acd
 8005ab4:	08005ae5 	.word	0x08005ae5
 8005ab8:	08005ae5 	.word	0x08005ae5
 8005abc:	08005ae5 	.word	0x08005ae5
 8005ac0:	08005add 	.word	0x08005add
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aca:	e0d8      	b.n	8005c7e <UART_SetConfig+0x2e6>
 8005acc:	2302      	movs	r3, #2
 8005ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ad2:	e0d4      	b.n	8005c7e <UART_SetConfig+0x2e6>
 8005ad4:	2304      	movs	r3, #4
 8005ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ada:	e0d0      	b.n	8005c7e <UART_SetConfig+0x2e6>
 8005adc:	2308      	movs	r3, #8
 8005ade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ae2:	e0cc      	b.n	8005c7e <UART_SetConfig+0x2e6>
 8005ae4:	2310      	movs	r3, #16
 8005ae6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aea:	e0c8      	b.n	8005c7e <UART_SetConfig+0x2e6>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a5e      	ldr	r2, [pc, #376]	@ (8005c6c <UART_SetConfig+0x2d4>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d125      	bne.n	8005b42 <UART_SetConfig+0x1aa>
 8005af6:	4b5b      	ldr	r3, [pc, #364]	@ (8005c64 <UART_SetConfig+0x2cc>)
 8005af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005afc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005b00:	2b30      	cmp	r3, #48	@ 0x30
 8005b02:	d016      	beq.n	8005b32 <UART_SetConfig+0x19a>
 8005b04:	2b30      	cmp	r3, #48	@ 0x30
 8005b06:	d818      	bhi.n	8005b3a <UART_SetConfig+0x1a2>
 8005b08:	2b20      	cmp	r3, #32
 8005b0a:	d00a      	beq.n	8005b22 <UART_SetConfig+0x18a>
 8005b0c:	2b20      	cmp	r3, #32
 8005b0e:	d814      	bhi.n	8005b3a <UART_SetConfig+0x1a2>
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <UART_SetConfig+0x182>
 8005b14:	2b10      	cmp	r3, #16
 8005b16:	d008      	beq.n	8005b2a <UART_SetConfig+0x192>
 8005b18:	e00f      	b.n	8005b3a <UART_SetConfig+0x1a2>
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b20:	e0ad      	b.n	8005c7e <UART_SetConfig+0x2e6>
 8005b22:	2302      	movs	r3, #2
 8005b24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b28:	e0a9      	b.n	8005c7e <UART_SetConfig+0x2e6>
 8005b2a:	2304      	movs	r3, #4
 8005b2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b30:	e0a5      	b.n	8005c7e <UART_SetConfig+0x2e6>
 8005b32:	2308      	movs	r3, #8
 8005b34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b38:	e0a1      	b.n	8005c7e <UART_SetConfig+0x2e6>
 8005b3a:	2310      	movs	r3, #16
 8005b3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b40:	e09d      	b.n	8005c7e <UART_SetConfig+0x2e6>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a4a      	ldr	r2, [pc, #296]	@ (8005c70 <UART_SetConfig+0x2d8>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d125      	bne.n	8005b98 <UART_SetConfig+0x200>
 8005b4c:	4b45      	ldr	r3, [pc, #276]	@ (8005c64 <UART_SetConfig+0x2cc>)
 8005b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b52:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005b56:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b58:	d016      	beq.n	8005b88 <UART_SetConfig+0x1f0>
 8005b5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b5c:	d818      	bhi.n	8005b90 <UART_SetConfig+0x1f8>
 8005b5e:	2b80      	cmp	r3, #128	@ 0x80
 8005b60:	d00a      	beq.n	8005b78 <UART_SetConfig+0x1e0>
 8005b62:	2b80      	cmp	r3, #128	@ 0x80
 8005b64:	d814      	bhi.n	8005b90 <UART_SetConfig+0x1f8>
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d002      	beq.n	8005b70 <UART_SetConfig+0x1d8>
 8005b6a:	2b40      	cmp	r3, #64	@ 0x40
 8005b6c:	d008      	beq.n	8005b80 <UART_SetConfig+0x1e8>
 8005b6e:	e00f      	b.n	8005b90 <UART_SetConfig+0x1f8>
 8005b70:	2300      	movs	r3, #0
 8005b72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b76:	e082      	b.n	8005c7e <UART_SetConfig+0x2e6>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b7e:	e07e      	b.n	8005c7e <UART_SetConfig+0x2e6>
 8005b80:	2304      	movs	r3, #4
 8005b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b86:	e07a      	b.n	8005c7e <UART_SetConfig+0x2e6>
 8005b88:	2308      	movs	r3, #8
 8005b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b8e:	e076      	b.n	8005c7e <UART_SetConfig+0x2e6>
 8005b90:	2310      	movs	r3, #16
 8005b92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b96:	e072      	b.n	8005c7e <UART_SetConfig+0x2e6>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a35      	ldr	r2, [pc, #212]	@ (8005c74 <UART_SetConfig+0x2dc>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d12a      	bne.n	8005bf8 <UART_SetConfig+0x260>
 8005ba2:	4b30      	ldr	r3, [pc, #192]	@ (8005c64 <UART_SetConfig+0x2cc>)
 8005ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ba8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bb0:	d01a      	beq.n	8005be8 <UART_SetConfig+0x250>
 8005bb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bb6:	d81b      	bhi.n	8005bf0 <UART_SetConfig+0x258>
 8005bb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bbc:	d00c      	beq.n	8005bd8 <UART_SetConfig+0x240>
 8005bbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bc2:	d815      	bhi.n	8005bf0 <UART_SetConfig+0x258>
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d003      	beq.n	8005bd0 <UART_SetConfig+0x238>
 8005bc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bcc:	d008      	beq.n	8005be0 <UART_SetConfig+0x248>
 8005bce:	e00f      	b.n	8005bf0 <UART_SetConfig+0x258>
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bd6:	e052      	b.n	8005c7e <UART_SetConfig+0x2e6>
 8005bd8:	2302      	movs	r3, #2
 8005bda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bde:	e04e      	b.n	8005c7e <UART_SetConfig+0x2e6>
 8005be0:	2304      	movs	r3, #4
 8005be2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005be6:	e04a      	b.n	8005c7e <UART_SetConfig+0x2e6>
 8005be8:	2308      	movs	r3, #8
 8005bea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bee:	e046      	b.n	8005c7e <UART_SetConfig+0x2e6>
 8005bf0:	2310      	movs	r3, #16
 8005bf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bf6:	e042      	b.n	8005c7e <UART_SetConfig+0x2e6>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a17      	ldr	r2, [pc, #92]	@ (8005c5c <UART_SetConfig+0x2c4>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d13a      	bne.n	8005c78 <UART_SetConfig+0x2e0>
 8005c02:	4b18      	ldr	r3, [pc, #96]	@ (8005c64 <UART_SetConfig+0x2cc>)
 8005c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005c0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c10:	d01a      	beq.n	8005c48 <UART_SetConfig+0x2b0>
 8005c12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c16:	d81b      	bhi.n	8005c50 <UART_SetConfig+0x2b8>
 8005c18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c1c:	d00c      	beq.n	8005c38 <UART_SetConfig+0x2a0>
 8005c1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c22:	d815      	bhi.n	8005c50 <UART_SetConfig+0x2b8>
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <UART_SetConfig+0x298>
 8005c28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c2c:	d008      	beq.n	8005c40 <UART_SetConfig+0x2a8>
 8005c2e:	e00f      	b.n	8005c50 <UART_SetConfig+0x2b8>
 8005c30:	2300      	movs	r3, #0
 8005c32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c36:	e022      	b.n	8005c7e <UART_SetConfig+0x2e6>
 8005c38:	2302      	movs	r3, #2
 8005c3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c3e:	e01e      	b.n	8005c7e <UART_SetConfig+0x2e6>
 8005c40:	2304      	movs	r3, #4
 8005c42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c46:	e01a      	b.n	8005c7e <UART_SetConfig+0x2e6>
 8005c48:	2308      	movs	r3, #8
 8005c4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c4e:	e016      	b.n	8005c7e <UART_SetConfig+0x2e6>
 8005c50:	2310      	movs	r3, #16
 8005c52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c56:	e012      	b.n	8005c7e <UART_SetConfig+0x2e6>
 8005c58:	efff69f3 	.word	0xefff69f3
 8005c5c:	40008000 	.word	0x40008000
 8005c60:	40013800 	.word	0x40013800
 8005c64:	40021000 	.word	0x40021000
 8005c68:	40004400 	.word	0x40004400
 8005c6c:	40004800 	.word	0x40004800
 8005c70:	40004c00 	.word	0x40004c00
 8005c74:	40005000 	.word	0x40005000
 8005c78:	2310      	movs	r3, #16
 8005c7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a9f      	ldr	r2, [pc, #636]	@ (8005f00 <UART_SetConfig+0x568>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d17a      	bne.n	8005d7e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c8c:	2b08      	cmp	r3, #8
 8005c8e:	d824      	bhi.n	8005cda <UART_SetConfig+0x342>
 8005c90:	a201      	add	r2, pc, #4	@ (adr r2, 8005c98 <UART_SetConfig+0x300>)
 8005c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c96:	bf00      	nop
 8005c98:	08005cbd 	.word	0x08005cbd
 8005c9c:	08005cdb 	.word	0x08005cdb
 8005ca0:	08005cc5 	.word	0x08005cc5
 8005ca4:	08005cdb 	.word	0x08005cdb
 8005ca8:	08005ccb 	.word	0x08005ccb
 8005cac:	08005cdb 	.word	0x08005cdb
 8005cb0:	08005cdb 	.word	0x08005cdb
 8005cb4:	08005cdb 	.word	0x08005cdb
 8005cb8:	08005cd3 	.word	0x08005cd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cbc:	f7fe f968 	bl	8003f90 <HAL_RCC_GetPCLK1Freq>
 8005cc0:	61f8      	str	r0, [r7, #28]
        break;
 8005cc2:	e010      	b.n	8005ce6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cc4:	4b8f      	ldr	r3, [pc, #572]	@ (8005f04 <UART_SetConfig+0x56c>)
 8005cc6:	61fb      	str	r3, [r7, #28]
        break;
 8005cc8:	e00d      	b.n	8005ce6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cca:	f7fe f8c9 	bl	8003e60 <HAL_RCC_GetSysClockFreq>
 8005cce:	61f8      	str	r0, [r7, #28]
        break;
 8005cd0:	e009      	b.n	8005ce6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cd6:	61fb      	str	r3, [r7, #28]
        break;
 8005cd8:	e005      	b.n	8005ce6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005ce4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 80fb 	beq.w	8005ee4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	4413      	add	r3, r2
 8005cf8:	69fa      	ldr	r2, [r7, #28]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d305      	bcc.n	8005d0a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d04:	69fa      	ldr	r2, [r7, #28]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d903      	bls.n	8005d12 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005d10:	e0e8      	b.n	8005ee4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	2200      	movs	r2, #0
 8005d16:	461c      	mov	r4, r3
 8005d18:	4615      	mov	r5, r2
 8005d1a:	f04f 0200 	mov.w	r2, #0
 8005d1e:	f04f 0300 	mov.w	r3, #0
 8005d22:	022b      	lsls	r3, r5, #8
 8005d24:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005d28:	0222      	lsls	r2, r4, #8
 8005d2a:	68f9      	ldr	r1, [r7, #12]
 8005d2c:	6849      	ldr	r1, [r1, #4]
 8005d2e:	0849      	lsrs	r1, r1, #1
 8005d30:	2000      	movs	r0, #0
 8005d32:	4688      	mov	r8, r1
 8005d34:	4681      	mov	r9, r0
 8005d36:	eb12 0a08 	adds.w	sl, r2, r8
 8005d3a:	eb43 0b09 	adc.w	fp, r3, r9
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	603b      	str	r3, [r7, #0]
 8005d46:	607a      	str	r2, [r7, #4]
 8005d48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d4c:	4650      	mov	r0, sl
 8005d4e:	4659      	mov	r1, fp
 8005d50:	f7fa fa8e 	bl	8000270 <__aeabi_uldivmod>
 8005d54:	4602      	mov	r2, r0
 8005d56:	460b      	mov	r3, r1
 8005d58:	4613      	mov	r3, r2
 8005d5a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d62:	d308      	bcc.n	8005d76 <UART_SetConfig+0x3de>
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d6a:	d204      	bcs.n	8005d76 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	60da      	str	r2, [r3, #12]
 8005d74:	e0b6      	b.n	8005ee4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005d7c:	e0b2      	b.n	8005ee4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d86:	d15e      	bne.n	8005e46 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005d88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005d8c:	2b08      	cmp	r3, #8
 8005d8e:	d828      	bhi.n	8005de2 <UART_SetConfig+0x44a>
 8005d90:	a201      	add	r2, pc, #4	@ (adr r2, 8005d98 <UART_SetConfig+0x400>)
 8005d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d96:	bf00      	nop
 8005d98:	08005dbd 	.word	0x08005dbd
 8005d9c:	08005dc5 	.word	0x08005dc5
 8005da0:	08005dcd 	.word	0x08005dcd
 8005da4:	08005de3 	.word	0x08005de3
 8005da8:	08005dd3 	.word	0x08005dd3
 8005dac:	08005de3 	.word	0x08005de3
 8005db0:	08005de3 	.word	0x08005de3
 8005db4:	08005de3 	.word	0x08005de3
 8005db8:	08005ddb 	.word	0x08005ddb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dbc:	f7fe f8e8 	bl	8003f90 <HAL_RCC_GetPCLK1Freq>
 8005dc0:	61f8      	str	r0, [r7, #28]
        break;
 8005dc2:	e014      	b.n	8005dee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dc4:	f7fe f8fa 	bl	8003fbc <HAL_RCC_GetPCLK2Freq>
 8005dc8:	61f8      	str	r0, [r7, #28]
        break;
 8005dca:	e010      	b.n	8005dee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dcc:	4b4d      	ldr	r3, [pc, #308]	@ (8005f04 <UART_SetConfig+0x56c>)
 8005dce:	61fb      	str	r3, [r7, #28]
        break;
 8005dd0:	e00d      	b.n	8005dee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dd2:	f7fe f845 	bl	8003e60 <HAL_RCC_GetSysClockFreq>
 8005dd6:	61f8      	str	r0, [r7, #28]
        break;
 8005dd8:	e009      	b.n	8005dee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dde:	61fb      	str	r3, [r7, #28]
        break;
 8005de0:	e005      	b.n	8005dee <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005de2:	2300      	movs	r3, #0
 8005de4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005dec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d077      	beq.n	8005ee4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	005a      	lsls	r2, r3, #1
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	085b      	lsrs	r3, r3, #1
 8005dfe:	441a      	add	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e08:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	2b0f      	cmp	r3, #15
 8005e0e:	d916      	bls.n	8005e3e <UART_SetConfig+0x4a6>
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e16:	d212      	bcs.n	8005e3e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	f023 030f 	bic.w	r3, r3, #15
 8005e20:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	085b      	lsrs	r3, r3, #1
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	f003 0307 	and.w	r3, r3, #7
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	8afb      	ldrh	r3, [r7, #22]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	8afa      	ldrh	r2, [r7, #22]
 8005e3a:	60da      	str	r2, [r3, #12]
 8005e3c:	e052      	b.n	8005ee4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005e44:	e04e      	b.n	8005ee4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e46:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e4a:	2b08      	cmp	r3, #8
 8005e4c:	d827      	bhi.n	8005e9e <UART_SetConfig+0x506>
 8005e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e54 <UART_SetConfig+0x4bc>)
 8005e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e54:	08005e79 	.word	0x08005e79
 8005e58:	08005e81 	.word	0x08005e81
 8005e5c:	08005e89 	.word	0x08005e89
 8005e60:	08005e9f 	.word	0x08005e9f
 8005e64:	08005e8f 	.word	0x08005e8f
 8005e68:	08005e9f 	.word	0x08005e9f
 8005e6c:	08005e9f 	.word	0x08005e9f
 8005e70:	08005e9f 	.word	0x08005e9f
 8005e74:	08005e97 	.word	0x08005e97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e78:	f7fe f88a 	bl	8003f90 <HAL_RCC_GetPCLK1Freq>
 8005e7c:	61f8      	str	r0, [r7, #28]
        break;
 8005e7e:	e014      	b.n	8005eaa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e80:	f7fe f89c 	bl	8003fbc <HAL_RCC_GetPCLK2Freq>
 8005e84:	61f8      	str	r0, [r7, #28]
        break;
 8005e86:	e010      	b.n	8005eaa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e88:	4b1e      	ldr	r3, [pc, #120]	@ (8005f04 <UART_SetConfig+0x56c>)
 8005e8a:	61fb      	str	r3, [r7, #28]
        break;
 8005e8c:	e00d      	b.n	8005eaa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e8e:	f7fd ffe7 	bl	8003e60 <HAL_RCC_GetSysClockFreq>
 8005e92:	61f8      	str	r0, [r7, #28]
        break;
 8005e94:	e009      	b.n	8005eaa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e9a:	61fb      	str	r3, [r7, #28]
        break;
 8005e9c:	e005      	b.n	8005eaa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005ea8:	bf00      	nop
    }

    if (pclk != 0U)
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d019      	beq.n	8005ee4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	085a      	lsrs	r2, r3, #1
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	441a      	add	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	2b0f      	cmp	r3, #15
 8005ec8:	d909      	bls.n	8005ede <UART_SetConfig+0x546>
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ed0:	d205      	bcs.n	8005ede <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	60da      	str	r2, [r3, #12]
 8005edc:	e002      	b.n	8005ee4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005ef0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3728      	adds	r7, #40	@ 0x28
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005efe:	bf00      	nop
 8005f00:	40008000 	.word	0x40008000
 8005f04:	00f42400 	.word	0x00f42400

08005f08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f14:	f003 0308 	and.w	r3, r3, #8
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00a      	beq.n	8005f32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00a      	beq.n	8005f54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	430a      	orrs	r2, r1
 8005f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00a      	beq.n	8005f76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	430a      	orrs	r2, r1
 8005f74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7a:	f003 0304 	and.w	r3, r3, #4
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00a      	beq.n	8005f98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	430a      	orrs	r2, r1
 8005f96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f9c:	f003 0310 	and.w	r3, r3, #16
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00a      	beq.n	8005fba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fbe:	f003 0320 	and.w	r3, r3, #32
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00a      	beq.n	8005fdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d01a      	beq.n	800601e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006002:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006006:	d10a      	bne.n	800601e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	430a      	orrs	r2, r1
 800601c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00a      	beq.n	8006040 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	430a      	orrs	r2, r1
 800603e:	605a      	str	r2, [r3, #4]
  }
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b098      	sub	sp, #96	@ 0x60
 8006050:	af02      	add	r7, sp, #8
 8006052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800605c:	f7fc fa1e 	bl	800249c <HAL_GetTick>
 8006060:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0308 	and.w	r3, r3, #8
 800606c:	2b08      	cmp	r3, #8
 800606e:	d12e      	bne.n	80060ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006070:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006078:	2200      	movs	r2, #0
 800607a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f88c 	bl	800619c <UART_WaitOnFlagUntilTimeout>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d021      	beq.n	80060ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006092:	e853 3f00 	ldrex	r3, [r3]
 8006096:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800609a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800609e:	653b      	str	r3, [r7, #80]	@ 0x50
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	461a      	mov	r2, r3
 80060a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80060aa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060b0:	e841 2300 	strex	r3, r2, [r1]
 80060b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1e6      	bne.n	800608a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2220      	movs	r2, #32
 80060c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e062      	b.n	8006194 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0304 	and.w	r3, r3, #4
 80060d8:	2b04      	cmp	r3, #4
 80060da:	d149      	bne.n	8006170 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060e4:	2200      	movs	r2, #0
 80060e6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f856 	bl	800619c <UART_WaitOnFlagUntilTimeout>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d03c      	beq.n	8006170 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fe:	e853 3f00 	ldrex	r3, [r3]
 8006102:	623b      	str	r3, [r7, #32]
   return(result);
 8006104:	6a3b      	ldr	r3, [r7, #32]
 8006106:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800610a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	461a      	mov	r2, r3
 8006112:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006114:	633b      	str	r3, [r7, #48]	@ 0x30
 8006116:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006118:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800611a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800611c:	e841 2300 	strex	r3, r2, [r1]
 8006120:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1e6      	bne.n	80060f6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	3308      	adds	r3, #8
 800612e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	e853 3f00 	ldrex	r3, [r3]
 8006136:	60fb      	str	r3, [r7, #12]
   return(result);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f023 0301 	bic.w	r3, r3, #1
 800613e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3308      	adds	r3, #8
 8006146:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006148:	61fa      	str	r2, [r7, #28]
 800614a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614c:	69b9      	ldr	r1, [r7, #24]
 800614e:	69fa      	ldr	r2, [r7, #28]
 8006150:	e841 2300 	strex	r3, r2, [r1]
 8006154:	617b      	str	r3, [r7, #20]
   return(result);
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1e5      	bne.n	8006128 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2220      	movs	r2, #32
 8006160:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e011      	b.n	8006194 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2220      	movs	r2, #32
 8006174:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2220      	movs	r2, #32
 800617a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3758      	adds	r7, #88	@ 0x58
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	603b      	str	r3, [r7, #0]
 80061a8:	4613      	mov	r3, r2
 80061aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ac:	e04f      	b.n	800624e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b4:	d04b      	beq.n	800624e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061b6:	f7fc f971 	bl	800249c <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	69ba      	ldr	r2, [r7, #24]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d302      	bcc.n	80061cc <UART_WaitOnFlagUntilTimeout+0x30>
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d101      	bne.n	80061d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e04e      	b.n	800626e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0304 	and.w	r3, r3, #4
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d037      	beq.n	800624e <UART_WaitOnFlagUntilTimeout+0xb2>
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	2b80      	cmp	r3, #128	@ 0x80
 80061e2:	d034      	beq.n	800624e <UART_WaitOnFlagUntilTimeout+0xb2>
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2b40      	cmp	r3, #64	@ 0x40
 80061e8:	d031      	beq.n	800624e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	69db      	ldr	r3, [r3, #28]
 80061f0:	f003 0308 	and.w	r3, r3, #8
 80061f4:	2b08      	cmp	r3, #8
 80061f6:	d110      	bne.n	800621a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2208      	movs	r2, #8
 80061fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 f838 	bl	8006276 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2208      	movs	r2, #8
 800620a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e029      	b.n	800626e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	69db      	ldr	r3, [r3, #28]
 8006220:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006224:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006228:	d111      	bne.n	800624e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006232:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f000 f81e 	bl	8006276 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2220      	movs	r2, #32
 800623e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e00f      	b.n	800626e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	69da      	ldr	r2, [r3, #28]
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	4013      	ands	r3, r2
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	429a      	cmp	r2, r3
 800625c:	bf0c      	ite	eq
 800625e:	2301      	moveq	r3, #1
 8006260:	2300      	movne	r3, #0
 8006262:	b2db      	uxtb	r3, r3
 8006264:	461a      	mov	r2, r3
 8006266:	79fb      	ldrb	r3, [r7, #7]
 8006268:	429a      	cmp	r2, r3
 800626a:	d0a0      	beq.n	80061ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006276:	b480      	push	{r7}
 8006278:	b095      	sub	sp, #84	@ 0x54
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006286:	e853 3f00 	ldrex	r3, [r3]
 800628a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800628c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006292:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	461a      	mov	r2, r3
 800629a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800629c:	643b      	str	r3, [r7, #64]	@ 0x40
 800629e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80062a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80062a4:	e841 2300 	strex	r3, r2, [r1]
 80062a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80062aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1e6      	bne.n	800627e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	3308      	adds	r3, #8
 80062b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b8:	6a3b      	ldr	r3, [r7, #32]
 80062ba:	e853 3f00 	ldrex	r3, [r3]
 80062be:	61fb      	str	r3, [r7, #28]
   return(result);
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	f023 0301 	bic.w	r3, r3, #1
 80062c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	3308      	adds	r3, #8
 80062ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062d8:	e841 2300 	strex	r3, r2, [r1]
 80062dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80062de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1e5      	bne.n	80062b0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d118      	bne.n	800631e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	e853 3f00 	ldrex	r3, [r3]
 80062f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	f023 0310 	bic.w	r3, r3, #16
 8006300:	647b      	str	r3, [r7, #68]	@ 0x44
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	461a      	mov	r2, r3
 8006308:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800630a:	61bb      	str	r3, [r7, #24]
 800630c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630e:	6979      	ldr	r1, [r7, #20]
 8006310:	69ba      	ldr	r2, [r7, #24]
 8006312:	e841 2300 	strex	r3, r2, [r1]
 8006316:	613b      	str	r3, [r7, #16]
   return(result);
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1e6      	bne.n	80062ec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2220      	movs	r2, #32
 8006322:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006332:	bf00      	nop
 8006334:	3754      	adds	r7, #84	@ 0x54
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800634a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f7ff fb05 	bl	800596c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006362:	bf00      	nop
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b088      	sub	sp, #32
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	e853 3f00 	ldrex	r3, [r3]
 800637e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006386:	61fb      	str	r3, [r7, #28]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	461a      	mov	r2, r3
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	61bb      	str	r3, [r7, #24]
 8006392:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006394:	6979      	ldr	r1, [r7, #20]
 8006396:	69ba      	ldr	r2, [r7, #24]
 8006398:	e841 2300 	strex	r3, r2, [r1]
 800639c:	613b      	str	r3, [r7, #16]
   return(result);
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1e6      	bne.n	8006372 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2220      	movs	r2, #32
 80063a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f7ff fad1 	bl	8005958 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063b6:	bf00      	nop
 80063b8:	3720      	adds	r7, #32
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80063be:	b480      	push	{r7}
 80063c0:	b083      	sub	sp, #12
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80063c6:	bf00      	nop
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
	...

080063d4 <exit>:
 80063d4:	b508      	push	{r3, lr}
 80063d6:	4b06      	ldr	r3, [pc, #24]	@ (80063f0 <exit+0x1c>)
 80063d8:	4604      	mov	r4, r0
 80063da:	b113      	cbz	r3, 80063e2 <exit+0xe>
 80063dc:	2100      	movs	r1, #0
 80063de:	f3af 8000 	nop.w
 80063e2:	4b04      	ldr	r3, [pc, #16]	@ (80063f4 <exit+0x20>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	b103      	cbz	r3, 80063ea <exit+0x16>
 80063e8:	4798      	blx	r3
 80063ea:	4620      	mov	r0, r4
 80063ec:	f7fb fe68 	bl	80020c0 <_exit>
 80063f0:	00000000 	.word	0x00000000
 80063f4:	2000032c 	.word	0x2000032c

080063f8 <malloc>:
 80063f8:	4b02      	ldr	r3, [pc, #8]	@ (8006404 <malloc+0xc>)
 80063fa:	4601      	mov	r1, r0
 80063fc:	6818      	ldr	r0, [r3, #0]
 80063fe:	f000 b825 	b.w	800644c <_malloc_r>
 8006402:	bf00      	nop
 8006404:	20000040 	.word	0x20000040

08006408 <sbrk_aligned>:
 8006408:	b570      	push	{r4, r5, r6, lr}
 800640a:	4e0f      	ldr	r6, [pc, #60]	@ (8006448 <sbrk_aligned+0x40>)
 800640c:	460c      	mov	r4, r1
 800640e:	6831      	ldr	r1, [r6, #0]
 8006410:	4605      	mov	r5, r0
 8006412:	b911      	cbnz	r1, 800641a <sbrk_aligned+0x12>
 8006414:	f000 fab4 	bl	8006980 <_sbrk_r>
 8006418:	6030      	str	r0, [r6, #0]
 800641a:	4621      	mov	r1, r4
 800641c:	4628      	mov	r0, r5
 800641e:	f000 faaf 	bl	8006980 <_sbrk_r>
 8006422:	1c43      	adds	r3, r0, #1
 8006424:	d103      	bne.n	800642e <sbrk_aligned+0x26>
 8006426:	f04f 34ff 	mov.w	r4, #4294967295
 800642a:	4620      	mov	r0, r4
 800642c:	bd70      	pop	{r4, r5, r6, pc}
 800642e:	1cc4      	adds	r4, r0, #3
 8006430:	f024 0403 	bic.w	r4, r4, #3
 8006434:	42a0      	cmp	r0, r4
 8006436:	d0f8      	beq.n	800642a <sbrk_aligned+0x22>
 8006438:	1a21      	subs	r1, r4, r0
 800643a:	4628      	mov	r0, r5
 800643c:	f000 faa0 	bl	8006980 <_sbrk_r>
 8006440:	3001      	adds	r0, #1
 8006442:	d1f2      	bne.n	800642a <sbrk_aligned+0x22>
 8006444:	e7ef      	b.n	8006426 <sbrk_aligned+0x1e>
 8006446:	bf00      	nop
 8006448:	200001ec 	.word	0x200001ec

0800644c <_malloc_r>:
 800644c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006450:	1ccd      	adds	r5, r1, #3
 8006452:	f025 0503 	bic.w	r5, r5, #3
 8006456:	3508      	adds	r5, #8
 8006458:	2d0c      	cmp	r5, #12
 800645a:	bf38      	it	cc
 800645c:	250c      	movcc	r5, #12
 800645e:	2d00      	cmp	r5, #0
 8006460:	4606      	mov	r6, r0
 8006462:	db01      	blt.n	8006468 <_malloc_r+0x1c>
 8006464:	42a9      	cmp	r1, r5
 8006466:	d904      	bls.n	8006472 <_malloc_r+0x26>
 8006468:	230c      	movs	r3, #12
 800646a:	6033      	str	r3, [r6, #0]
 800646c:	2000      	movs	r0, #0
 800646e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006472:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006548 <_malloc_r+0xfc>
 8006476:	f000 f869 	bl	800654c <__malloc_lock>
 800647a:	f8d8 3000 	ldr.w	r3, [r8]
 800647e:	461c      	mov	r4, r3
 8006480:	bb44      	cbnz	r4, 80064d4 <_malloc_r+0x88>
 8006482:	4629      	mov	r1, r5
 8006484:	4630      	mov	r0, r6
 8006486:	f7ff ffbf 	bl	8006408 <sbrk_aligned>
 800648a:	1c43      	adds	r3, r0, #1
 800648c:	4604      	mov	r4, r0
 800648e:	d158      	bne.n	8006542 <_malloc_r+0xf6>
 8006490:	f8d8 4000 	ldr.w	r4, [r8]
 8006494:	4627      	mov	r7, r4
 8006496:	2f00      	cmp	r7, #0
 8006498:	d143      	bne.n	8006522 <_malloc_r+0xd6>
 800649a:	2c00      	cmp	r4, #0
 800649c:	d04b      	beq.n	8006536 <_malloc_r+0xea>
 800649e:	6823      	ldr	r3, [r4, #0]
 80064a0:	4639      	mov	r1, r7
 80064a2:	4630      	mov	r0, r6
 80064a4:	eb04 0903 	add.w	r9, r4, r3
 80064a8:	f000 fa6a 	bl	8006980 <_sbrk_r>
 80064ac:	4581      	cmp	r9, r0
 80064ae:	d142      	bne.n	8006536 <_malloc_r+0xea>
 80064b0:	6821      	ldr	r1, [r4, #0]
 80064b2:	1a6d      	subs	r5, r5, r1
 80064b4:	4629      	mov	r1, r5
 80064b6:	4630      	mov	r0, r6
 80064b8:	f7ff ffa6 	bl	8006408 <sbrk_aligned>
 80064bc:	3001      	adds	r0, #1
 80064be:	d03a      	beq.n	8006536 <_malloc_r+0xea>
 80064c0:	6823      	ldr	r3, [r4, #0]
 80064c2:	442b      	add	r3, r5
 80064c4:	6023      	str	r3, [r4, #0]
 80064c6:	f8d8 3000 	ldr.w	r3, [r8]
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	bb62      	cbnz	r2, 8006528 <_malloc_r+0xdc>
 80064ce:	f8c8 7000 	str.w	r7, [r8]
 80064d2:	e00f      	b.n	80064f4 <_malloc_r+0xa8>
 80064d4:	6822      	ldr	r2, [r4, #0]
 80064d6:	1b52      	subs	r2, r2, r5
 80064d8:	d420      	bmi.n	800651c <_malloc_r+0xd0>
 80064da:	2a0b      	cmp	r2, #11
 80064dc:	d917      	bls.n	800650e <_malloc_r+0xc2>
 80064de:	1961      	adds	r1, r4, r5
 80064e0:	42a3      	cmp	r3, r4
 80064e2:	6025      	str	r5, [r4, #0]
 80064e4:	bf18      	it	ne
 80064e6:	6059      	strne	r1, [r3, #4]
 80064e8:	6863      	ldr	r3, [r4, #4]
 80064ea:	bf08      	it	eq
 80064ec:	f8c8 1000 	streq.w	r1, [r8]
 80064f0:	5162      	str	r2, [r4, r5]
 80064f2:	604b      	str	r3, [r1, #4]
 80064f4:	4630      	mov	r0, r6
 80064f6:	f000 f82f 	bl	8006558 <__malloc_unlock>
 80064fa:	f104 000b 	add.w	r0, r4, #11
 80064fe:	1d23      	adds	r3, r4, #4
 8006500:	f020 0007 	bic.w	r0, r0, #7
 8006504:	1ac2      	subs	r2, r0, r3
 8006506:	bf1c      	itt	ne
 8006508:	1a1b      	subne	r3, r3, r0
 800650a:	50a3      	strne	r3, [r4, r2]
 800650c:	e7af      	b.n	800646e <_malloc_r+0x22>
 800650e:	6862      	ldr	r2, [r4, #4]
 8006510:	42a3      	cmp	r3, r4
 8006512:	bf0c      	ite	eq
 8006514:	f8c8 2000 	streq.w	r2, [r8]
 8006518:	605a      	strne	r2, [r3, #4]
 800651a:	e7eb      	b.n	80064f4 <_malloc_r+0xa8>
 800651c:	4623      	mov	r3, r4
 800651e:	6864      	ldr	r4, [r4, #4]
 8006520:	e7ae      	b.n	8006480 <_malloc_r+0x34>
 8006522:	463c      	mov	r4, r7
 8006524:	687f      	ldr	r7, [r7, #4]
 8006526:	e7b6      	b.n	8006496 <_malloc_r+0x4a>
 8006528:	461a      	mov	r2, r3
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	42a3      	cmp	r3, r4
 800652e:	d1fb      	bne.n	8006528 <_malloc_r+0xdc>
 8006530:	2300      	movs	r3, #0
 8006532:	6053      	str	r3, [r2, #4]
 8006534:	e7de      	b.n	80064f4 <_malloc_r+0xa8>
 8006536:	230c      	movs	r3, #12
 8006538:	6033      	str	r3, [r6, #0]
 800653a:	4630      	mov	r0, r6
 800653c:	f000 f80c 	bl	8006558 <__malloc_unlock>
 8006540:	e794      	b.n	800646c <_malloc_r+0x20>
 8006542:	6005      	str	r5, [r0, #0]
 8006544:	e7d6      	b.n	80064f4 <_malloc_r+0xa8>
 8006546:	bf00      	nop
 8006548:	200001f0 	.word	0x200001f0

0800654c <__malloc_lock>:
 800654c:	4801      	ldr	r0, [pc, #4]	@ (8006554 <__malloc_lock+0x8>)
 800654e:	f000 ba64 	b.w	8006a1a <__retarget_lock_acquire_recursive>
 8006552:	bf00      	nop
 8006554:	20000334 	.word	0x20000334

08006558 <__malloc_unlock>:
 8006558:	4801      	ldr	r0, [pc, #4]	@ (8006560 <__malloc_unlock+0x8>)
 800655a:	f000 ba5f 	b.w	8006a1c <__retarget_lock_release_recursive>
 800655e:	bf00      	nop
 8006560:	20000334 	.word	0x20000334

08006564 <srand>:
 8006564:	b538      	push	{r3, r4, r5, lr}
 8006566:	4b10      	ldr	r3, [pc, #64]	@ (80065a8 <srand+0x44>)
 8006568:	681d      	ldr	r5, [r3, #0]
 800656a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800656c:	4604      	mov	r4, r0
 800656e:	b9b3      	cbnz	r3, 800659e <srand+0x3a>
 8006570:	2018      	movs	r0, #24
 8006572:	f7ff ff41 	bl	80063f8 <malloc>
 8006576:	4602      	mov	r2, r0
 8006578:	6328      	str	r0, [r5, #48]	@ 0x30
 800657a:	b920      	cbnz	r0, 8006586 <srand+0x22>
 800657c:	4b0b      	ldr	r3, [pc, #44]	@ (80065ac <srand+0x48>)
 800657e:	480c      	ldr	r0, [pc, #48]	@ (80065b0 <srand+0x4c>)
 8006580:	2146      	movs	r1, #70	@ 0x46
 8006582:	f000 fa4d 	bl	8006a20 <__assert_func>
 8006586:	490b      	ldr	r1, [pc, #44]	@ (80065b4 <srand+0x50>)
 8006588:	4b0b      	ldr	r3, [pc, #44]	@ (80065b8 <srand+0x54>)
 800658a:	e9c0 1300 	strd	r1, r3, [r0]
 800658e:	4b0b      	ldr	r3, [pc, #44]	@ (80065bc <srand+0x58>)
 8006590:	6083      	str	r3, [r0, #8]
 8006592:	230b      	movs	r3, #11
 8006594:	8183      	strh	r3, [r0, #12]
 8006596:	2100      	movs	r1, #0
 8006598:	2001      	movs	r0, #1
 800659a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800659e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80065a0:	2200      	movs	r2, #0
 80065a2:	611c      	str	r4, [r3, #16]
 80065a4:	615a      	str	r2, [r3, #20]
 80065a6:	bd38      	pop	{r3, r4, r5, pc}
 80065a8:	20000040 	.word	0x20000040
 80065ac:	08007e20 	.word	0x08007e20
 80065b0:	08007e37 	.word	0x08007e37
 80065b4:	abcd330e 	.word	0xabcd330e
 80065b8:	e66d1234 	.word	0xe66d1234
 80065bc:	0005deec 	.word	0x0005deec

080065c0 <rand>:
 80065c0:	4b16      	ldr	r3, [pc, #88]	@ (800661c <rand+0x5c>)
 80065c2:	b510      	push	{r4, lr}
 80065c4:	681c      	ldr	r4, [r3, #0]
 80065c6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80065c8:	b9b3      	cbnz	r3, 80065f8 <rand+0x38>
 80065ca:	2018      	movs	r0, #24
 80065cc:	f7ff ff14 	bl	80063f8 <malloc>
 80065d0:	4602      	mov	r2, r0
 80065d2:	6320      	str	r0, [r4, #48]	@ 0x30
 80065d4:	b920      	cbnz	r0, 80065e0 <rand+0x20>
 80065d6:	4b12      	ldr	r3, [pc, #72]	@ (8006620 <rand+0x60>)
 80065d8:	4812      	ldr	r0, [pc, #72]	@ (8006624 <rand+0x64>)
 80065da:	2152      	movs	r1, #82	@ 0x52
 80065dc:	f000 fa20 	bl	8006a20 <__assert_func>
 80065e0:	4911      	ldr	r1, [pc, #68]	@ (8006628 <rand+0x68>)
 80065e2:	4b12      	ldr	r3, [pc, #72]	@ (800662c <rand+0x6c>)
 80065e4:	e9c0 1300 	strd	r1, r3, [r0]
 80065e8:	4b11      	ldr	r3, [pc, #68]	@ (8006630 <rand+0x70>)
 80065ea:	6083      	str	r3, [r0, #8]
 80065ec:	230b      	movs	r3, #11
 80065ee:	8183      	strh	r3, [r0, #12]
 80065f0:	2100      	movs	r1, #0
 80065f2:	2001      	movs	r0, #1
 80065f4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80065f8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80065fa:	480e      	ldr	r0, [pc, #56]	@ (8006634 <rand+0x74>)
 80065fc:	690b      	ldr	r3, [r1, #16]
 80065fe:	694c      	ldr	r4, [r1, #20]
 8006600:	4a0d      	ldr	r2, [pc, #52]	@ (8006638 <rand+0x78>)
 8006602:	4358      	muls	r0, r3
 8006604:	fb02 0004 	mla	r0, r2, r4, r0
 8006608:	fba3 3202 	umull	r3, r2, r3, r2
 800660c:	3301      	adds	r3, #1
 800660e:	eb40 0002 	adc.w	r0, r0, r2
 8006612:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8006616:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800661a:	bd10      	pop	{r4, pc}
 800661c:	20000040 	.word	0x20000040
 8006620:	08007e20 	.word	0x08007e20
 8006624:	08007e37 	.word	0x08007e37
 8006628:	abcd330e 	.word	0xabcd330e
 800662c:	e66d1234 	.word	0xe66d1234
 8006630:	0005deec 	.word	0x0005deec
 8006634:	5851f42d 	.word	0x5851f42d
 8006638:	4c957f2d 	.word	0x4c957f2d

0800663c <std>:
 800663c:	2300      	movs	r3, #0
 800663e:	b510      	push	{r4, lr}
 8006640:	4604      	mov	r4, r0
 8006642:	e9c0 3300 	strd	r3, r3, [r0]
 8006646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800664a:	6083      	str	r3, [r0, #8]
 800664c:	8181      	strh	r1, [r0, #12]
 800664e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006650:	81c2      	strh	r2, [r0, #14]
 8006652:	6183      	str	r3, [r0, #24]
 8006654:	4619      	mov	r1, r3
 8006656:	2208      	movs	r2, #8
 8006658:	305c      	adds	r0, #92	@ 0x5c
 800665a:	f000 f926 	bl	80068aa <memset>
 800665e:	4b0d      	ldr	r3, [pc, #52]	@ (8006694 <std+0x58>)
 8006660:	6263      	str	r3, [r4, #36]	@ 0x24
 8006662:	4b0d      	ldr	r3, [pc, #52]	@ (8006698 <std+0x5c>)
 8006664:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006666:	4b0d      	ldr	r3, [pc, #52]	@ (800669c <std+0x60>)
 8006668:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800666a:	4b0d      	ldr	r3, [pc, #52]	@ (80066a0 <std+0x64>)
 800666c:	6323      	str	r3, [r4, #48]	@ 0x30
 800666e:	4b0d      	ldr	r3, [pc, #52]	@ (80066a4 <std+0x68>)
 8006670:	6224      	str	r4, [r4, #32]
 8006672:	429c      	cmp	r4, r3
 8006674:	d006      	beq.n	8006684 <std+0x48>
 8006676:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800667a:	4294      	cmp	r4, r2
 800667c:	d002      	beq.n	8006684 <std+0x48>
 800667e:	33d0      	adds	r3, #208	@ 0xd0
 8006680:	429c      	cmp	r4, r3
 8006682:	d105      	bne.n	8006690 <std+0x54>
 8006684:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800668c:	f000 b9c4 	b.w	8006a18 <__retarget_lock_init_recursive>
 8006690:	bd10      	pop	{r4, pc}
 8006692:	bf00      	nop
 8006694:	08006825 	.word	0x08006825
 8006698:	08006847 	.word	0x08006847
 800669c:	0800687f 	.word	0x0800687f
 80066a0:	080068a3 	.word	0x080068a3
 80066a4:	200001f4 	.word	0x200001f4

080066a8 <stdio_exit_handler>:
 80066a8:	4a02      	ldr	r2, [pc, #8]	@ (80066b4 <stdio_exit_handler+0xc>)
 80066aa:	4903      	ldr	r1, [pc, #12]	@ (80066b8 <stdio_exit_handler+0x10>)
 80066ac:	4803      	ldr	r0, [pc, #12]	@ (80066bc <stdio_exit_handler+0x14>)
 80066ae:	f000 b869 	b.w	8006784 <_fwalk_sglue>
 80066b2:	bf00      	nop
 80066b4:	20000034 	.word	0x20000034
 80066b8:	08007449 	.word	0x08007449
 80066bc:	20000044 	.word	0x20000044

080066c0 <cleanup_stdio>:
 80066c0:	6841      	ldr	r1, [r0, #4]
 80066c2:	4b0c      	ldr	r3, [pc, #48]	@ (80066f4 <cleanup_stdio+0x34>)
 80066c4:	4299      	cmp	r1, r3
 80066c6:	b510      	push	{r4, lr}
 80066c8:	4604      	mov	r4, r0
 80066ca:	d001      	beq.n	80066d0 <cleanup_stdio+0x10>
 80066cc:	f000 febc 	bl	8007448 <_fflush_r>
 80066d0:	68a1      	ldr	r1, [r4, #8]
 80066d2:	4b09      	ldr	r3, [pc, #36]	@ (80066f8 <cleanup_stdio+0x38>)
 80066d4:	4299      	cmp	r1, r3
 80066d6:	d002      	beq.n	80066de <cleanup_stdio+0x1e>
 80066d8:	4620      	mov	r0, r4
 80066da:	f000 feb5 	bl	8007448 <_fflush_r>
 80066de:	68e1      	ldr	r1, [r4, #12]
 80066e0:	4b06      	ldr	r3, [pc, #24]	@ (80066fc <cleanup_stdio+0x3c>)
 80066e2:	4299      	cmp	r1, r3
 80066e4:	d004      	beq.n	80066f0 <cleanup_stdio+0x30>
 80066e6:	4620      	mov	r0, r4
 80066e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066ec:	f000 beac 	b.w	8007448 <_fflush_r>
 80066f0:	bd10      	pop	{r4, pc}
 80066f2:	bf00      	nop
 80066f4:	200001f4 	.word	0x200001f4
 80066f8:	2000025c 	.word	0x2000025c
 80066fc:	200002c4 	.word	0x200002c4

08006700 <global_stdio_init.part.0>:
 8006700:	b510      	push	{r4, lr}
 8006702:	4b0b      	ldr	r3, [pc, #44]	@ (8006730 <global_stdio_init.part.0+0x30>)
 8006704:	4c0b      	ldr	r4, [pc, #44]	@ (8006734 <global_stdio_init.part.0+0x34>)
 8006706:	4a0c      	ldr	r2, [pc, #48]	@ (8006738 <global_stdio_init.part.0+0x38>)
 8006708:	601a      	str	r2, [r3, #0]
 800670a:	4620      	mov	r0, r4
 800670c:	2200      	movs	r2, #0
 800670e:	2104      	movs	r1, #4
 8006710:	f7ff ff94 	bl	800663c <std>
 8006714:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006718:	2201      	movs	r2, #1
 800671a:	2109      	movs	r1, #9
 800671c:	f7ff ff8e 	bl	800663c <std>
 8006720:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006724:	2202      	movs	r2, #2
 8006726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800672a:	2112      	movs	r1, #18
 800672c:	f7ff bf86 	b.w	800663c <std>
 8006730:	2000032c 	.word	0x2000032c
 8006734:	200001f4 	.word	0x200001f4
 8006738:	080066a9 	.word	0x080066a9

0800673c <__sfp_lock_acquire>:
 800673c:	4801      	ldr	r0, [pc, #4]	@ (8006744 <__sfp_lock_acquire+0x8>)
 800673e:	f000 b96c 	b.w	8006a1a <__retarget_lock_acquire_recursive>
 8006742:	bf00      	nop
 8006744:	20000335 	.word	0x20000335

08006748 <__sfp_lock_release>:
 8006748:	4801      	ldr	r0, [pc, #4]	@ (8006750 <__sfp_lock_release+0x8>)
 800674a:	f000 b967 	b.w	8006a1c <__retarget_lock_release_recursive>
 800674e:	bf00      	nop
 8006750:	20000335 	.word	0x20000335

08006754 <__sinit>:
 8006754:	b510      	push	{r4, lr}
 8006756:	4604      	mov	r4, r0
 8006758:	f7ff fff0 	bl	800673c <__sfp_lock_acquire>
 800675c:	6a23      	ldr	r3, [r4, #32]
 800675e:	b11b      	cbz	r3, 8006768 <__sinit+0x14>
 8006760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006764:	f7ff bff0 	b.w	8006748 <__sfp_lock_release>
 8006768:	4b04      	ldr	r3, [pc, #16]	@ (800677c <__sinit+0x28>)
 800676a:	6223      	str	r3, [r4, #32]
 800676c:	4b04      	ldr	r3, [pc, #16]	@ (8006780 <__sinit+0x2c>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1f5      	bne.n	8006760 <__sinit+0xc>
 8006774:	f7ff ffc4 	bl	8006700 <global_stdio_init.part.0>
 8006778:	e7f2      	b.n	8006760 <__sinit+0xc>
 800677a:	bf00      	nop
 800677c:	080066c1 	.word	0x080066c1
 8006780:	2000032c 	.word	0x2000032c

08006784 <_fwalk_sglue>:
 8006784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006788:	4607      	mov	r7, r0
 800678a:	4688      	mov	r8, r1
 800678c:	4614      	mov	r4, r2
 800678e:	2600      	movs	r6, #0
 8006790:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006794:	f1b9 0901 	subs.w	r9, r9, #1
 8006798:	d505      	bpl.n	80067a6 <_fwalk_sglue+0x22>
 800679a:	6824      	ldr	r4, [r4, #0]
 800679c:	2c00      	cmp	r4, #0
 800679e:	d1f7      	bne.n	8006790 <_fwalk_sglue+0xc>
 80067a0:	4630      	mov	r0, r6
 80067a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067a6:	89ab      	ldrh	r3, [r5, #12]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d907      	bls.n	80067bc <_fwalk_sglue+0x38>
 80067ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067b0:	3301      	adds	r3, #1
 80067b2:	d003      	beq.n	80067bc <_fwalk_sglue+0x38>
 80067b4:	4629      	mov	r1, r5
 80067b6:	4638      	mov	r0, r7
 80067b8:	47c0      	blx	r8
 80067ba:	4306      	orrs	r6, r0
 80067bc:	3568      	adds	r5, #104	@ 0x68
 80067be:	e7e9      	b.n	8006794 <_fwalk_sglue+0x10>

080067c0 <iprintf>:
 80067c0:	b40f      	push	{r0, r1, r2, r3}
 80067c2:	b507      	push	{r0, r1, r2, lr}
 80067c4:	4906      	ldr	r1, [pc, #24]	@ (80067e0 <iprintf+0x20>)
 80067c6:	ab04      	add	r3, sp, #16
 80067c8:	6808      	ldr	r0, [r1, #0]
 80067ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80067ce:	6881      	ldr	r1, [r0, #8]
 80067d0:	9301      	str	r3, [sp, #4]
 80067d2:	f000 fb0f 	bl	8006df4 <_vfiprintf_r>
 80067d6:	b003      	add	sp, #12
 80067d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80067dc:	b004      	add	sp, #16
 80067de:	4770      	bx	lr
 80067e0:	20000040 	.word	0x20000040

080067e4 <siprintf>:
 80067e4:	b40e      	push	{r1, r2, r3}
 80067e6:	b500      	push	{lr}
 80067e8:	b09c      	sub	sp, #112	@ 0x70
 80067ea:	ab1d      	add	r3, sp, #116	@ 0x74
 80067ec:	9002      	str	r0, [sp, #8]
 80067ee:	9006      	str	r0, [sp, #24]
 80067f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80067f4:	4809      	ldr	r0, [pc, #36]	@ (800681c <siprintf+0x38>)
 80067f6:	9107      	str	r1, [sp, #28]
 80067f8:	9104      	str	r1, [sp, #16]
 80067fa:	4909      	ldr	r1, [pc, #36]	@ (8006820 <siprintf+0x3c>)
 80067fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006800:	9105      	str	r1, [sp, #20]
 8006802:	6800      	ldr	r0, [r0, #0]
 8006804:	9301      	str	r3, [sp, #4]
 8006806:	a902      	add	r1, sp, #8
 8006808:	f000 f9ce 	bl	8006ba8 <_svfiprintf_r>
 800680c:	9b02      	ldr	r3, [sp, #8]
 800680e:	2200      	movs	r2, #0
 8006810:	701a      	strb	r2, [r3, #0]
 8006812:	b01c      	add	sp, #112	@ 0x70
 8006814:	f85d eb04 	ldr.w	lr, [sp], #4
 8006818:	b003      	add	sp, #12
 800681a:	4770      	bx	lr
 800681c:	20000040 	.word	0x20000040
 8006820:	ffff0208 	.word	0xffff0208

08006824 <__sread>:
 8006824:	b510      	push	{r4, lr}
 8006826:	460c      	mov	r4, r1
 8006828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800682c:	f000 f896 	bl	800695c <_read_r>
 8006830:	2800      	cmp	r0, #0
 8006832:	bfab      	itete	ge
 8006834:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006836:	89a3      	ldrhlt	r3, [r4, #12]
 8006838:	181b      	addge	r3, r3, r0
 800683a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800683e:	bfac      	ite	ge
 8006840:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006842:	81a3      	strhlt	r3, [r4, #12]
 8006844:	bd10      	pop	{r4, pc}

08006846 <__swrite>:
 8006846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800684a:	461f      	mov	r7, r3
 800684c:	898b      	ldrh	r3, [r1, #12]
 800684e:	05db      	lsls	r3, r3, #23
 8006850:	4605      	mov	r5, r0
 8006852:	460c      	mov	r4, r1
 8006854:	4616      	mov	r6, r2
 8006856:	d505      	bpl.n	8006864 <__swrite+0x1e>
 8006858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800685c:	2302      	movs	r3, #2
 800685e:	2200      	movs	r2, #0
 8006860:	f000 f86a 	bl	8006938 <_lseek_r>
 8006864:	89a3      	ldrh	r3, [r4, #12]
 8006866:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800686a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800686e:	81a3      	strh	r3, [r4, #12]
 8006870:	4632      	mov	r2, r6
 8006872:	463b      	mov	r3, r7
 8006874:	4628      	mov	r0, r5
 8006876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800687a:	f000 b891 	b.w	80069a0 <_write_r>

0800687e <__sseek>:
 800687e:	b510      	push	{r4, lr}
 8006880:	460c      	mov	r4, r1
 8006882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006886:	f000 f857 	bl	8006938 <_lseek_r>
 800688a:	1c43      	adds	r3, r0, #1
 800688c:	89a3      	ldrh	r3, [r4, #12]
 800688e:	bf15      	itete	ne
 8006890:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006892:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006896:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800689a:	81a3      	strheq	r3, [r4, #12]
 800689c:	bf18      	it	ne
 800689e:	81a3      	strhne	r3, [r4, #12]
 80068a0:	bd10      	pop	{r4, pc}

080068a2 <__sclose>:
 80068a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068a6:	f000 b825 	b.w	80068f4 <_close_r>

080068aa <memset>:
 80068aa:	4402      	add	r2, r0
 80068ac:	4603      	mov	r3, r0
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d100      	bne.n	80068b4 <memset+0xa>
 80068b2:	4770      	bx	lr
 80068b4:	f803 1b01 	strb.w	r1, [r3], #1
 80068b8:	e7f9      	b.n	80068ae <memset+0x4>
	...

080068bc <time>:
 80068bc:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 80068be:	4b0c      	ldr	r3, [pc, #48]	@ (80068f0 <time+0x34>)
 80068c0:	f04f 36ff 	mov.w	r6, #4294967295
 80068c4:	f04f 37ff 	mov.w	r7, #4294967295
 80068c8:	4669      	mov	r1, sp
 80068ca:	4604      	mov	r4, r0
 80068cc:	2200      	movs	r2, #0
 80068ce:	6818      	ldr	r0, [r3, #0]
 80068d0:	e9cd 6700 	strd	r6, r7, [sp]
 80068d4:	f000 f81e 	bl	8006914 <_gettimeofday_r>
 80068d8:	2800      	cmp	r0, #0
 80068da:	bfb8      	it	lt
 80068dc:	e9cd 6700 	strdlt	r6, r7, [sp]
 80068e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068e4:	b10c      	cbz	r4, 80068ea <time+0x2e>
 80068e6:	e9c4 0100 	strd	r0, r1, [r4]
 80068ea:	b004      	add	sp, #16
 80068ec:	bdd0      	pop	{r4, r6, r7, pc}
 80068ee:	bf00      	nop
 80068f0:	20000040 	.word	0x20000040

080068f4 <_close_r>:
 80068f4:	b538      	push	{r3, r4, r5, lr}
 80068f6:	4d06      	ldr	r5, [pc, #24]	@ (8006910 <_close_r+0x1c>)
 80068f8:	2300      	movs	r3, #0
 80068fa:	4604      	mov	r4, r0
 80068fc:	4608      	mov	r0, r1
 80068fe:	602b      	str	r3, [r5, #0]
 8006900:	f7fb fc22 	bl	8002148 <_close>
 8006904:	1c43      	adds	r3, r0, #1
 8006906:	d102      	bne.n	800690e <_close_r+0x1a>
 8006908:	682b      	ldr	r3, [r5, #0]
 800690a:	b103      	cbz	r3, 800690e <_close_r+0x1a>
 800690c:	6023      	str	r3, [r4, #0]
 800690e:	bd38      	pop	{r3, r4, r5, pc}
 8006910:	20000330 	.word	0x20000330

08006914 <_gettimeofday_r>:
 8006914:	b538      	push	{r3, r4, r5, lr}
 8006916:	4d07      	ldr	r5, [pc, #28]	@ (8006934 <_gettimeofday_r+0x20>)
 8006918:	2300      	movs	r3, #0
 800691a:	4604      	mov	r4, r0
 800691c:	4608      	mov	r0, r1
 800691e:	4611      	mov	r1, r2
 8006920:	602b      	str	r3, [r5, #0]
 8006922:	f000 ff8d 	bl	8007840 <_gettimeofday>
 8006926:	1c43      	adds	r3, r0, #1
 8006928:	d102      	bne.n	8006930 <_gettimeofday_r+0x1c>
 800692a:	682b      	ldr	r3, [r5, #0]
 800692c:	b103      	cbz	r3, 8006930 <_gettimeofday_r+0x1c>
 800692e:	6023      	str	r3, [r4, #0]
 8006930:	bd38      	pop	{r3, r4, r5, pc}
 8006932:	bf00      	nop
 8006934:	20000330 	.word	0x20000330

08006938 <_lseek_r>:
 8006938:	b538      	push	{r3, r4, r5, lr}
 800693a:	4d07      	ldr	r5, [pc, #28]	@ (8006958 <_lseek_r+0x20>)
 800693c:	4604      	mov	r4, r0
 800693e:	4608      	mov	r0, r1
 8006940:	4611      	mov	r1, r2
 8006942:	2200      	movs	r2, #0
 8006944:	602a      	str	r2, [r5, #0]
 8006946:	461a      	mov	r2, r3
 8006948:	f7fb fc25 	bl	8002196 <_lseek>
 800694c:	1c43      	adds	r3, r0, #1
 800694e:	d102      	bne.n	8006956 <_lseek_r+0x1e>
 8006950:	682b      	ldr	r3, [r5, #0]
 8006952:	b103      	cbz	r3, 8006956 <_lseek_r+0x1e>
 8006954:	6023      	str	r3, [r4, #0]
 8006956:	bd38      	pop	{r3, r4, r5, pc}
 8006958:	20000330 	.word	0x20000330

0800695c <_read_r>:
 800695c:	b538      	push	{r3, r4, r5, lr}
 800695e:	4d07      	ldr	r5, [pc, #28]	@ (800697c <_read_r+0x20>)
 8006960:	4604      	mov	r4, r0
 8006962:	4608      	mov	r0, r1
 8006964:	4611      	mov	r1, r2
 8006966:	2200      	movs	r2, #0
 8006968:	602a      	str	r2, [r5, #0]
 800696a:	461a      	mov	r2, r3
 800696c:	f7fb fbb3 	bl	80020d6 <_read>
 8006970:	1c43      	adds	r3, r0, #1
 8006972:	d102      	bne.n	800697a <_read_r+0x1e>
 8006974:	682b      	ldr	r3, [r5, #0]
 8006976:	b103      	cbz	r3, 800697a <_read_r+0x1e>
 8006978:	6023      	str	r3, [r4, #0]
 800697a:	bd38      	pop	{r3, r4, r5, pc}
 800697c:	20000330 	.word	0x20000330

08006980 <_sbrk_r>:
 8006980:	b538      	push	{r3, r4, r5, lr}
 8006982:	4d06      	ldr	r5, [pc, #24]	@ (800699c <_sbrk_r+0x1c>)
 8006984:	2300      	movs	r3, #0
 8006986:	4604      	mov	r4, r0
 8006988:	4608      	mov	r0, r1
 800698a:	602b      	str	r3, [r5, #0]
 800698c:	f7fb fc10 	bl	80021b0 <_sbrk>
 8006990:	1c43      	adds	r3, r0, #1
 8006992:	d102      	bne.n	800699a <_sbrk_r+0x1a>
 8006994:	682b      	ldr	r3, [r5, #0]
 8006996:	b103      	cbz	r3, 800699a <_sbrk_r+0x1a>
 8006998:	6023      	str	r3, [r4, #0]
 800699a:	bd38      	pop	{r3, r4, r5, pc}
 800699c:	20000330 	.word	0x20000330

080069a0 <_write_r>:
 80069a0:	b538      	push	{r3, r4, r5, lr}
 80069a2:	4d07      	ldr	r5, [pc, #28]	@ (80069c0 <_write_r+0x20>)
 80069a4:	4604      	mov	r4, r0
 80069a6:	4608      	mov	r0, r1
 80069a8:	4611      	mov	r1, r2
 80069aa:	2200      	movs	r2, #0
 80069ac:	602a      	str	r2, [r5, #0]
 80069ae:	461a      	mov	r2, r3
 80069b0:	f7fb fbae 	bl	8002110 <_write>
 80069b4:	1c43      	adds	r3, r0, #1
 80069b6:	d102      	bne.n	80069be <_write_r+0x1e>
 80069b8:	682b      	ldr	r3, [r5, #0]
 80069ba:	b103      	cbz	r3, 80069be <_write_r+0x1e>
 80069bc:	6023      	str	r3, [r4, #0]
 80069be:	bd38      	pop	{r3, r4, r5, pc}
 80069c0:	20000330 	.word	0x20000330

080069c4 <__errno>:
 80069c4:	4b01      	ldr	r3, [pc, #4]	@ (80069cc <__errno+0x8>)
 80069c6:	6818      	ldr	r0, [r3, #0]
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	20000040 	.word	0x20000040

080069d0 <__libc_init_array>:
 80069d0:	b570      	push	{r4, r5, r6, lr}
 80069d2:	4d0d      	ldr	r5, [pc, #52]	@ (8006a08 <__libc_init_array+0x38>)
 80069d4:	4c0d      	ldr	r4, [pc, #52]	@ (8006a0c <__libc_init_array+0x3c>)
 80069d6:	1b64      	subs	r4, r4, r5
 80069d8:	10a4      	asrs	r4, r4, #2
 80069da:	2600      	movs	r6, #0
 80069dc:	42a6      	cmp	r6, r4
 80069de:	d109      	bne.n	80069f4 <__libc_init_array+0x24>
 80069e0:	4d0b      	ldr	r5, [pc, #44]	@ (8006a10 <__libc_init_array+0x40>)
 80069e2:	4c0c      	ldr	r4, [pc, #48]	@ (8006a14 <__libc_init_array+0x44>)
 80069e4:	f000 ff34 	bl	8007850 <_init>
 80069e8:	1b64      	subs	r4, r4, r5
 80069ea:	10a4      	asrs	r4, r4, #2
 80069ec:	2600      	movs	r6, #0
 80069ee:	42a6      	cmp	r6, r4
 80069f0:	d105      	bne.n	80069fe <__libc_init_array+0x2e>
 80069f2:	bd70      	pop	{r4, r5, r6, pc}
 80069f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80069f8:	4798      	blx	r3
 80069fa:	3601      	adds	r6, #1
 80069fc:	e7ee      	b.n	80069dc <__libc_init_array+0xc>
 80069fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a02:	4798      	blx	r3
 8006a04:	3601      	adds	r6, #1
 8006a06:	e7f2      	b.n	80069ee <__libc_init_array+0x1e>
 8006a08:	08007f08 	.word	0x08007f08
 8006a0c:	08007f08 	.word	0x08007f08
 8006a10:	08007f08 	.word	0x08007f08
 8006a14:	08007f0c 	.word	0x08007f0c

08006a18 <__retarget_lock_init_recursive>:
 8006a18:	4770      	bx	lr

08006a1a <__retarget_lock_acquire_recursive>:
 8006a1a:	4770      	bx	lr

08006a1c <__retarget_lock_release_recursive>:
 8006a1c:	4770      	bx	lr
	...

08006a20 <__assert_func>:
 8006a20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a22:	4614      	mov	r4, r2
 8006a24:	461a      	mov	r2, r3
 8006a26:	4b09      	ldr	r3, [pc, #36]	@ (8006a4c <__assert_func+0x2c>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4605      	mov	r5, r0
 8006a2c:	68d8      	ldr	r0, [r3, #12]
 8006a2e:	b954      	cbnz	r4, 8006a46 <__assert_func+0x26>
 8006a30:	4b07      	ldr	r3, [pc, #28]	@ (8006a50 <__assert_func+0x30>)
 8006a32:	461c      	mov	r4, r3
 8006a34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a38:	9100      	str	r1, [sp, #0]
 8006a3a:	462b      	mov	r3, r5
 8006a3c:	4905      	ldr	r1, [pc, #20]	@ (8006a54 <__assert_func+0x34>)
 8006a3e:	f000 fd2b 	bl	8007498 <fiprintf>
 8006a42:	f000 fdf7 	bl	8007634 <abort>
 8006a46:	4b04      	ldr	r3, [pc, #16]	@ (8006a58 <__assert_func+0x38>)
 8006a48:	e7f4      	b.n	8006a34 <__assert_func+0x14>
 8006a4a:	bf00      	nop
 8006a4c:	20000040 	.word	0x20000040
 8006a50:	08007eca 	.word	0x08007eca
 8006a54:	08007e9c 	.word	0x08007e9c
 8006a58:	08007e8f 	.word	0x08007e8f

08006a5c <_free_r>:
 8006a5c:	b538      	push	{r3, r4, r5, lr}
 8006a5e:	4605      	mov	r5, r0
 8006a60:	2900      	cmp	r1, #0
 8006a62:	d041      	beq.n	8006ae8 <_free_r+0x8c>
 8006a64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a68:	1f0c      	subs	r4, r1, #4
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	bfb8      	it	lt
 8006a6e:	18e4      	addlt	r4, r4, r3
 8006a70:	f7ff fd6c 	bl	800654c <__malloc_lock>
 8006a74:	4a1d      	ldr	r2, [pc, #116]	@ (8006aec <_free_r+0x90>)
 8006a76:	6813      	ldr	r3, [r2, #0]
 8006a78:	b933      	cbnz	r3, 8006a88 <_free_r+0x2c>
 8006a7a:	6063      	str	r3, [r4, #4]
 8006a7c:	6014      	str	r4, [r2, #0]
 8006a7e:	4628      	mov	r0, r5
 8006a80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a84:	f7ff bd68 	b.w	8006558 <__malloc_unlock>
 8006a88:	42a3      	cmp	r3, r4
 8006a8a:	d908      	bls.n	8006a9e <_free_r+0x42>
 8006a8c:	6820      	ldr	r0, [r4, #0]
 8006a8e:	1821      	adds	r1, r4, r0
 8006a90:	428b      	cmp	r3, r1
 8006a92:	bf01      	itttt	eq
 8006a94:	6819      	ldreq	r1, [r3, #0]
 8006a96:	685b      	ldreq	r3, [r3, #4]
 8006a98:	1809      	addeq	r1, r1, r0
 8006a9a:	6021      	streq	r1, [r4, #0]
 8006a9c:	e7ed      	b.n	8006a7a <_free_r+0x1e>
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	b10b      	cbz	r3, 8006aa8 <_free_r+0x4c>
 8006aa4:	42a3      	cmp	r3, r4
 8006aa6:	d9fa      	bls.n	8006a9e <_free_r+0x42>
 8006aa8:	6811      	ldr	r1, [r2, #0]
 8006aaa:	1850      	adds	r0, r2, r1
 8006aac:	42a0      	cmp	r0, r4
 8006aae:	d10b      	bne.n	8006ac8 <_free_r+0x6c>
 8006ab0:	6820      	ldr	r0, [r4, #0]
 8006ab2:	4401      	add	r1, r0
 8006ab4:	1850      	adds	r0, r2, r1
 8006ab6:	4283      	cmp	r3, r0
 8006ab8:	6011      	str	r1, [r2, #0]
 8006aba:	d1e0      	bne.n	8006a7e <_free_r+0x22>
 8006abc:	6818      	ldr	r0, [r3, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	6053      	str	r3, [r2, #4]
 8006ac2:	4408      	add	r0, r1
 8006ac4:	6010      	str	r0, [r2, #0]
 8006ac6:	e7da      	b.n	8006a7e <_free_r+0x22>
 8006ac8:	d902      	bls.n	8006ad0 <_free_r+0x74>
 8006aca:	230c      	movs	r3, #12
 8006acc:	602b      	str	r3, [r5, #0]
 8006ace:	e7d6      	b.n	8006a7e <_free_r+0x22>
 8006ad0:	6820      	ldr	r0, [r4, #0]
 8006ad2:	1821      	adds	r1, r4, r0
 8006ad4:	428b      	cmp	r3, r1
 8006ad6:	bf04      	itt	eq
 8006ad8:	6819      	ldreq	r1, [r3, #0]
 8006ada:	685b      	ldreq	r3, [r3, #4]
 8006adc:	6063      	str	r3, [r4, #4]
 8006ade:	bf04      	itt	eq
 8006ae0:	1809      	addeq	r1, r1, r0
 8006ae2:	6021      	streq	r1, [r4, #0]
 8006ae4:	6054      	str	r4, [r2, #4]
 8006ae6:	e7ca      	b.n	8006a7e <_free_r+0x22>
 8006ae8:	bd38      	pop	{r3, r4, r5, pc}
 8006aea:	bf00      	nop
 8006aec:	200001f0 	.word	0x200001f0

08006af0 <__ssputs_r>:
 8006af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006af4:	688e      	ldr	r6, [r1, #8]
 8006af6:	461f      	mov	r7, r3
 8006af8:	42be      	cmp	r6, r7
 8006afa:	680b      	ldr	r3, [r1, #0]
 8006afc:	4682      	mov	sl, r0
 8006afe:	460c      	mov	r4, r1
 8006b00:	4690      	mov	r8, r2
 8006b02:	d82d      	bhi.n	8006b60 <__ssputs_r+0x70>
 8006b04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b08:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006b0c:	d026      	beq.n	8006b5c <__ssputs_r+0x6c>
 8006b0e:	6965      	ldr	r5, [r4, #20]
 8006b10:	6909      	ldr	r1, [r1, #16]
 8006b12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b16:	eba3 0901 	sub.w	r9, r3, r1
 8006b1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b1e:	1c7b      	adds	r3, r7, #1
 8006b20:	444b      	add	r3, r9
 8006b22:	106d      	asrs	r5, r5, #1
 8006b24:	429d      	cmp	r5, r3
 8006b26:	bf38      	it	cc
 8006b28:	461d      	movcc	r5, r3
 8006b2a:	0553      	lsls	r3, r2, #21
 8006b2c:	d527      	bpl.n	8006b7e <__ssputs_r+0x8e>
 8006b2e:	4629      	mov	r1, r5
 8006b30:	f7ff fc8c 	bl	800644c <_malloc_r>
 8006b34:	4606      	mov	r6, r0
 8006b36:	b360      	cbz	r0, 8006b92 <__ssputs_r+0xa2>
 8006b38:	6921      	ldr	r1, [r4, #16]
 8006b3a:	464a      	mov	r2, r9
 8006b3c:	f000 fd6c 	bl	8007618 <memcpy>
 8006b40:	89a3      	ldrh	r3, [r4, #12]
 8006b42:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006b46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b4a:	81a3      	strh	r3, [r4, #12]
 8006b4c:	6126      	str	r6, [r4, #16]
 8006b4e:	6165      	str	r5, [r4, #20]
 8006b50:	444e      	add	r6, r9
 8006b52:	eba5 0509 	sub.w	r5, r5, r9
 8006b56:	6026      	str	r6, [r4, #0]
 8006b58:	60a5      	str	r5, [r4, #8]
 8006b5a:	463e      	mov	r6, r7
 8006b5c:	42be      	cmp	r6, r7
 8006b5e:	d900      	bls.n	8006b62 <__ssputs_r+0x72>
 8006b60:	463e      	mov	r6, r7
 8006b62:	6820      	ldr	r0, [r4, #0]
 8006b64:	4632      	mov	r2, r6
 8006b66:	4641      	mov	r1, r8
 8006b68:	f000 fd3c 	bl	80075e4 <memmove>
 8006b6c:	68a3      	ldr	r3, [r4, #8]
 8006b6e:	1b9b      	subs	r3, r3, r6
 8006b70:	60a3      	str	r3, [r4, #8]
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	4433      	add	r3, r6
 8006b76:	6023      	str	r3, [r4, #0]
 8006b78:	2000      	movs	r0, #0
 8006b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b7e:	462a      	mov	r2, r5
 8006b80:	f000 fd5f 	bl	8007642 <_realloc_r>
 8006b84:	4606      	mov	r6, r0
 8006b86:	2800      	cmp	r0, #0
 8006b88:	d1e0      	bne.n	8006b4c <__ssputs_r+0x5c>
 8006b8a:	6921      	ldr	r1, [r4, #16]
 8006b8c:	4650      	mov	r0, sl
 8006b8e:	f7ff ff65 	bl	8006a5c <_free_r>
 8006b92:	230c      	movs	r3, #12
 8006b94:	f8ca 3000 	str.w	r3, [sl]
 8006b98:	89a3      	ldrh	r3, [r4, #12]
 8006b9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b9e:	81a3      	strh	r3, [r4, #12]
 8006ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba4:	e7e9      	b.n	8006b7a <__ssputs_r+0x8a>
	...

08006ba8 <_svfiprintf_r>:
 8006ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bac:	4698      	mov	r8, r3
 8006bae:	898b      	ldrh	r3, [r1, #12]
 8006bb0:	061b      	lsls	r3, r3, #24
 8006bb2:	b09d      	sub	sp, #116	@ 0x74
 8006bb4:	4607      	mov	r7, r0
 8006bb6:	460d      	mov	r5, r1
 8006bb8:	4614      	mov	r4, r2
 8006bba:	d510      	bpl.n	8006bde <_svfiprintf_r+0x36>
 8006bbc:	690b      	ldr	r3, [r1, #16]
 8006bbe:	b973      	cbnz	r3, 8006bde <_svfiprintf_r+0x36>
 8006bc0:	2140      	movs	r1, #64	@ 0x40
 8006bc2:	f7ff fc43 	bl	800644c <_malloc_r>
 8006bc6:	6028      	str	r0, [r5, #0]
 8006bc8:	6128      	str	r0, [r5, #16]
 8006bca:	b930      	cbnz	r0, 8006bda <_svfiprintf_r+0x32>
 8006bcc:	230c      	movs	r3, #12
 8006bce:	603b      	str	r3, [r7, #0]
 8006bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd4:	b01d      	add	sp, #116	@ 0x74
 8006bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bda:	2340      	movs	r3, #64	@ 0x40
 8006bdc:	616b      	str	r3, [r5, #20]
 8006bde:	2300      	movs	r3, #0
 8006be0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006be2:	2320      	movs	r3, #32
 8006be4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006be8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bec:	2330      	movs	r3, #48	@ 0x30
 8006bee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006d8c <_svfiprintf_r+0x1e4>
 8006bf2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006bf6:	f04f 0901 	mov.w	r9, #1
 8006bfa:	4623      	mov	r3, r4
 8006bfc:	469a      	mov	sl, r3
 8006bfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c02:	b10a      	cbz	r2, 8006c08 <_svfiprintf_r+0x60>
 8006c04:	2a25      	cmp	r2, #37	@ 0x25
 8006c06:	d1f9      	bne.n	8006bfc <_svfiprintf_r+0x54>
 8006c08:	ebba 0b04 	subs.w	fp, sl, r4
 8006c0c:	d00b      	beq.n	8006c26 <_svfiprintf_r+0x7e>
 8006c0e:	465b      	mov	r3, fp
 8006c10:	4622      	mov	r2, r4
 8006c12:	4629      	mov	r1, r5
 8006c14:	4638      	mov	r0, r7
 8006c16:	f7ff ff6b 	bl	8006af0 <__ssputs_r>
 8006c1a:	3001      	adds	r0, #1
 8006c1c:	f000 80a7 	beq.w	8006d6e <_svfiprintf_r+0x1c6>
 8006c20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c22:	445a      	add	r2, fp
 8006c24:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c26:	f89a 3000 	ldrb.w	r3, [sl]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	f000 809f 	beq.w	8006d6e <_svfiprintf_r+0x1c6>
 8006c30:	2300      	movs	r3, #0
 8006c32:	f04f 32ff 	mov.w	r2, #4294967295
 8006c36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c3a:	f10a 0a01 	add.w	sl, sl, #1
 8006c3e:	9304      	str	r3, [sp, #16]
 8006c40:	9307      	str	r3, [sp, #28]
 8006c42:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c46:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c48:	4654      	mov	r4, sl
 8006c4a:	2205      	movs	r2, #5
 8006c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c50:	484e      	ldr	r0, [pc, #312]	@ (8006d8c <_svfiprintf_r+0x1e4>)
 8006c52:	f7f9 fabd 	bl	80001d0 <memchr>
 8006c56:	9a04      	ldr	r2, [sp, #16]
 8006c58:	b9d8      	cbnz	r0, 8006c92 <_svfiprintf_r+0xea>
 8006c5a:	06d0      	lsls	r0, r2, #27
 8006c5c:	bf44      	itt	mi
 8006c5e:	2320      	movmi	r3, #32
 8006c60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c64:	0711      	lsls	r1, r2, #28
 8006c66:	bf44      	itt	mi
 8006c68:	232b      	movmi	r3, #43	@ 0x2b
 8006c6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c6e:	f89a 3000 	ldrb.w	r3, [sl]
 8006c72:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c74:	d015      	beq.n	8006ca2 <_svfiprintf_r+0xfa>
 8006c76:	9a07      	ldr	r2, [sp, #28]
 8006c78:	4654      	mov	r4, sl
 8006c7a:	2000      	movs	r0, #0
 8006c7c:	f04f 0c0a 	mov.w	ip, #10
 8006c80:	4621      	mov	r1, r4
 8006c82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c86:	3b30      	subs	r3, #48	@ 0x30
 8006c88:	2b09      	cmp	r3, #9
 8006c8a:	d94b      	bls.n	8006d24 <_svfiprintf_r+0x17c>
 8006c8c:	b1b0      	cbz	r0, 8006cbc <_svfiprintf_r+0x114>
 8006c8e:	9207      	str	r2, [sp, #28]
 8006c90:	e014      	b.n	8006cbc <_svfiprintf_r+0x114>
 8006c92:	eba0 0308 	sub.w	r3, r0, r8
 8006c96:	fa09 f303 	lsl.w	r3, r9, r3
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	9304      	str	r3, [sp, #16]
 8006c9e:	46a2      	mov	sl, r4
 8006ca0:	e7d2      	b.n	8006c48 <_svfiprintf_r+0xa0>
 8006ca2:	9b03      	ldr	r3, [sp, #12]
 8006ca4:	1d19      	adds	r1, r3, #4
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	9103      	str	r1, [sp, #12]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	bfbb      	ittet	lt
 8006cae:	425b      	neglt	r3, r3
 8006cb0:	f042 0202 	orrlt.w	r2, r2, #2
 8006cb4:	9307      	strge	r3, [sp, #28]
 8006cb6:	9307      	strlt	r3, [sp, #28]
 8006cb8:	bfb8      	it	lt
 8006cba:	9204      	strlt	r2, [sp, #16]
 8006cbc:	7823      	ldrb	r3, [r4, #0]
 8006cbe:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cc0:	d10a      	bne.n	8006cd8 <_svfiprintf_r+0x130>
 8006cc2:	7863      	ldrb	r3, [r4, #1]
 8006cc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cc6:	d132      	bne.n	8006d2e <_svfiprintf_r+0x186>
 8006cc8:	9b03      	ldr	r3, [sp, #12]
 8006cca:	1d1a      	adds	r2, r3, #4
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	9203      	str	r2, [sp, #12]
 8006cd0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006cd4:	3402      	adds	r4, #2
 8006cd6:	9305      	str	r3, [sp, #20]
 8006cd8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006d9c <_svfiprintf_r+0x1f4>
 8006cdc:	7821      	ldrb	r1, [r4, #0]
 8006cde:	2203      	movs	r2, #3
 8006ce0:	4650      	mov	r0, sl
 8006ce2:	f7f9 fa75 	bl	80001d0 <memchr>
 8006ce6:	b138      	cbz	r0, 8006cf8 <_svfiprintf_r+0x150>
 8006ce8:	9b04      	ldr	r3, [sp, #16]
 8006cea:	eba0 000a 	sub.w	r0, r0, sl
 8006cee:	2240      	movs	r2, #64	@ 0x40
 8006cf0:	4082      	lsls	r2, r0
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	3401      	adds	r4, #1
 8006cf6:	9304      	str	r3, [sp, #16]
 8006cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cfc:	4824      	ldr	r0, [pc, #144]	@ (8006d90 <_svfiprintf_r+0x1e8>)
 8006cfe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d02:	2206      	movs	r2, #6
 8006d04:	f7f9 fa64 	bl	80001d0 <memchr>
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	d036      	beq.n	8006d7a <_svfiprintf_r+0x1d2>
 8006d0c:	4b21      	ldr	r3, [pc, #132]	@ (8006d94 <_svfiprintf_r+0x1ec>)
 8006d0e:	bb1b      	cbnz	r3, 8006d58 <_svfiprintf_r+0x1b0>
 8006d10:	9b03      	ldr	r3, [sp, #12]
 8006d12:	3307      	adds	r3, #7
 8006d14:	f023 0307 	bic.w	r3, r3, #7
 8006d18:	3308      	adds	r3, #8
 8006d1a:	9303      	str	r3, [sp, #12]
 8006d1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d1e:	4433      	add	r3, r6
 8006d20:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d22:	e76a      	b.n	8006bfa <_svfiprintf_r+0x52>
 8006d24:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d28:	460c      	mov	r4, r1
 8006d2a:	2001      	movs	r0, #1
 8006d2c:	e7a8      	b.n	8006c80 <_svfiprintf_r+0xd8>
 8006d2e:	2300      	movs	r3, #0
 8006d30:	3401      	adds	r4, #1
 8006d32:	9305      	str	r3, [sp, #20]
 8006d34:	4619      	mov	r1, r3
 8006d36:	f04f 0c0a 	mov.w	ip, #10
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d40:	3a30      	subs	r2, #48	@ 0x30
 8006d42:	2a09      	cmp	r2, #9
 8006d44:	d903      	bls.n	8006d4e <_svfiprintf_r+0x1a6>
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d0c6      	beq.n	8006cd8 <_svfiprintf_r+0x130>
 8006d4a:	9105      	str	r1, [sp, #20]
 8006d4c:	e7c4      	b.n	8006cd8 <_svfiprintf_r+0x130>
 8006d4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d52:	4604      	mov	r4, r0
 8006d54:	2301      	movs	r3, #1
 8006d56:	e7f0      	b.n	8006d3a <_svfiprintf_r+0x192>
 8006d58:	ab03      	add	r3, sp, #12
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	462a      	mov	r2, r5
 8006d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8006d98 <_svfiprintf_r+0x1f0>)
 8006d60:	a904      	add	r1, sp, #16
 8006d62:	4638      	mov	r0, r7
 8006d64:	f3af 8000 	nop.w
 8006d68:	1c42      	adds	r2, r0, #1
 8006d6a:	4606      	mov	r6, r0
 8006d6c:	d1d6      	bne.n	8006d1c <_svfiprintf_r+0x174>
 8006d6e:	89ab      	ldrh	r3, [r5, #12]
 8006d70:	065b      	lsls	r3, r3, #25
 8006d72:	f53f af2d 	bmi.w	8006bd0 <_svfiprintf_r+0x28>
 8006d76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d78:	e72c      	b.n	8006bd4 <_svfiprintf_r+0x2c>
 8006d7a:	ab03      	add	r3, sp, #12
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	462a      	mov	r2, r5
 8006d80:	4b05      	ldr	r3, [pc, #20]	@ (8006d98 <_svfiprintf_r+0x1f0>)
 8006d82:	a904      	add	r1, sp, #16
 8006d84:	4638      	mov	r0, r7
 8006d86:	f000 f9bb 	bl	8007100 <_printf_i>
 8006d8a:	e7ed      	b.n	8006d68 <_svfiprintf_r+0x1c0>
 8006d8c:	08007ecb 	.word	0x08007ecb
 8006d90:	08007ed5 	.word	0x08007ed5
 8006d94:	00000000 	.word	0x00000000
 8006d98:	08006af1 	.word	0x08006af1
 8006d9c:	08007ed1 	.word	0x08007ed1

08006da0 <__sfputc_r>:
 8006da0:	6893      	ldr	r3, [r2, #8]
 8006da2:	3b01      	subs	r3, #1
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	b410      	push	{r4}
 8006da8:	6093      	str	r3, [r2, #8]
 8006daa:	da08      	bge.n	8006dbe <__sfputc_r+0x1e>
 8006dac:	6994      	ldr	r4, [r2, #24]
 8006dae:	42a3      	cmp	r3, r4
 8006db0:	db01      	blt.n	8006db6 <__sfputc_r+0x16>
 8006db2:	290a      	cmp	r1, #10
 8006db4:	d103      	bne.n	8006dbe <__sfputc_r+0x1e>
 8006db6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006dba:	f000 bb7f 	b.w	80074bc <__swbuf_r>
 8006dbe:	6813      	ldr	r3, [r2, #0]
 8006dc0:	1c58      	adds	r0, r3, #1
 8006dc2:	6010      	str	r0, [r2, #0]
 8006dc4:	7019      	strb	r1, [r3, #0]
 8006dc6:	4608      	mov	r0, r1
 8006dc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <__sfputs_r>:
 8006dce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd0:	4606      	mov	r6, r0
 8006dd2:	460f      	mov	r7, r1
 8006dd4:	4614      	mov	r4, r2
 8006dd6:	18d5      	adds	r5, r2, r3
 8006dd8:	42ac      	cmp	r4, r5
 8006dda:	d101      	bne.n	8006de0 <__sfputs_r+0x12>
 8006ddc:	2000      	movs	r0, #0
 8006dde:	e007      	b.n	8006df0 <__sfputs_r+0x22>
 8006de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006de4:	463a      	mov	r2, r7
 8006de6:	4630      	mov	r0, r6
 8006de8:	f7ff ffda 	bl	8006da0 <__sfputc_r>
 8006dec:	1c43      	adds	r3, r0, #1
 8006dee:	d1f3      	bne.n	8006dd8 <__sfputs_r+0xa>
 8006df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006df4 <_vfiprintf_r>:
 8006df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df8:	460d      	mov	r5, r1
 8006dfa:	b09d      	sub	sp, #116	@ 0x74
 8006dfc:	4614      	mov	r4, r2
 8006dfe:	4698      	mov	r8, r3
 8006e00:	4606      	mov	r6, r0
 8006e02:	b118      	cbz	r0, 8006e0c <_vfiprintf_r+0x18>
 8006e04:	6a03      	ldr	r3, [r0, #32]
 8006e06:	b90b      	cbnz	r3, 8006e0c <_vfiprintf_r+0x18>
 8006e08:	f7ff fca4 	bl	8006754 <__sinit>
 8006e0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e0e:	07d9      	lsls	r1, r3, #31
 8006e10:	d405      	bmi.n	8006e1e <_vfiprintf_r+0x2a>
 8006e12:	89ab      	ldrh	r3, [r5, #12]
 8006e14:	059a      	lsls	r2, r3, #22
 8006e16:	d402      	bmi.n	8006e1e <_vfiprintf_r+0x2a>
 8006e18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e1a:	f7ff fdfe 	bl	8006a1a <__retarget_lock_acquire_recursive>
 8006e1e:	89ab      	ldrh	r3, [r5, #12]
 8006e20:	071b      	lsls	r3, r3, #28
 8006e22:	d501      	bpl.n	8006e28 <_vfiprintf_r+0x34>
 8006e24:	692b      	ldr	r3, [r5, #16]
 8006e26:	b99b      	cbnz	r3, 8006e50 <_vfiprintf_r+0x5c>
 8006e28:	4629      	mov	r1, r5
 8006e2a:	4630      	mov	r0, r6
 8006e2c:	f000 fb84 	bl	8007538 <__swsetup_r>
 8006e30:	b170      	cbz	r0, 8006e50 <_vfiprintf_r+0x5c>
 8006e32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e34:	07dc      	lsls	r4, r3, #31
 8006e36:	d504      	bpl.n	8006e42 <_vfiprintf_r+0x4e>
 8006e38:	f04f 30ff 	mov.w	r0, #4294967295
 8006e3c:	b01d      	add	sp, #116	@ 0x74
 8006e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e42:	89ab      	ldrh	r3, [r5, #12]
 8006e44:	0598      	lsls	r0, r3, #22
 8006e46:	d4f7      	bmi.n	8006e38 <_vfiprintf_r+0x44>
 8006e48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e4a:	f7ff fde7 	bl	8006a1c <__retarget_lock_release_recursive>
 8006e4e:	e7f3      	b.n	8006e38 <_vfiprintf_r+0x44>
 8006e50:	2300      	movs	r3, #0
 8006e52:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e54:	2320      	movs	r3, #32
 8006e56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e5e:	2330      	movs	r3, #48	@ 0x30
 8006e60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007010 <_vfiprintf_r+0x21c>
 8006e64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e68:	f04f 0901 	mov.w	r9, #1
 8006e6c:	4623      	mov	r3, r4
 8006e6e:	469a      	mov	sl, r3
 8006e70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e74:	b10a      	cbz	r2, 8006e7a <_vfiprintf_r+0x86>
 8006e76:	2a25      	cmp	r2, #37	@ 0x25
 8006e78:	d1f9      	bne.n	8006e6e <_vfiprintf_r+0x7a>
 8006e7a:	ebba 0b04 	subs.w	fp, sl, r4
 8006e7e:	d00b      	beq.n	8006e98 <_vfiprintf_r+0xa4>
 8006e80:	465b      	mov	r3, fp
 8006e82:	4622      	mov	r2, r4
 8006e84:	4629      	mov	r1, r5
 8006e86:	4630      	mov	r0, r6
 8006e88:	f7ff ffa1 	bl	8006dce <__sfputs_r>
 8006e8c:	3001      	adds	r0, #1
 8006e8e:	f000 80a7 	beq.w	8006fe0 <_vfiprintf_r+0x1ec>
 8006e92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e94:	445a      	add	r2, fp
 8006e96:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e98:	f89a 3000 	ldrb.w	r3, [sl]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 809f 	beq.w	8006fe0 <_vfiprintf_r+0x1ec>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006eac:	f10a 0a01 	add.w	sl, sl, #1
 8006eb0:	9304      	str	r3, [sp, #16]
 8006eb2:	9307      	str	r3, [sp, #28]
 8006eb4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006eb8:	931a      	str	r3, [sp, #104]	@ 0x68
 8006eba:	4654      	mov	r4, sl
 8006ebc:	2205      	movs	r2, #5
 8006ebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ec2:	4853      	ldr	r0, [pc, #332]	@ (8007010 <_vfiprintf_r+0x21c>)
 8006ec4:	f7f9 f984 	bl	80001d0 <memchr>
 8006ec8:	9a04      	ldr	r2, [sp, #16]
 8006eca:	b9d8      	cbnz	r0, 8006f04 <_vfiprintf_r+0x110>
 8006ecc:	06d1      	lsls	r1, r2, #27
 8006ece:	bf44      	itt	mi
 8006ed0:	2320      	movmi	r3, #32
 8006ed2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ed6:	0713      	lsls	r3, r2, #28
 8006ed8:	bf44      	itt	mi
 8006eda:	232b      	movmi	r3, #43	@ 0x2b
 8006edc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ee0:	f89a 3000 	ldrb.w	r3, [sl]
 8006ee4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ee6:	d015      	beq.n	8006f14 <_vfiprintf_r+0x120>
 8006ee8:	9a07      	ldr	r2, [sp, #28]
 8006eea:	4654      	mov	r4, sl
 8006eec:	2000      	movs	r0, #0
 8006eee:	f04f 0c0a 	mov.w	ip, #10
 8006ef2:	4621      	mov	r1, r4
 8006ef4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ef8:	3b30      	subs	r3, #48	@ 0x30
 8006efa:	2b09      	cmp	r3, #9
 8006efc:	d94b      	bls.n	8006f96 <_vfiprintf_r+0x1a2>
 8006efe:	b1b0      	cbz	r0, 8006f2e <_vfiprintf_r+0x13a>
 8006f00:	9207      	str	r2, [sp, #28]
 8006f02:	e014      	b.n	8006f2e <_vfiprintf_r+0x13a>
 8006f04:	eba0 0308 	sub.w	r3, r0, r8
 8006f08:	fa09 f303 	lsl.w	r3, r9, r3
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	9304      	str	r3, [sp, #16]
 8006f10:	46a2      	mov	sl, r4
 8006f12:	e7d2      	b.n	8006eba <_vfiprintf_r+0xc6>
 8006f14:	9b03      	ldr	r3, [sp, #12]
 8006f16:	1d19      	adds	r1, r3, #4
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	9103      	str	r1, [sp, #12]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	bfbb      	ittet	lt
 8006f20:	425b      	neglt	r3, r3
 8006f22:	f042 0202 	orrlt.w	r2, r2, #2
 8006f26:	9307      	strge	r3, [sp, #28]
 8006f28:	9307      	strlt	r3, [sp, #28]
 8006f2a:	bfb8      	it	lt
 8006f2c:	9204      	strlt	r2, [sp, #16]
 8006f2e:	7823      	ldrb	r3, [r4, #0]
 8006f30:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f32:	d10a      	bne.n	8006f4a <_vfiprintf_r+0x156>
 8006f34:	7863      	ldrb	r3, [r4, #1]
 8006f36:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f38:	d132      	bne.n	8006fa0 <_vfiprintf_r+0x1ac>
 8006f3a:	9b03      	ldr	r3, [sp, #12]
 8006f3c:	1d1a      	adds	r2, r3, #4
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	9203      	str	r2, [sp, #12]
 8006f42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f46:	3402      	adds	r4, #2
 8006f48:	9305      	str	r3, [sp, #20]
 8006f4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007020 <_vfiprintf_r+0x22c>
 8006f4e:	7821      	ldrb	r1, [r4, #0]
 8006f50:	2203      	movs	r2, #3
 8006f52:	4650      	mov	r0, sl
 8006f54:	f7f9 f93c 	bl	80001d0 <memchr>
 8006f58:	b138      	cbz	r0, 8006f6a <_vfiprintf_r+0x176>
 8006f5a:	9b04      	ldr	r3, [sp, #16]
 8006f5c:	eba0 000a 	sub.w	r0, r0, sl
 8006f60:	2240      	movs	r2, #64	@ 0x40
 8006f62:	4082      	lsls	r2, r0
 8006f64:	4313      	orrs	r3, r2
 8006f66:	3401      	adds	r4, #1
 8006f68:	9304      	str	r3, [sp, #16]
 8006f6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f6e:	4829      	ldr	r0, [pc, #164]	@ (8007014 <_vfiprintf_r+0x220>)
 8006f70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f74:	2206      	movs	r2, #6
 8006f76:	f7f9 f92b 	bl	80001d0 <memchr>
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	d03f      	beq.n	8006ffe <_vfiprintf_r+0x20a>
 8006f7e:	4b26      	ldr	r3, [pc, #152]	@ (8007018 <_vfiprintf_r+0x224>)
 8006f80:	bb1b      	cbnz	r3, 8006fca <_vfiprintf_r+0x1d6>
 8006f82:	9b03      	ldr	r3, [sp, #12]
 8006f84:	3307      	adds	r3, #7
 8006f86:	f023 0307 	bic.w	r3, r3, #7
 8006f8a:	3308      	adds	r3, #8
 8006f8c:	9303      	str	r3, [sp, #12]
 8006f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f90:	443b      	add	r3, r7
 8006f92:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f94:	e76a      	b.n	8006e6c <_vfiprintf_r+0x78>
 8006f96:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f9a:	460c      	mov	r4, r1
 8006f9c:	2001      	movs	r0, #1
 8006f9e:	e7a8      	b.n	8006ef2 <_vfiprintf_r+0xfe>
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	3401      	adds	r4, #1
 8006fa4:	9305      	str	r3, [sp, #20]
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	f04f 0c0a 	mov.w	ip, #10
 8006fac:	4620      	mov	r0, r4
 8006fae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fb2:	3a30      	subs	r2, #48	@ 0x30
 8006fb4:	2a09      	cmp	r2, #9
 8006fb6:	d903      	bls.n	8006fc0 <_vfiprintf_r+0x1cc>
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d0c6      	beq.n	8006f4a <_vfiprintf_r+0x156>
 8006fbc:	9105      	str	r1, [sp, #20]
 8006fbe:	e7c4      	b.n	8006f4a <_vfiprintf_r+0x156>
 8006fc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fc4:	4604      	mov	r4, r0
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e7f0      	b.n	8006fac <_vfiprintf_r+0x1b8>
 8006fca:	ab03      	add	r3, sp, #12
 8006fcc:	9300      	str	r3, [sp, #0]
 8006fce:	462a      	mov	r2, r5
 8006fd0:	4b12      	ldr	r3, [pc, #72]	@ (800701c <_vfiprintf_r+0x228>)
 8006fd2:	a904      	add	r1, sp, #16
 8006fd4:	4630      	mov	r0, r6
 8006fd6:	f3af 8000 	nop.w
 8006fda:	4607      	mov	r7, r0
 8006fdc:	1c78      	adds	r0, r7, #1
 8006fde:	d1d6      	bne.n	8006f8e <_vfiprintf_r+0x19a>
 8006fe0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006fe2:	07d9      	lsls	r1, r3, #31
 8006fe4:	d405      	bmi.n	8006ff2 <_vfiprintf_r+0x1fe>
 8006fe6:	89ab      	ldrh	r3, [r5, #12]
 8006fe8:	059a      	lsls	r2, r3, #22
 8006fea:	d402      	bmi.n	8006ff2 <_vfiprintf_r+0x1fe>
 8006fec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006fee:	f7ff fd15 	bl	8006a1c <__retarget_lock_release_recursive>
 8006ff2:	89ab      	ldrh	r3, [r5, #12]
 8006ff4:	065b      	lsls	r3, r3, #25
 8006ff6:	f53f af1f 	bmi.w	8006e38 <_vfiprintf_r+0x44>
 8006ffa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ffc:	e71e      	b.n	8006e3c <_vfiprintf_r+0x48>
 8006ffe:	ab03      	add	r3, sp, #12
 8007000:	9300      	str	r3, [sp, #0]
 8007002:	462a      	mov	r2, r5
 8007004:	4b05      	ldr	r3, [pc, #20]	@ (800701c <_vfiprintf_r+0x228>)
 8007006:	a904      	add	r1, sp, #16
 8007008:	4630      	mov	r0, r6
 800700a:	f000 f879 	bl	8007100 <_printf_i>
 800700e:	e7e4      	b.n	8006fda <_vfiprintf_r+0x1e6>
 8007010:	08007ecb 	.word	0x08007ecb
 8007014:	08007ed5 	.word	0x08007ed5
 8007018:	00000000 	.word	0x00000000
 800701c:	08006dcf 	.word	0x08006dcf
 8007020:	08007ed1 	.word	0x08007ed1

08007024 <_printf_common>:
 8007024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007028:	4616      	mov	r6, r2
 800702a:	4698      	mov	r8, r3
 800702c:	688a      	ldr	r2, [r1, #8]
 800702e:	690b      	ldr	r3, [r1, #16]
 8007030:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007034:	4293      	cmp	r3, r2
 8007036:	bfb8      	it	lt
 8007038:	4613      	movlt	r3, r2
 800703a:	6033      	str	r3, [r6, #0]
 800703c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007040:	4607      	mov	r7, r0
 8007042:	460c      	mov	r4, r1
 8007044:	b10a      	cbz	r2, 800704a <_printf_common+0x26>
 8007046:	3301      	adds	r3, #1
 8007048:	6033      	str	r3, [r6, #0]
 800704a:	6823      	ldr	r3, [r4, #0]
 800704c:	0699      	lsls	r1, r3, #26
 800704e:	bf42      	ittt	mi
 8007050:	6833      	ldrmi	r3, [r6, #0]
 8007052:	3302      	addmi	r3, #2
 8007054:	6033      	strmi	r3, [r6, #0]
 8007056:	6825      	ldr	r5, [r4, #0]
 8007058:	f015 0506 	ands.w	r5, r5, #6
 800705c:	d106      	bne.n	800706c <_printf_common+0x48>
 800705e:	f104 0a19 	add.w	sl, r4, #25
 8007062:	68e3      	ldr	r3, [r4, #12]
 8007064:	6832      	ldr	r2, [r6, #0]
 8007066:	1a9b      	subs	r3, r3, r2
 8007068:	42ab      	cmp	r3, r5
 800706a:	dc26      	bgt.n	80070ba <_printf_common+0x96>
 800706c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007070:	6822      	ldr	r2, [r4, #0]
 8007072:	3b00      	subs	r3, #0
 8007074:	bf18      	it	ne
 8007076:	2301      	movne	r3, #1
 8007078:	0692      	lsls	r2, r2, #26
 800707a:	d42b      	bmi.n	80070d4 <_printf_common+0xb0>
 800707c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007080:	4641      	mov	r1, r8
 8007082:	4638      	mov	r0, r7
 8007084:	47c8      	blx	r9
 8007086:	3001      	adds	r0, #1
 8007088:	d01e      	beq.n	80070c8 <_printf_common+0xa4>
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	6922      	ldr	r2, [r4, #16]
 800708e:	f003 0306 	and.w	r3, r3, #6
 8007092:	2b04      	cmp	r3, #4
 8007094:	bf02      	ittt	eq
 8007096:	68e5      	ldreq	r5, [r4, #12]
 8007098:	6833      	ldreq	r3, [r6, #0]
 800709a:	1aed      	subeq	r5, r5, r3
 800709c:	68a3      	ldr	r3, [r4, #8]
 800709e:	bf0c      	ite	eq
 80070a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070a4:	2500      	movne	r5, #0
 80070a6:	4293      	cmp	r3, r2
 80070a8:	bfc4      	itt	gt
 80070aa:	1a9b      	subgt	r3, r3, r2
 80070ac:	18ed      	addgt	r5, r5, r3
 80070ae:	2600      	movs	r6, #0
 80070b0:	341a      	adds	r4, #26
 80070b2:	42b5      	cmp	r5, r6
 80070b4:	d11a      	bne.n	80070ec <_printf_common+0xc8>
 80070b6:	2000      	movs	r0, #0
 80070b8:	e008      	b.n	80070cc <_printf_common+0xa8>
 80070ba:	2301      	movs	r3, #1
 80070bc:	4652      	mov	r2, sl
 80070be:	4641      	mov	r1, r8
 80070c0:	4638      	mov	r0, r7
 80070c2:	47c8      	blx	r9
 80070c4:	3001      	adds	r0, #1
 80070c6:	d103      	bne.n	80070d0 <_printf_common+0xac>
 80070c8:	f04f 30ff 	mov.w	r0, #4294967295
 80070cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070d0:	3501      	adds	r5, #1
 80070d2:	e7c6      	b.n	8007062 <_printf_common+0x3e>
 80070d4:	18e1      	adds	r1, r4, r3
 80070d6:	1c5a      	adds	r2, r3, #1
 80070d8:	2030      	movs	r0, #48	@ 0x30
 80070da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80070de:	4422      	add	r2, r4
 80070e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80070e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80070e8:	3302      	adds	r3, #2
 80070ea:	e7c7      	b.n	800707c <_printf_common+0x58>
 80070ec:	2301      	movs	r3, #1
 80070ee:	4622      	mov	r2, r4
 80070f0:	4641      	mov	r1, r8
 80070f2:	4638      	mov	r0, r7
 80070f4:	47c8      	blx	r9
 80070f6:	3001      	adds	r0, #1
 80070f8:	d0e6      	beq.n	80070c8 <_printf_common+0xa4>
 80070fa:	3601      	adds	r6, #1
 80070fc:	e7d9      	b.n	80070b2 <_printf_common+0x8e>
	...

08007100 <_printf_i>:
 8007100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007104:	7e0f      	ldrb	r7, [r1, #24]
 8007106:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007108:	2f78      	cmp	r7, #120	@ 0x78
 800710a:	4691      	mov	r9, r2
 800710c:	4680      	mov	r8, r0
 800710e:	460c      	mov	r4, r1
 8007110:	469a      	mov	sl, r3
 8007112:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007116:	d807      	bhi.n	8007128 <_printf_i+0x28>
 8007118:	2f62      	cmp	r7, #98	@ 0x62
 800711a:	d80a      	bhi.n	8007132 <_printf_i+0x32>
 800711c:	2f00      	cmp	r7, #0
 800711e:	f000 80d2 	beq.w	80072c6 <_printf_i+0x1c6>
 8007122:	2f58      	cmp	r7, #88	@ 0x58
 8007124:	f000 80b9 	beq.w	800729a <_printf_i+0x19a>
 8007128:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800712c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007130:	e03a      	b.n	80071a8 <_printf_i+0xa8>
 8007132:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007136:	2b15      	cmp	r3, #21
 8007138:	d8f6      	bhi.n	8007128 <_printf_i+0x28>
 800713a:	a101      	add	r1, pc, #4	@ (adr r1, 8007140 <_printf_i+0x40>)
 800713c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007140:	08007199 	.word	0x08007199
 8007144:	080071ad 	.word	0x080071ad
 8007148:	08007129 	.word	0x08007129
 800714c:	08007129 	.word	0x08007129
 8007150:	08007129 	.word	0x08007129
 8007154:	08007129 	.word	0x08007129
 8007158:	080071ad 	.word	0x080071ad
 800715c:	08007129 	.word	0x08007129
 8007160:	08007129 	.word	0x08007129
 8007164:	08007129 	.word	0x08007129
 8007168:	08007129 	.word	0x08007129
 800716c:	080072ad 	.word	0x080072ad
 8007170:	080071d7 	.word	0x080071d7
 8007174:	08007267 	.word	0x08007267
 8007178:	08007129 	.word	0x08007129
 800717c:	08007129 	.word	0x08007129
 8007180:	080072cf 	.word	0x080072cf
 8007184:	08007129 	.word	0x08007129
 8007188:	080071d7 	.word	0x080071d7
 800718c:	08007129 	.word	0x08007129
 8007190:	08007129 	.word	0x08007129
 8007194:	0800726f 	.word	0x0800726f
 8007198:	6833      	ldr	r3, [r6, #0]
 800719a:	1d1a      	adds	r2, r3, #4
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	6032      	str	r2, [r6, #0]
 80071a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80071a8:	2301      	movs	r3, #1
 80071aa:	e09d      	b.n	80072e8 <_printf_i+0x1e8>
 80071ac:	6833      	ldr	r3, [r6, #0]
 80071ae:	6820      	ldr	r0, [r4, #0]
 80071b0:	1d19      	adds	r1, r3, #4
 80071b2:	6031      	str	r1, [r6, #0]
 80071b4:	0606      	lsls	r6, r0, #24
 80071b6:	d501      	bpl.n	80071bc <_printf_i+0xbc>
 80071b8:	681d      	ldr	r5, [r3, #0]
 80071ba:	e003      	b.n	80071c4 <_printf_i+0xc4>
 80071bc:	0645      	lsls	r5, r0, #25
 80071be:	d5fb      	bpl.n	80071b8 <_printf_i+0xb8>
 80071c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071c4:	2d00      	cmp	r5, #0
 80071c6:	da03      	bge.n	80071d0 <_printf_i+0xd0>
 80071c8:	232d      	movs	r3, #45	@ 0x2d
 80071ca:	426d      	negs	r5, r5
 80071cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071d0:	4859      	ldr	r0, [pc, #356]	@ (8007338 <_printf_i+0x238>)
 80071d2:	230a      	movs	r3, #10
 80071d4:	e011      	b.n	80071fa <_printf_i+0xfa>
 80071d6:	6821      	ldr	r1, [r4, #0]
 80071d8:	6833      	ldr	r3, [r6, #0]
 80071da:	0608      	lsls	r0, r1, #24
 80071dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80071e0:	d402      	bmi.n	80071e8 <_printf_i+0xe8>
 80071e2:	0649      	lsls	r1, r1, #25
 80071e4:	bf48      	it	mi
 80071e6:	b2ad      	uxthmi	r5, r5
 80071e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80071ea:	4853      	ldr	r0, [pc, #332]	@ (8007338 <_printf_i+0x238>)
 80071ec:	6033      	str	r3, [r6, #0]
 80071ee:	bf14      	ite	ne
 80071f0:	230a      	movne	r3, #10
 80071f2:	2308      	moveq	r3, #8
 80071f4:	2100      	movs	r1, #0
 80071f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80071fa:	6866      	ldr	r6, [r4, #4]
 80071fc:	60a6      	str	r6, [r4, #8]
 80071fe:	2e00      	cmp	r6, #0
 8007200:	bfa2      	ittt	ge
 8007202:	6821      	ldrge	r1, [r4, #0]
 8007204:	f021 0104 	bicge.w	r1, r1, #4
 8007208:	6021      	strge	r1, [r4, #0]
 800720a:	b90d      	cbnz	r5, 8007210 <_printf_i+0x110>
 800720c:	2e00      	cmp	r6, #0
 800720e:	d04b      	beq.n	80072a8 <_printf_i+0x1a8>
 8007210:	4616      	mov	r6, r2
 8007212:	fbb5 f1f3 	udiv	r1, r5, r3
 8007216:	fb03 5711 	mls	r7, r3, r1, r5
 800721a:	5dc7      	ldrb	r7, [r0, r7]
 800721c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007220:	462f      	mov	r7, r5
 8007222:	42bb      	cmp	r3, r7
 8007224:	460d      	mov	r5, r1
 8007226:	d9f4      	bls.n	8007212 <_printf_i+0x112>
 8007228:	2b08      	cmp	r3, #8
 800722a:	d10b      	bne.n	8007244 <_printf_i+0x144>
 800722c:	6823      	ldr	r3, [r4, #0]
 800722e:	07df      	lsls	r7, r3, #31
 8007230:	d508      	bpl.n	8007244 <_printf_i+0x144>
 8007232:	6923      	ldr	r3, [r4, #16]
 8007234:	6861      	ldr	r1, [r4, #4]
 8007236:	4299      	cmp	r1, r3
 8007238:	bfde      	ittt	le
 800723a:	2330      	movle	r3, #48	@ 0x30
 800723c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007240:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007244:	1b92      	subs	r2, r2, r6
 8007246:	6122      	str	r2, [r4, #16]
 8007248:	f8cd a000 	str.w	sl, [sp]
 800724c:	464b      	mov	r3, r9
 800724e:	aa03      	add	r2, sp, #12
 8007250:	4621      	mov	r1, r4
 8007252:	4640      	mov	r0, r8
 8007254:	f7ff fee6 	bl	8007024 <_printf_common>
 8007258:	3001      	adds	r0, #1
 800725a:	d14a      	bne.n	80072f2 <_printf_i+0x1f2>
 800725c:	f04f 30ff 	mov.w	r0, #4294967295
 8007260:	b004      	add	sp, #16
 8007262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007266:	6823      	ldr	r3, [r4, #0]
 8007268:	f043 0320 	orr.w	r3, r3, #32
 800726c:	6023      	str	r3, [r4, #0]
 800726e:	4833      	ldr	r0, [pc, #204]	@ (800733c <_printf_i+0x23c>)
 8007270:	2778      	movs	r7, #120	@ 0x78
 8007272:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007276:	6823      	ldr	r3, [r4, #0]
 8007278:	6831      	ldr	r1, [r6, #0]
 800727a:	061f      	lsls	r7, r3, #24
 800727c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007280:	d402      	bmi.n	8007288 <_printf_i+0x188>
 8007282:	065f      	lsls	r7, r3, #25
 8007284:	bf48      	it	mi
 8007286:	b2ad      	uxthmi	r5, r5
 8007288:	6031      	str	r1, [r6, #0]
 800728a:	07d9      	lsls	r1, r3, #31
 800728c:	bf44      	itt	mi
 800728e:	f043 0320 	orrmi.w	r3, r3, #32
 8007292:	6023      	strmi	r3, [r4, #0]
 8007294:	b11d      	cbz	r5, 800729e <_printf_i+0x19e>
 8007296:	2310      	movs	r3, #16
 8007298:	e7ac      	b.n	80071f4 <_printf_i+0xf4>
 800729a:	4827      	ldr	r0, [pc, #156]	@ (8007338 <_printf_i+0x238>)
 800729c:	e7e9      	b.n	8007272 <_printf_i+0x172>
 800729e:	6823      	ldr	r3, [r4, #0]
 80072a0:	f023 0320 	bic.w	r3, r3, #32
 80072a4:	6023      	str	r3, [r4, #0]
 80072a6:	e7f6      	b.n	8007296 <_printf_i+0x196>
 80072a8:	4616      	mov	r6, r2
 80072aa:	e7bd      	b.n	8007228 <_printf_i+0x128>
 80072ac:	6833      	ldr	r3, [r6, #0]
 80072ae:	6825      	ldr	r5, [r4, #0]
 80072b0:	6961      	ldr	r1, [r4, #20]
 80072b2:	1d18      	adds	r0, r3, #4
 80072b4:	6030      	str	r0, [r6, #0]
 80072b6:	062e      	lsls	r6, r5, #24
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	d501      	bpl.n	80072c0 <_printf_i+0x1c0>
 80072bc:	6019      	str	r1, [r3, #0]
 80072be:	e002      	b.n	80072c6 <_printf_i+0x1c6>
 80072c0:	0668      	lsls	r0, r5, #25
 80072c2:	d5fb      	bpl.n	80072bc <_printf_i+0x1bc>
 80072c4:	8019      	strh	r1, [r3, #0]
 80072c6:	2300      	movs	r3, #0
 80072c8:	6123      	str	r3, [r4, #16]
 80072ca:	4616      	mov	r6, r2
 80072cc:	e7bc      	b.n	8007248 <_printf_i+0x148>
 80072ce:	6833      	ldr	r3, [r6, #0]
 80072d0:	1d1a      	adds	r2, r3, #4
 80072d2:	6032      	str	r2, [r6, #0]
 80072d4:	681e      	ldr	r6, [r3, #0]
 80072d6:	6862      	ldr	r2, [r4, #4]
 80072d8:	2100      	movs	r1, #0
 80072da:	4630      	mov	r0, r6
 80072dc:	f7f8 ff78 	bl	80001d0 <memchr>
 80072e0:	b108      	cbz	r0, 80072e6 <_printf_i+0x1e6>
 80072e2:	1b80      	subs	r0, r0, r6
 80072e4:	6060      	str	r0, [r4, #4]
 80072e6:	6863      	ldr	r3, [r4, #4]
 80072e8:	6123      	str	r3, [r4, #16]
 80072ea:	2300      	movs	r3, #0
 80072ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072f0:	e7aa      	b.n	8007248 <_printf_i+0x148>
 80072f2:	6923      	ldr	r3, [r4, #16]
 80072f4:	4632      	mov	r2, r6
 80072f6:	4649      	mov	r1, r9
 80072f8:	4640      	mov	r0, r8
 80072fa:	47d0      	blx	sl
 80072fc:	3001      	adds	r0, #1
 80072fe:	d0ad      	beq.n	800725c <_printf_i+0x15c>
 8007300:	6823      	ldr	r3, [r4, #0]
 8007302:	079b      	lsls	r3, r3, #30
 8007304:	d413      	bmi.n	800732e <_printf_i+0x22e>
 8007306:	68e0      	ldr	r0, [r4, #12]
 8007308:	9b03      	ldr	r3, [sp, #12]
 800730a:	4298      	cmp	r0, r3
 800730c:	bfb8      	it	lt
 800730e:	4618      	movlt	r0, r3
 8007310:	e7a6      	b.n	8007260 <_printf_i+0x160>
 8007312:	2301      	movs	r3, #1
 8007314:	4632      	mov	r2, r6
 8007316:	4649      	mov	r1, r9
 8007318:	4640      	mov	r0, r8
 800731a:	47d0      	blx	sl
 800731c:	3001      	adds	r0, #1
 800731e:	d09d      	beq.n	800725c <_printf_i+0x15c>
 8007320:	3501      	adds	r5, #1
 8007322:	68e3      	ldr	r3, [r4, #12]
 8007324:	9903      	ldr	r1, [sp, #12]
 8007326:	1a5b      	subs	r3, r3, r1
 8007328:	42ab      	cmp	r3, r5
 800732a:	dcf2      	bgt.n	8007312 <_printf_i+0x212>
 800732c:	e7eb      	b.n	8007306 <_printf_i+0x206>
 800732e:	2500      	movs	r5, #0
 8007330:	f104 0619 	add.w	r6, r4, #25
 8007334:	e7f5      	b.n	8007322 <_printf_i+0x222>
 8007336:	bf00      	nop
 8007338:	08007edc 	.word	0x08007edc
 800733c:	08007eed 	.word	0x08007eed

08007340 <__sflush_r>:
 8007340:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007348:	0716      	lsls	r6, r2, #28
 800734a:	4605      	mov	r5, r0
 800734c:	460c      	mov	r4, r1
 800734e:	d454      	bmi.n	80073fa <__sflush_r+0xba>
 8007350:	684b      	ldr	r3, [r1, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	dc02      	bgt.n	800735c <__sflush_r+0x1c>
 8007356:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007358:	2b00      	cmp	r3, #0
 800735a:	dd48      	ble.n	80073ee <__sflush_r+0xae>
 800735c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800735e:	2e00      	cmp	r6, #0
 8007360:	d045      	beq.n	80073ee <__sflush_r+0xae>
 8007362:	2300      	movs	r3, #0
 8007364:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007368:	682f      	ldr	r7, [r5, #0]
 800736a:	6a21      	ldr	r1, [r4, #32]
 800736c:	602b      	str	r3, [r5, #0]
 800736e:	d030      	beq.n	80073d2 <__sflush_r+0x92>
 8007370:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007372:	89a3      	ldrh	r3, [r4, #12]
 8007374:	0759      	lsls	r1, r3, #29
 8007376:	d505      	bpl.n	8007384 <__sflush_r+0x44>
 8007378:	6863      	ldr	r3, [r4, #4]
 800737a:	1ad2      	subs	r2, r2, r3
 800737c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800737e:	b10b      	cbz	r3, 8007384 <__sflush_r+0x44>
 8007380:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007382:	1ad2      	subs	r2, r2, r3
 8007384:	2300      	movs	r3, #0
 8007386:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007388:	6a21      	ldr	r1, [r4, #32]
 800738a:	4628      	mov	r0, r5
 800738c:	47b0      	blx	r6
 800738e:	1c43      	adds	r3, r0, #1
 8007390:	89a3      	ldrh	r3, [r4, #12]
 8007392:	d106      	bne.n	80073a2 <__sflush_r+0x62>
 8007394:	6829      	ldr	r1, [r5, #0]
 8007396:	291d      	cmp	r1, #29
 8007398:	d82b      	bhi.n	80073f2 <__sflush_r+0xb2>
 800739a:	4a2a      	ldr	r2, [pc, #168]	@ (8007444 <__sflush_r+0x104>)
 800739c:	410a      	asrs	r2, r1
 800739e:	07d6      	lsls	r6, r2, #31
 80073a0:	d427      	bmi.n	80073f2 <__sflush_r+0xb2>
 80073a2:	2200      	movs	r2, #0
 80073a4:	6062      	str	r2, [r4, #4]
 80073a6:	04d9      	lsls	r1, r3, #19
 80073a8:	6922      	ldr	r2, [r4, #16]
 80073aa:	6022      	str	r2, [r4, #0]
 80073ac:	d504      	bpl.n	80073b8 <__sflush_r+0x78>
 80073ae:	1c42      	adds	r2, r0, #1
 80073b0:	d101      	bne.n	80073b6 <__sflush_r+0x76>
 80073b2:	682b      	ldr	r3, [r5, #0]
 80073b4:	b903      	cbnz	r3, 80073b8 <__sflush_r+0x78>
 80073b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80073b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80073ba:	602f      	str	r7, [r5, #0]
 80073bc:	b1b9      	cbz	r1, 80073ee <__sflush_r+0xae>
 80073be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80073c2:	4299      	cmp	r1, r3
 80073c4:	d002      	beq.n	80073cc <__sflush_r+0x8c>
 80073c6:	4628      	mov	r0, r5
 80073c8:	f7ff fb48 	bl	8006a5c <_free_r>
 80073cc:	2300      	movs	r3, #0
 80073ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80073d0:	e00d      	b.n	80073ee <__sflush_r+0xae>
 80073d2:	2301      	movs	r3, #1
 80073d4:	4628      	mov	r0, r5
 80073d6:	47b0      	blx	r6
 80073d8:	4602      	mov	r2, r0
 80073da:	1c50      	adds	r0, r2, #1
 80073dc:	d1c9      	bne.n	8007372 <__sflush_r+0x32>
 80073de:	682b      	ldr	r3, [r5, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d0c6      	beq.n	8007372 <__sflush_r+0x32>
 80073e4:	2b1d      	cmp	r3, #29
 80073e6:	d001      	beq.n	80073ec <__sflush_r+0xac>
 80073e8:	2b16      	cmp	r3, #22
 80073ea:	d11e      	bne.n	800742a <__sflush_r+0xea>
 80073ec:	602f      	str	r7, [r5, #0]
 80073ee:	2000      	movs	r0, #0
 80073f0:	e022      	b.n	8007438 <__sflush_r+0xf8>
 80073f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073f6:	b21b      	sxth	r3, r3
 80073f8:	e01b      	b.n	8007432 <__sflush_r+0xf2>
 80073fa:	690f      	ldr	r7, [r1, #16]
 80073fc:	2f00      	cmp	r7, #0
 80073fe:	d0f6      	beq.n	80073ee <__sflush_r+0xae>
 8007400:	0793      	lsls	r3, r2, #30
 8007402:	680e      	ldr	r6, [r1, #0]
 8007404:	bf08      	it	eq
 8007406:	694b      	ldreq	r3, [r1, #20]
 8007408:	600f      	str	r7, [r1, #0]
 800740a:	bf18      	it	ne
 800740c:	2300      	movne	r3, #0
 800740e:	eba6 0807 	sub.w	r8, r6, r7
 8007412:	608b      	str	r3, [r1, #8]
 8007414:	f1b8 0f00 	cmp.w	r8, #0
 8007418:	dde9      	ble.n	80073ee <__sflush_r+0xae>
 800741a:	6a21      	ldr	r1, [r4, #32]
 800741c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800741e:	4643      	mov	r3, r8
 8007420:	463a      	mov	r2, r7
 8007422:	4628      	mov	r0, r5
 8007424:	47b0      	blx	r6
 8007426:	2800      	cmp	r0, #0
 8007428:	dc08      	bgt.n	800743c <__sflush_r+0xfc>
 800742a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800742e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007432:	81a3      	strh	r3, [r4, #12]
 8007434:	f04f 30ff 	mov.w	r0, #4294967295
 8007438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800743c:	4407      	add	r7, r0
 800743e:	eba8 0800 	sub.w	r8, r8, r0
 8007442:	e7e7      	b.n	8007414 <__sflush_r+0xd4>
 8007444:	dfbffffe 	.word	0xdfbffffe

08007448 <_fflush_r>:
 8007448:	b538      	push	{r3, r4, r5, lr}
 800744a:	690b      	ldr	r3, [r1, #16]
 800744c:	4605      	mov	r5, r0
 800744e:	460c      	mov	r4, r1
 8007450:	b913      	cbnz	r3, 8007458 <_fflush_r+0x10>
 8007452:	2500      	movs	r5, #0
 8007454:	4628      	mov	r0, r5
 8007456:	bd38      	pop	{r3, r4, r5, pc}
 8007458:	b118      	cbz	r0, 8007462 <_fflush_r+0x1a>
 800745a:	6a03      	ldr	r3, [r0, #32]
 800745c:	b90b      	cbnz	r3, 8007462 <_fflush_r+0x1a>
 800745e:	f7ff f979 	bl	8006754 <__sinit>
 8007462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d0f3      	beq.n	8007452 <_fflush_r+0xa>
 800746a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800746c:	07d0      	lsls	r0, r2, #31
 800746e:	d404      	bmi.n	800747a <_fflush_r+0x32>
 8007470:	0599      	lsls	r1, r3, #22
 8007472:	d402      	bmi.n	800747a <_fflush_r+0x32>
 8007474:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007476:	f7ff fad0 	bl	8006a1a <__retarget_lock_acquire_recursive>
 800747a:	4628      	mov	r0, r5
 800747c:	4621      	mov	r1, r4
 800747e:	f7ff ff5f 	bl	8007340 <__sflush_r>
 8007482:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007484:	07da      	lsls	r2, r3, #31
 8007486:	4605      	mov	r5, r0
 8007488:	d4e4      	bmi.n	8007454 <_fflush_r+0xc>
 800748a:	89a3      	ldrh	r3, [r4, #12]
 800748c:	059b      	lsls	r3, r3, #22
 800748e:	d4e1      	bmi.n	8007454 <_fflush_r+0xc>
 8007490:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007492:	f7ff fac3 	bl	8006a1c <__retarget_lock_release_recursive>
 8007496:	e7dd      	b.n	8007454 <_fflush_r+0xc>

08007498 <fiprintf>:
 8007498:	b40e      	push	{r1, r2, r3}
 800749a:	b503      	push	{r0, r1, lr}
 800749c:	4601      	mov	r1, r0
 800749e:	ab03      	add	r3, sp, #12
 80074a0:	4805      	ldr	r0, [pc, #20]	@ (80074b8 <fiprintf+0x20>)
 80074a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80074a6:	6800      	ldr	r0, [r0, #0]
 80074a8:	9301      	str	r3, [sp, #4]
 80074aa:	f7ff fca3 	bl	8006df4 <_vfiprintf_r>
 80074ae:	b002      	add	sp, #8
 80074b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80074b4:	b003      	add	sp, #12
 80074b6:	4770      	bx	lr
 80074b8:	20000040 	.word	0x20000040

080074bc <__swbuf_r>:
 80074bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074be:	460e      	mov	r6, r1
 80074c0:	4614      	mov	r4, r2
 80074c2:	4605      	mov	r5, r0
 80074c4:	b118      	cbz	r0, 80074ce <__swbuf_r+0x12>
 80074c6:	6a03      	ldr	r3, [r0, #32]
 80074c8:	b90b      	cbnz	r3, 80074ce <__swbuf_r+0x12>
 80074ca:	f7ff f943 	bl	8006754 <__sinit>
 80074ce:	69a3      	ldr	r3, [r4, #24]
 80074d0:	60a3      	str	r3, [r4, #8]
 80074d2:	89a3      	ldrh	r3, [r4, #12]
 80074d4:	071a      	lsls	r2, r3, #28
 80074d6:	d501      	bpl.n	80074dc <__swbuf_r+0x20>
 80074d8:	6923      	ldr	r3, [r4, #16]
 80074da:	b943      	cbnz	r3, 80074ee <__swbuf_r+0x32>
 80074dc:	4621      	mov	r1, r4
 80074de:	4628      	mov	r0, r5
 80074e0:	f000 f82a 	bl	8007538 <__swsetup_r>
 80074e4:	b118      	cbz	r0, 80074ee <__swbuf_r+0x32>
 80074e6:	f04f 37ff 	mov.w	r7, #4294967295
 80074ea:	4638      	mov	r0, r7
 80074ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074ee:	6823      	ldr	r3, [r4, #0]
 80074f0:	6922      	ldr	r2, [r4, #16]
 80074f2:	1a98      	subs	r0, r3, r2
 80074f4:	6963      	ldr	r3, [r4, #20]
 80074f6:	b2f6      	uxtb	r6, r6
 80074f8:	4283      	cmp	r3, r0
 80074fa:	4637      	mov	r7, r6
 80074fc:	dc05      	bgt.n	800750a <__swbuf_r+0x4e>
 80074fe:	4621      	mov	r1, r4
 8007500:	4628      	mov	r0, r5
 8007502:	f7ff ffa1 	bl	8007448 <_fflush_r>
 8007506:	2800      	cmp	r0, #0
 8007508:	d1ed      	bne.n	80074e6 <__swbuf_r+0x2a>
 800750a:	68a3      	ldr	r3, [r4, #8]
 800750c:	3b01      	subs	r3, #1
 800750e:	60a3      	str	r3, [r4, #8]
 8007510:	6823      	ldr	r3, [r4, #0]
 8007512:	1c5a      	adds	r2, r3, #1
 8007514:	6022      	str	r2, [r4, #0]
 8007516:	701e      	strb	r6, [r3, #0]
 8007518:	6962      	ldr	r2, [r4, #20]
 800751a:	1c43      	adds	r3, r0, #1
 800751c:	429a      	cmp	r2, r3
 800751e:	d004      	beq.n	800752a <__swbuf_r+0x6e>
 8007520:	89a3      	ldrh	r3, [r4, #12]
 8007522:	07db      	lsls	r3, r3, #31
 8007524:	d5e1      	bpl.n	80074ea <__swbuf_r+0x2e>
 8007526:	2e0a      	cmp	r6, #10
 8007528:	d1df      	bne.n	80074ea <__swbuf_r+0x2e>
 800752a:	4621      	mov	r1, r4
 800752c:	4628      	mov	r0, r5
 800752e:	f7ff ff8b 	bl	8007448 <_fflush_r>
 8007532:	2800      	cmp	r0, #0
 8007534:	d0d9      	beq.n	80074ea <__swbuf_r+0x2e>
 8007536:	e7d6      	b.n	80074e6 <__swbuf_r+0x2a>

08007538 <__swsetup_r>:
 8007538:	b538      	push	{r3, r4, r5, lr}
 800753a:	4b29      	ldr	r3, [pc, #164]	@ (80075e0 <__swsetup_r+0xa8>)
 800753c:	4605      	mov	r5, r0
 800753e:	6818      	ldr	r0, [r3, #0]
 8007540:	460c      	mov	r4, r1
 8007542:	b118      	cbz	r0, 800754c <__swsetup_r+0x14>
 8007544:	6a03      	ldr	r3, [r0, #32]
 8007546:	b90b      	cbnz	r3, 800754c <__swsetup_r+0x14>
 8007548:	f7ff f904 	bl	8006754 <__sinit>
 800754c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007550:	0719      	lsls	r1, r3, #28
 8007552:	d422      	bmi.n	800759a <__swsetup_r+0x62>
 8007554:	06da      	lsls	r2, r3, #27
 8007556:	d407      	bmi.n	8007568 <__swsetup_r+0x30>
 8007558:	2209      	movs	r2, #9
 800755a:	602a      	str	r2, [r5, #0]
 800755c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007560:	81a3      	strh	r3, [r4, #12]
 8007562:	f04f 30ff 	mov.w	r0, #4294967295
 8007566:	e033      	b.n	80075d0 <__swsetup_r+0x98>
 8007568:	0758      	lsls	r0, r3, #29
 800756a:	d512      	bpl.n	8007592 <__swsetup_r+0x5a>
 800756c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800756e:	b141      	cbz	r1, 8007582 <__swsetup_r+0x4a>
 8007570:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007574:	4299      	cmp	r1, r3
 8007576:	d002      	beq.n	800757e <__swsetup_r+0x46>
 8007578:	4628      	mov	r0, r5
 800757a:	f7ff fa6f 	bl	8006a5c <_free_r>
 800757e:	2300      	movs	r3, #0
 8007580:	6363      	str	r3, [r4, #52]	@ 0x34
 8007582:	89a3      	ldrh	r3, [r4, #12]
 8007584:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007588:	81a3      	strh	r3, [r4, #12]
 800758a:	2300      	movs	r3, #0
 800758c:	6063      	str	r3, [r4, #4]
 800758e:	6923      	ldr	r3, [r4, #16]
 8007590:	6023      	str	r3, [r4, #0]
 8007592:	89a3      	ldrh	r3, [r4, #12]
 8007594:	f043 0308 	orr.w	r3, r3, #8
 8007598:	81a3      	strh	r3, [r4, #12]
 800759a:	6923      	ldr	r3, [r4, #16]
 800759c:	b94b      	cbnz	r3, 80075b2 <__swsetup_r+0x7a>
 800759e:	89a3      	ldrh	r3, [r4, #12]
 80075a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80075a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075a8:	d003      	beq.n	80075b2 <__swsetup_r+0x7a>
 80075aa:	4621      	mov	r1, r4
 80075ac:	4628      	mov	r0, r5
 80075ae:	f000 f89c 	bl	80076ea <__smakebuf_r>
 80075b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075b6:	f013 0201 	ands.w	r2, r3, #1
 80075ba:	d00a      	beq.n	80075d2 <__swsetup_r+0x9a>
 80075bc:	2200      	movs	r2, #0
 80075be:	60a2      	str	r2, [r4, #8]
 80075c0:	6962      	ldr	r2, [r4, #20]
 80075c2:	4252      	negs	r2, r2
 80075c4:	61a2      	str	r2, [r4, #24]
 80075c6:	6922      	ldr	r2, [r4, #16]
 80075c8:	b942      	cbnz	r2, 80075dc <__swsetup_r+0xa4>
 80075ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80075ce:	d1c5      	bne.n	800755c <__swsetup_r+0x24>
 80075d0:	bd38      	pop	{r3, r4, r5, pc}
 80075d2:	0799      	lsls	r1, r3, #30
 80075d4:	bf58      	it	pl
 80075d6:	6962      	ldrpl	r2, [r4, #20]
 80075d8:	60a2      	str	r2, [r4, #8]
 80075da:	e7f4      	b.n	80075c6 <__swsetup_r+0x8e>
 80075dc:	2000      	movs	r0, #0
 80075de:	e7f7      	b.n	80075d0 <__swsetup_r+0x98>
 80075e0:	20000040 	.word	0x20000040

080075e4 <memmove>:
 80075e4:	4288      	cmp	r0, r1
 80075e6:	b510      	push	{r4, lr}
 80075e8:	eb01 0402 	add.w	r4, r1, r2
 80075ec:	d902      	bls.n	80075f4 <memmove+0x10>
 80075ee:	4284      	cmp	r4, r0
 80075f0:	4623      	mov	r3, r4
 80075f2:	d807      	bhi.n	8007604 <memmove+0x20>
 80075f4:	1e43      	subs	r3, r0, #1
 80075f6:	42a1      	cmp	r1, r4
 80075f8:	d008      	beq.n	800760c <memmove+0x28>
 80075fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007602:	e7f8      	b.n	80075f6 <memmove+0x12>
 8007604:	4402      	add	r2, r0
 8007606:	4601      	mov	r1, r0
 8007608:	428a      	cmp	r2, r1
 800760a:	d100      	bne.n	800760e <memmove+0x2a>
 800760c:	bd10      	pop	{r4, pc}
 800760e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007612:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007616:	e7f7      	b.n	8007608 <memmove+0x24>

08007618 <memcpy>:
 8007618:	440a      	add	r2, r1
 800761a:	4291      	cmp	r1, r2
 800761c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007620:	d100      	bne.n	8007624 <memcpy+0xc>
 8007622:	4770      	bx	lr
 8007624:	b510      	push	{r4, lr}
 8007626:	f811 4b01 	ldrb.w	r4, [r1], #1
 800762a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800762e:	4291      	cmp	r1, r2
 8007630:	d1f9      	bne.n	8007626 <memcpy+0xe>
 8007632:	bd10      	pop	{r4, pc}

08007634 <abort>:
 8007634:	b508      	push	{r3, lr}
 8007636:	2006      	movs	r0, #6
 8007638:	f000 f8bc 	bl	80077b4 <raise>
 800763c:	2001      	movs	r0, #1
 800763e:	f7fa fd3f 	bl	80020c0 <_exit>

08007642 <_realloc_r>:
 8007642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007646:	4680      	mov	r8, r0
 8007648:	4615      	mov	r5, r2
 800764a:	460c      	mov	r4, r1
 800764c:	b921      	cbnz	r1, 8007658 <_realloc_r+0x16>
 800764e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007652:	4611      	mov	r1, r2
 8007654:	f7fe befa 	b.w	800644c <_malloc_r>
 8007658:	b92a      	cbnz	r2, 8007666 <_realloc_r+0x24>
 800765a:	f7ff f9ff 	bl	8006a5c <_free_r>
 800765e:	2400      	movs	r4, #0
 8007660:	4620      	mov	r0, r4
 8007662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007666:	f000 f8e3 	bl	8007830 <_malloc_usable_size_r>
 800766a:	4285      	cmp	r5, r0
 800766c:	4606      	mov	r6, r0
 800766e:	d802      	bhi.n	8007676 <_realloc_r+0x34>
 8007670:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007674:	d8f4      	bhi.n	8007660 <_realloc_r+0x1e>
 8007676:	4629      	mov	r1, r5
 8007678:	4640      	mov	r0, r8
 800767a:	f7fe fee7 	bl	800644c <_malloc_r>
 800767e:	4607      	mov	r7, r0
 8007680:	2800      	cmp	r0, #0
 8007682:	d0ec      	beq.n	800765e <_realloc_r+0x1c>
 8007684:	42b5      	cmp	r5, r6
 8007686:	462a      	mov	r2, r5
 8007688:	4621      	mov	r1, r4
 800768a:	bf28      	it	cs
 800768c:	4632      	movcs	r2, r6
 800768e:	f7ff ffc3 	bl	8007618 <memcpy>
 8007692:	4621      	mov	r1, r4
 8007694:	4640      	mov	r0, r8
 8007696:	f7ff f9e1 	bl	8006a5c <_free_r>
 800769a:	463c      	mov	r4, r7
 800769c:	e7e0      	b.n	8007660 <_realloc_r+0x1e>

0800769e <__swhatbuf_r>:
 800769e:	b570      	push	{r4, r5, r6, lr}
 80076a0:	460c      	mov	r4, r1
 80076a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076a6:	2900      	cmp	r1, #0
 80076a8:	b096      	sub	sp, #88	@ 0x58
 80076aa:	4615      	mov	r5, r2
 80076ac:	461e      	mov	r6, r3
 80076ae:	da0d      	bge.n	80076cc <__swhatbuf_r+0x2e>
 80076b0:	89a3      	ldrh	r3, [r4, #12]
 80076b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80076b6:	f04f 0100 	mov.w	r1, #0
 80076ba:	bf14      	ite	ne
 80076bc:	2340      	movne	r3, #64	@ 0x40
 80076be:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80076c2:	2000      	movs	r0, #0
 80076c4:	6031      	str	r1, [r6, #0]
 80076c6:	602b      	str	r3, [r5, #0]
 80076c8:	b016      	add	sp, #88	@ 0x58
 80076ca:	bd70      	pop	{r4, r5, r6, pc}
 80076cc:	466a      	mov	r2, sp
 80076ce:	f000 f879 	bl	80077c4 <_fstat_r>
 80076d2:	2800      	cmp	r0, #0
 80076d4:	dbec      	blt.n	80076b0 <__swhatbuf_r+0x12>
 80076d6:	9901      	ldr	r1, [sp, #4]
 80076d8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80076dc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80076e0:	4259      	negs	r1, r3
 80076e2:	4159      	adcs	r1, r3
 80076e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80076e8:	e7eb      	b.n	80076c2 <__swhatbuf_r+0x24>

080076ea <__smakebuf_r>:
 80076ea:	898b      	ldrh	r3, [r1, #12]
 80076ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076ee:	079d      	lsls	r5, r3, #30
 80076f0:	4606      	mov	r6, r0
 80076f2:	460c      	mov	r4, r1
 80076f4:	d507      	bpl.n	8007706 <__smakebuf_r+0x1c>
 80076f6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80076fa:	6023      	str	r3, [r4, #0]
 80076fc:	6123      	str	r3, [r4, #16]
 80076fe:	2301      	movs	r3, #1
 8007700:	6163      	str	r3, [r4, #20]
 8007702:	b003      	add	sp, #12
 8007704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007706:	ab01      	add	r3, sp, #4
 8007708:	466a      	mov	r2, sp
 800770a:	f7ff ffc8 	bl	800769e <__swhatbuf_r>
 800770e:	9f00      	ldr	r7, [sp, #0]
 8007710:	4605      	mov	r5, r0
 8007712:	4639      	mov	r1, r7
 8007714:	4630      	mov	r0, r6
 8007716:	f7fe fe99 	bl	800644c <_malloc_r>
 800771a:	b948      	cbnz	r0, 8007730 <__smakebuf_r+0x46>
 800771c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007720:	059a      	lsls	r2, r3, #22
 8007722:	d4ee      	bmi.n	8007702 <__smakebuf_r+0x18>
 8007724:	f023 0303 	bic.w	r3, r3, #3
 8007728:	f043 0302 	orr.w	r3, r3, #2
 800772c:	81a3      	strh	r3, [r4, #12]
 800772e:	e7e2      	b.n	80076f6 <__smakebuf_r+0xc>
 8007730:	89a3      	ldrh	r3, [r4, #12]
 8007732:	6020      	str	r0, [r4, #0]
 8007734:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007738:	81a3      	strh	r3, [r4, #12]
 800773a:	9b01      	ldr	r3, [sp, #4]
 800773c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007740:	b15b      	cbz	r3, 800775a <__smakebuf_r+0x70>
 8007742:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007746:	4630      	mov	r0, r6
 8007748:	f000 f84e 	bl	80077e8 <_isatty_r>
 800774c:	b128      	cbz	r0, 800775a <__smakebuf_r+0x70>
 800774e:	89a3      	ldrh	r3, [r4, #12]
 8007750:	f023 0303 	bic.w	r3, r3, #3
 8007754:	f043 0301 	orr.w	r3, r3, #1
 8007758:	81a3      	strh	r3, [r4, #12]
 800775a:	89a3      	ldrh	r3, [r4, #12]
 800775c:	431d      	orrs	r5, r3
 800775e:	81a5      	strh	r5, [r4, #12]
 8007760:	e7cf      	b.n	8007702 <__smakebuf_r+0x18>

08007762 <_raise_r>:
 8007762:	291f      	cmp	r1, #31
 8007764:	b538      	push	{r3, r4, r5, lr}
 8007766:	4605      	mov	r5, r0
 8007768:	460c      	mov	r4, r1
 800776a:	d904      	bls.n	8007776 <_raise_r+0x14>
 800776c:	2316      	movs	r3, #22
 800776e:	6003      	str	r3, [r0, #0]
 8007770:	f04f 30ff 	mov.w	r0, #4294967295
 8007774:	bd38      	pop	{r3, r4, r5, pc}
 8007776:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007778:	b112      	cbz	r2, 8007780 <_raise_r+0x1e>
 800777a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800777e:	b94b      	cbnz	r3, 8007794 <_raise_r+0x32>
 8007780:	4628      	mov	r0, r5
 8007782:	f000 f853 	bl	800782c <_getpid_r>
 8007786:	4622      	mov	r2, r4
 8007788:	4601      	mov	r1, r0
 800778a:	4628      	mov	r0, r5
 800778c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007790:	f000 b83a 	b.w	8007808 <_kill_r>
 8007794:	2b01      	cmp	r3, #1
 8007796:	d00a      	beq.n	80077ae <_raise_r+0x4c>
 8007798:	1c59      	adds	r1, r3, #1
 800779a:	d103      	bne.n	80077a4 <_raise_r+0x42>
 800779c:	2316      	movs	r3, #22
 800779e:	6003      	str	r3, [r0, #0]
 80077a0:	2001      	movs	r0, #1
 80077a2:	e7e7      	b.n	8007774 <_raise_r+0x12>
 80077a4:	2100      	movs	r1, #0
 80077a6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80077aa:	4620      	mov	r0, r4
 80077ac:	4798      	blx	r3
 80077ae:	2000      	movs	r0, #0
 80077b0:	e7e0      	b.n	8007774 <_raise_r+0x12>
	...

080077b4 <raise>:
 80077b4:	4b02      	ldr	r3, [pc, #8]	@ (80077c0 <raise+0xc>)
 80077b6:	4601      	mov	r1, r0
 80077b8:	6818      	ldr	r0, [r3, #0]
 80077ba:	f7ff bfd2 	b.w	8007762 <_raise_r>
 80077be:	bf00      	nop
 80077c0:	20000040 	.word	0x20000040

080077c4 <_fstat_r>:
 80077c4:	b538      	push	{r3, r4, r5, lr}
 80077c6:	4d07      	ldr	r5, [pc, #28]	@ (80077e4 <_fstat_r+0x20>)
 80077c8:	2300      	movs	r3, #0
 80077ca:	4604      	mov	r4, r0
 80077cc:	4608      	mov	r0, r1
 80077ce:	4611      	mov	r1, r2
 80077d0:	602b      	str	r3, [r5, #0]
 80077d2:	f7fa fcc5 	bl	8002160 <_fstat>
 80077d6:	1c43      	adds	r3, r0, #1
 80077d8:	d102      	bne.n	80077e0 <_fstat_r+0x1c>
 80077da:	682b      	ldr	r3, [r5, #0]
 80077dc:	b103      	cbz	r3, 80077e0 <_fstat_r+0x1c>
 80077de:	6023      	str	r3, [r4, #0]
 80077e0:	bd38      	pop	{r3, r4, r5, pc}
 80077e2:	bf00      	nop
 80077e4:	20000330 	.word	0x20000330

080077e8 <_isatty_r>:
 80077e8:	b538      	push	{r3, r4, r5, lr}
 80077ea:	4d06      	ldr	r5, [pc, #24]	@ (8007804 <_isatty_r+0x1c>)
 80077ec:	2300      	movs	r3, #0
 80077ee:	4604      	mov	r4, r0
 80077f0:	4608      	mov	r0, r1
 80077f2:	602b      	str	r3, [r5, #0]
 80077f4:	f7fa fcc4 	bl	8002180 <_isatty>
 80077f8:	1c43      	adds	r3, r0, #1
 80077fa:	d102      	bne.n	8007802 <_isatty_r+0x1a>
 80077fc:	682b      	ldr	r3, [r5, #0]
 80077fe:	b103      	cbz	r3, 8007802 <_isatty_r+0x1a>
 8007800:	6023      	str	r3, [r4, #0]
 8007802:	bd38      	pop	{r3, r4, r5, pc}
 8007804:	20000330 	.word	0x20000330

08007808 <_kill_r>:
 8007808:	b538      	push	{r3, r4, r5, lr}
 800780a:	4d07      	ldr	r5, [pc, #28]	@ (8007828 <_kill_r+0x20>)
 800780c:	2300      	movs	r3, #0
 800780e:	4604      	mov	r4, r0
 8007810:	4608      	mov	r0, r1
 8007812:	4611      	mov	r1, r2
 8007814:	602b      	str	r3, [r5, #0]
 8007816:	f7fa fc43 	bl	80020a0 <_kill>
 800781a:	1c43      	adds	r3, r0, #1
 800781c:	d102      	bne.n	8007824 <_kill_r+0x1c>
 800781e:	682b      	ldr	r3, [r5, #0]
 8007820:	b103      	cbz	r3, 8007824 <_kill_r+0x1c>
 8007822:	6023      	str	r3, [r4, #0]
 8007824:	bd38      	pop	{r3, r4, r5, pc}
 8007826:	bf00      	nop
 8007828:	20000330 	.word	0x20000330

0800782c <_getpid_r>:
 800782c:	f7fa bc30 	b.w	8002090 <_getpid>

08007830 <_malloc_usable_size_r>:
 8007830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007834:	1f18      	subs	r0, r3, #4
 8007836:	2b00      	cmp	r3, #0
 8007838:	bfbc      	itt	lt
 800783a:	580b      	ldrlt	r3, [r1, r0]
 800783c:	18c0      	addlt	r0, r0, r3
 800783e:	4770      	bx	lr

08007840 <_gettimeofday>:
 8007840:	4b02      	ldr	r3, [pc, #8]	@ (800784c <_gettimeofday+0xc>)
 8007842:	2258      	movs	r2, #88	@ 0x58
 8007844:	601a      	str	r2, [r3, #0]
 8007846:	f04f 30ff 	mov.w	r0, #4294967295
 800784a:	4770      	bx	lr
 800784c:	20000330 	.word	0x20000330

08007850 <_init>:
 8007850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007852:	bf00      	nop
 8007854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007856:	bc08      	pop	{r3}
 8007858:	469e      	mov	lr, r3
 800785a:	4770      	bx	lr

0800785c <_fini>:
 800785c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800785e:	bf00      	nop
 8007860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007862:	bc08      	pop	{r3}
 8007864:	469e      	mov	lr, r3
 8007866:	4770      	bx	lr

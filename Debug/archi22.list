
archi22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004814  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800499c  0800499c  0000599c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049e4  080049e4  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  080049e4  080049e4  000059e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049ec  080049ec  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049ec  080049ec  000059ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080049f0  080049f0  000059f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080049f4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000010  08004a04  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08004a04  00006164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f066  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026d6  00000000  00000000  000150a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  00017780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d2  00000000  00000000  00018458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026112  00000000  00000000  00018e2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e07  00000000  00000000  0003ef3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6eb3  00000000  00000000  0004fd43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136bf6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003318  00000000  00000000  00136c3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  00139f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004984 	.word	0x08004984

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004984 	.word	0x08004984

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004be:	4b0c      	ldr	r3, [pc, #48]	@ (80004f0 <MX_DMA_Init+0x38>)
 80004c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004c2:	4a0b      	ldr	r2, [pc, #44]	@ (80004f0 <MX_DMA_Init+0x38>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	6493      	str	r3, [r2, #72]	@ 0x48
 80004ca:	4b09      	ldr	r3, [pc, #36]	@ (80004f0 <MX_DMA_Init+0x38>)
 80004cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2100      	movs	r1, #0
 80004da:	200c      	movs	r0, #12
 80004dc:	f000 feff 	bl	80012de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80004e0:	200c      	movs	r0, #12
 80004e2:	f000 ff18 	bl	8001316 <HAL_NVIC_EnableIRQ>

}
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000

080004f4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 030c 	add.w	r3, r7, #12
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	4b29      	ldr	r3, [pc, #164]	@ (80005b0 <MX_GPIO_Init+0xbc>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800050e:	4a28      	ldr	r2, [pc, #160]	@ (80005b0 <MX_GPIO_Init+0xbc>)
 8000510:	f043 0304 	orr.w	r3, r3, #4
 8000514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000516:	4b26      	ldr	r3, [pc, #152]	@ (80005b0 <MX_GPIO_Init+0xbc>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051a:	f003 0304 	and.w	r3, r3, #4
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	4b23      	ldr	r3, [pc, #140]	@ (80005b0 <MX_GPIO_Init+0xbc>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000526:	4a22      	ldr	r2, [pc, #136]	@ (80005b0 <MX_GPIO_Init+0xbc>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052e:	4b20      	ldr	r3, [pc, #128]	@ (80005b0 <MX_GPIO_Init+0xbc>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	4b1d      	ldr	r3, [pc, #116]	@ (80005b0 <MX_GPIO_Init+0xbc>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053e:	4a1c      	ldr	r2, [pc, #112]	@ (80005b0 <MX_GPIO_Init+0xbc>)
 8000540:	f043 0302 	orr.w	r3, r3, #2
 8000544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000546:	4b1a      	ldr	r3, [pc, #104]	@ (80005b0 <MX_GPIO_Init+0xbc>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800054a:	f003 0302 	and.w	r3, r3, #2
 800054e:	603b      	str	r3, [r7, #0]
 8000550:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_PIN_Pin|LCD_RST_PIN_Pin|LCD_DC_PIN_Pin, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8000558:	4816      	ldr	r0, [pc, #88]	@ (80005b4 <MX_GPIO_Init+0xc0>)
 800055a:	f001 fa87 	bl	8001a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800055e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000562:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000564:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000568:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800056e:	f107 030c 	add.w	r3, r7, #12
 8000572:	4619      	mov	r1, r3
 8000574:	4810      	ldr	r0, [pc, #64]	@ (80005b8 <MX_GPIO_Init+0xc4>)
 8000576:	f001 f8cf 	bl	8001718 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_PIN_Pin LCD_RST_PIN_Pin LCD_DC_PIN_Pin */
  GPIO_InitStruct.Pin = LCD_CS_PIN_Pin|LCD_RST_PIN_Pin|LCD_DC_PIN_Pin;
 800057a:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800057e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000580:	2301      	movs	r3, #1
 8000582:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000588:	2300      	movs	r3, #0
 800058a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	4619      	mov	r1, r3
 8000592:	4808      	ldr	r0, [pc, #32]	@ (80005b4 <MX_GPIO_Init+0xc0>)
 8000594:	f001 f8c0 	bl	8001718 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000598:	2200      	movs	r2, #0
 800059a:	2100      	movs	r1, #0
 800059c:	2028      	movs	r0, #40	@ 0x28
 800059e:	f000 fe9e 	bl	80012de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005a2:	2028      	movs	r0, #40	@ 0x28
 80005a4:	f000 feb7 	bl	8001316 <HAL_NVIC_EnableIRQ>

}
 80005a8:	bf00      	nop
 80005aa:	3720      	adds	r7, #32
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40021000 	.word	0x40021000
 80005b4:	48000400 	.word	0x48000400
 80005b8:	48000800 	.word	0x48000800

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b089      	sub	sp, #36	@ 0x24
 80005c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f000 fd11 	bl	8000fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f88b 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f7ff ff93 	bl	80004f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ce:	f7ff ff73 	bl	80004b8 <MX_DMA_Init>
  MX_SPI1_Init();
 80005d2:	f000 f8dd 	bl	8000790 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80005d6:	f000 fc49 	bl	8000e6c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  ST7735_Init();
 80005da:	f000 f9bf 	bl	800095c <ST7735_Init>
  ST7735_FillScreen(ST7735_BLACK);
 80005de:	2000      	movs	r0, #0
 80005e0:	f000 fb72 	bl	8000cc8 <ST7735_FillScreen>

  int x = 50;
 80005e4:	2332      	movs	r3, #50	@ 0x32
 80005e6:	617b      	str	r3, [r7, #20]
  int y = 50;
 80005e8:	2332      	movs	r3, #50	@ 0x32
 80005ea:	613b      	str	r3, [r7, #16]
  int width = 30;
 80005ec:	231e      	movs	r3, #30
 80005ee:	607b      	str	r3, [r7, #4]
  int height = 30;
 80005f0:	231e      	movs	r3, #30
 80005f2:	603b      	str	r3, [r7, #0]

  int dx = 10;
 80005f4:	230a      	movs	r3, #10
 80005f6:	60fb      	str	r3, [r7, #12]
  int dy = -7;
 80005f8:	f06f 0306 	mvn.w	r3, #6
 80005fc:	60bb      	str	r3, [r7, #8]

  ST7735_FillRectangle(x, y, width, height, ST7735_MAGENTA);
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	b298      	uxth	r0, r3
 8000602:	693b      	ldr	r3, [r7, #16]
 8000604:	b299      	uxth	r1, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	b29a      	uxth	r2, r3
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	b29b      	uxth	r3, r3
 800060e:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 8000612:	9400      	str	r4, [sp, #0]
 8000614:	f000 fae4 	bl	8000be0 <ST7735_FillRectangle>
  while (1) {
    ST7735_FillRectangle(x, y, width, height, ST7735_BLACK);
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	b298      	uxth	r0, r3
 800061c:	693b      	ldr	r3, [r7, #16]
 800061e:	b299      	uxth	r1, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	b29a      	uxth	r2, r3
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	b29b      	uxth	r3, r3
 8000628:	2400      	movs	r4, #0
 800062a:	9400      	str	r4, [sp, #0]
 800062c:	f000 fad8 	bl	8000be0 <ST7735_FillRectangle>

	x += dx * speed;
 8000630:	4b1c      	ldr	r3, [pc, #112]	@ (80006a4 <main+0xe8>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	68fa      	ldr	r2, [r7, #12]
 8000636:	fb02 f303 	mul.w	r3, r2, r3
 800063a:	697a      	ldr	r2, [r7, #20]
 800063c:	4413      	add	r3, r2
 800063e:	617b      	str	r3, [r7, #20]
	y += dy * speed;
 8000640:	4b18      	ldr	r3, [pc, #96]	@ (80006a4 <main+0xe8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	68ba      	ldr	r2, [r7, #8]
 8000646:	fb02 f303 	mul.w	r3, r2, r3
 800064a:	693a      	ldr	r2, [r7, #16]
 800064c:	4413      	add	r3, r2
 800064e:	613b      	str	r3, [r7, #16]

	if ( x > 90) dx = -dx;
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	2b5a      	cmp	r3, #90	@ 0x5a
 8000654:	dd02      	ble.n	800065c <main+0xa0>
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	425b      	negs	r3, r3
 800065a:	60fb      	str	r3, [r7, #12]
	if ( y < 10) dy = -dy;
 800065c:	693b      	ldr	r3, [r7, #16]
 800065e:	2b09      	cmp	r3, #9
 8000660:	dc02      	bgt.n	8000668 <main+0xac>
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	425b      	negs	r3, r3
 8000666:	60bb      	str	r3, [r7, #8]
	if ( x < 10) dx = -dx;
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	2b09      	cmp	r3, #9
 800066c:	dc02      	bgt.n	8000674 <main+0xb8>
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	425b      	negs	r3, r3
 8000672:	60fb      	str	r3, [r7, #12]
	if ( y > 120) dy = -dy;
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	2b78      	cmp	r3, #120	@ 0x78
 8000678:	dd02      	ble.n	8000680 <main+0xc4>
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	425b      	negs	r3, r3
 800067e:	60bb      	str	r3, [r7, #8]

	ST7735_FillRectangle(x, y, width, height, ST7735_MAGENTA);
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	b298      	uxth	r0, r3
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	b299      	uxth	r1, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	b29a      	uxth	r2, r3
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	b29b      	uxth	r3, r3
 8000690:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 8000694:	9400      	str	r4, [sp, #0]
 8000696:	f000 faa3 	bl	8000be0 <ST7735_FillRectangle>
	HAL_Delay(100);
 800069a:	2064      	movs	r0, #100	@ 0x64
 800069c:	f000 fd20 	bl	80010e0 <HAL_Delay>
    ST7735_FillRectangle(x, y, width, height, ST7735_BLACK);
 80006a0:	e7ba      	b.n	8000618 <main+0x5c>
 80006a2:	bf00      	nop
 80006a4:	20000000 	.word	0x20000000

080006a8 <HAL_GPIO_EXTI_Callback>:

   }
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == USER_BUTTON_Pin) {
 80006b2:	88fb      	ldrh	r3, [r7, #6]
 80006b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006b8:	d10a      	bne.n	80006d0 <HAL_GPIO_EXTI_Callback+0x28>
		if (speed == 1) {
 80006ba:	4b08      	ldr	r3, [pc, #32]	@ (80006dc <HAL_GPIO_EXTI_Callback+0x34>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d103      	bne.n	80006ca <HAL_GPIO_EXTI_Callback+0x22>
			speed = 2;
 80006c2:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <HAL_GPIO_EXTI_Callback+0x34>)
 80006c4:	2202      	movs	r2, #2
 80006c6:	601a      	str	r2, [r3, #0]
		} else {
			speed = 1;
		}
	}
}
 80006c8:	e002      	b.n	80006d0 <HAL_GPIO_EXTI_Callback+0x28>
			speed = 1;
 80006ca:	4b04      	ldr	r3, [pc, #16]	@ (80006dc <HAL_GPIO_EXTI_Callback+0x34>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	601a      	str	r2, [r3, #0]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	20000000 	.word	0x20000000

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b096      	sub	sp, #88	@ 0x58
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	2244      	movs	r2, #68	@ 0x44
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f004 f91b 	bl	800492a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	463b      	mov	r3, r7
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000702:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000706:	f001 f9ef 	bl	8001ae8 <HAL_PWREx_ControlVoltageScaling>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000710:	f000 f837 	bl	8000782 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000714:	2302      	movs	r3, #2
 8000716:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800071c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071e:	2310      	movs	r3, #16
 8000720:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000722:	2302      	movs	r3, #2
 8000724:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000726:	2302      	movs	r3, #2
 8000728:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800072a:	2301      	movs	r3, #1
 800072c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800072e:	230a      	movs	r3, #10
 8000730:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000732:	2307      	movs	r3, #7
 8000734:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000736:	2302      	movs	r3, #2
 8000738:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800073a:	2302      	movs	r3, #2
 800073c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	4618      	mov	r0, r3
 8000744:	f001 fa26 	bl	8001b94 <HAL_RCC_OscConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800074e:	f000 f818 	bl	8000782 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000752:	230f      	movs	r3, #15
 8000754:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000756:	2303      	movs	r3, #3
 8000758:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000766:	463b      	mov	r3, r7
 8000768:	2104      	movs	r1, #4
 800076a:	4618      	mov	r0, r3
 800076c:	f001 fdee 	bl	800234c <HAL_RCC_ClockConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000776:	f000 f804 	bl	8000782 <Error_Handler>
  }
}
 800077a:	bf00      	nop
 800077c:	3758      	adds	r7, #88	@ 0x58
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000786:	b672      	cpsid	i
}
 8000788:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078a:	bf00      	nop
 800078c:	e7fd      	b.n	800078a <Error_Handler+0x8>
	...

08000790 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000794:	4b1b      	ldr	r3, [pc, #108]	@ (8000804 <MX_SPI1_Init+0x74>)
 8000796:	4a1c      	ldr	r2, [pc, #112]	@ (8000808 <MX_SPI1_Init+0x78>)
 8000798:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800079a:	4b1a      	ldr	r3, [pc, #104]	@ (8000804 <MX_SPI1_Init+0x74>)
 800079c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007a2:	4b18      	ldr	r3, [pc, #96]	@ (8000804 <MX_SPI1_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007a8:	4b16      	ldr	r3, [pc, #88]	@ (8000804 <MX_SPI1_Init+0x74>)
 80007aa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80007ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b0:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <MX_SPI1_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007b6:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <MX_SPI1_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007bc:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <MX_SPI1_Init+0x74>)
 80007be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <MX_SPI1_Init+0x74>)
 80007c6:	2210      	movs	r2, #16
 80007c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <MX_SPI1_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <MX_SPI1_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <MX_SPI1_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007dc:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <MX_SPI1_Init+0x74>)
 80007de:	2207      	movs	r2, #7
 80007e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <MX_SPI1_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <MX_SPI1_Init+0x74>)
 80007ea:	2208      	movs	r2, #8
 80007ec:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	@ (8000804 <MX_SPI1_Init+0x74>)
 80007f0:	f002 fc8c 	bl	800310c <HAL_SPI_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007fa:	f7ff ffc2 	bl	8000782 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	2000002c 	.word	0x2000002c
 8000808:	40013000 	.word	0x40013000

0800080c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	@ 0x28
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a2c      	ldr	r2, [pc, #176]	@ (80008dc <HAL_SPI_MspInit+0xd0>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d151      	bne.n	80008d2 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800082e:	4b2c      	ldr	r3, [pc, #176]	@ (80008e0 <HAL_SPI_MspInit+0xd4>)
 8000830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000832:	4a2b      	ldr	r2, [pc, #172]	@ (80008e0 <HAL_SPI_MspInit+0xd4>)
 8000834:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000838:	6613      	str	r3, [r2, #96]	@ 0x60
 800083a:	4b29      	ldr	r3, [pc, #164]	@ (80008e0 <HAL_SPI_MspInit+0xd4>)
 800083c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800083e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	4b26      	ldr	r3, [pc, #152]	@ (80008e0 <HAL_SPI_MspInit+0xd4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	4a25      	ldr	r2, [pc, #148]	@ (80008e0 <HAL_SPI_MspInit+0xd4>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000852:	4b23      	ldr	r3, [pc, #140]	@ (80008e0 <HAL_SPI_MspInit+0xd4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800085e:	23e0      	movs	r3, #224	@ 0xe0
 8000860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086a:	2303      	movs	r3, #3
 800086c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800086e:	2305      	movs	r3, #5
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	4619      	mov	r1, r3
 8000878:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800087c:	f000 ff4c 	bl	8001718 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000880:	4b18      	ldr	r3, [pc, #96]	@ (80008e4 <HAL_SPI_MspInit+0xd8>)
 8000882:	4a19      	ldr	r2, [pc, #100]	@ (80008e8 <HAL_SPI_MspInit+0xdc>)
 8000884:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8000886:	4b17      	ldr	r3, [pc, #92]	@ (80008e4 <HAL_SPI_MspInit+0xd8>)
 8000888:	2201      	movs	r2, #1
 800088a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800088c:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <HAL_SPI_MspInit+0xd8>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000892:	4b14      	ldr	r3, [pc, #80]	@ (80008e4 <HAL_SPI_MspInit+0xd8>)
 8000894:	2200      	movs	r2, #0
 8000896:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000898:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <HAL_SPI_MspInit+0xd8>)
 800089a:	2280      	movs	r2, #128	@ 0x80
 800089c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800089e:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <HAL_SPI_MspInit+0xd8>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	@ (80008e4 <HAL_SPI_MspInit+0xd8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <HAL_SPI_MspInit+0xd8>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <HAL_SPI_MspInit+0xd8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80008b6:	480b      	ldr	r0, [pc, #44]	@ (80008e4 <HAL_SPI_MspInit+0xd8>)
 80008b8:	f000 fd48 	bl	800134c <HAL_DMA_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80008c2:	f7ff ff5e 	bl	8000782 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4a06      	ldr	r2, [pc, #24]	@ (80008e4 <HAL_SPI_MspInit+0xd8>)
 80008ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80008cc:	4a05      	ldr	r2, [pc, #20]	@ (80008e4 <HAL_SPI_MspInit+0xd8>)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80008d2:	bf00      	nop
 80008d4:	3728      	adds	r7, #40	@ 0x28
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40013000 	.word	0x40013000
 80008e0:	40021000 	.word	0x40021000
 80008e4:	20000090 	.word	0x20000090
 80008e8:	4002001c 	.word	0x4002001c

080008ec <ST7735_SetAddressWindow>:
int32_t Ymax,Ymin,X;        // X goes from 0 to 127
int32_t Yrange; //YrangeDiv2;
int TimeIndex;
uint16_t PlotBGColor;
 
static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80008ec:	b590      	push	{r4, r7, lr}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4604      	mov	r4, r0
 80008f4:	4608      	mov	r0, r1
 80008f6:	4611      	mov	r1, r2
 80008f8:	461a      	mov	r2, r3
 80008fa:	4623      	mov	r3, r4
 80008fc:	71fb      	strb	r3, [r7, #7]
 80008fe:	4603      	mov	r3, r0
 8000900:	71bb      	strb	r3, [r7, #6]
 8000902:	460b      	mov	r3, r1
 8000904:	717b      	strb	r3, [r7, #5]
 8000906:	4613      	mov	r3, r2
 8000908:	713b      	strb	r3, [r7, #4]
    lcd7735_sendCmd(ST7735_CASET); // Column addr set
 800090a:	202a      	movs	r0, #42	@ 0x2a
 800090c:	f000 f9ee 	bl	8000cec <lcd7735_sendCmd>
		lcd7735_sendData(0x00);            // XS15 ~ XS8
 8000910:	2000      	movs	r0, #0
 8000912:	f000 fa01 	bl	8000d18 <lcd7735_sendData>
		lcd7735_sendData(x0+ST7735_XSTART);     // XSTART       XS7 ~ XS0
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	4618      	mov	r0, r3
 800091a:	f000 f9fd 	bl	8000d18 <lcd7735_sendData>
		lcd7735_sendData(0x00);            // XE15 ~ XE8
 800091e:	2000      	movs	r0, #0
 8000920:	f000 f9fa 	bl	8000d18 <lcd7735_sendData>
		lcd7735_sendData(x1+ST7735_XSTART);     // XEND         XE7 ~ XE0
 8000924:	797b      	ldrb	r3, [r7, #5]
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f9f6 	bl	8000d18 <lcd7735_sendData>
 
		lcd7735_sendCmd(ST7735_RASET); // Row addr set
 800092c:	202b      	movs	r0, #43	@ 0x2b
 800092e:	f000 f9dd 	bl	8000cec <lcd7735_sendCmd>
		lcd7735_sendData(0x00);
 8000932:	2000      	movs	r0, #0
 8000934:	f000 f9f0 	bl	8000d18 <lcd7735_sendData>
		lcd7735_sendData(y0+ST7735_YSTART);     // YSTART
 8000938:	79bb      	ldrb	r3, [r7, #6]
 800093a:	4618      	mov	r0, r3
 800093c:	f000 f9ec 	bl	8000d18 <lcd7735_sendData>
		lcd7735_sendData(0x00);
 8000940:	2000      	movs	r0, #0
 8000942:	f000 f9e9 	bl	8000d18 <lcd7735_sendData>
		lcd7735_sendData(y1+ST7735_YSTART);     // YEND
 8000946:	793b      	ldrb	r3, [r7, #4]
 8000948:	4618      	mov	r0, r3
 800094a:	f000 f9e5 	bl	8000d18 <lcd7735_sendData>
	
		lcd7735_sendCmd(ST7735_RAMWR); 
 800094e:	202c      	movs	r0, #44	@ 0x2c
 8000950:	f000 f9cc 	bl	8000cec <lcd7735_sendCmd>
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	bd90      	pop	{r4, r7, pc}

0800095c <ST7735_Init>:
void ST7735_Init() {
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
    //ST7735_Select();
	  LCD_CS0;
 8000960:	2200      	movs	r2, #0
 8000962:	2140      	movs	r1, #64	@ 0x40
 8000964:	480e      	ldr	r0, [pc, #56]	@ (80009a0 <ST7735_Init+0x44>)
 8000966:	f001 f881 	bl	8001a6c <HAL_GPIO_WritePin>
    //ST7735_Reset();
	  LCD_RST0;
 800096a:	2200      	movs	r2, #0
 800096c:	2180      	movs	r1, #128	@ 0x80
 800096e:	480c      	ldr	r0, [pc, #48]	@ (80009a0 <ST7735_Init+0x44>)
 8000970:	f001 f87c 	bl	8001a6c <HAL_GPIO_WritePin>
		HAL_Delay(7);
 8000974:	2007      	movs	r0, #7
 8000976:	f000 fbb3 	bl	80010e0 <HAL_Delay>
		LCD_RST1;
 800097a:	2201      	movs	r2, #1
 800097c:	2180      	movs	r1, #128	@ 0x80
 800097e:	4808      	ldr	r0, [pc, #32]	@ (80009a0 <ST7735_Init+0x44>)
 8000980:	f001 f874 	bl	8001a6c <HAL_GPIO_WritePin>
	
    //ST7735_ExecuteCommandList(init_cmds1);
		ST7735_Init_Command1();
 8000984:	f000 f80e 	bl	80009a4 <ST7735_Init_Command1>
    //ST7735_ExecuteCommandList(init_cmds2);
		ST7735_Init_Command2();
 8000988:	f000 f892 	bl	8000ab0 <ST7735_Init_Command2>
    //ST7735_ExecuteCommandList(init_cmds3);
		ST7735_Init_Command3();
 800098c:	f000 f8b2 	bl	8000af4 <ST7735_Init_Command3>
	
    //ST7735_Unselect();
		LCD_CS1;		
 8000990:	2201      	movs	r2, #1
 8000992:	2140      	movs	r1, #64	@ 0x40
 8000994:	4802      	ldr	r0, [pc, #8]	@ (80009a0 <ST7735_Init+0x44>)
 8000996:	f001 f869 	bl	8001a6c <HAL_GPIO_WritePin>
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	48000400 	.word	0x48000400

080009a4 <ST7735_Init_Command1>:
 
void ST7735_Init_Command1(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
	lcd7735_sendCmd(ST7735_SWRESET);		//  1: Software reset
 80009a8:	2001      	movs	r0, #1
 80009aa:	f000 f99f 	bl	8000cec <lcd7735_sendCmd>
	HAL_Delay(150);
 80009ae:	2096      	movs	r0, #150	@ 0x96
 80009b0:	f000 fb96 	bl	80010e0 <HAL_Delay>
	lcd7735_sendCmd(ST7735_SLPOUT);			//  2: Out of sleep mode
 80009b4:	2011      	movs	r0, #17
 80009b6:	f000 f999 	bl	8000cec <lcd7735_sendCmd>
	HAL_Delay(500);
 80009ba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009be:	f000 fb8f 	bl	80010e0 <HAL_Delay>
	lcd7735_sendCmd(ST7735_FRMCTR1);		//  3: Frame rate ctrl - normal mode
 80009c2:	20b1      	movs	r0, #177	@ 0xb1
 80009c4:	f000 f992 	bl	8000cec <lcd7735_sendCmd>
	lcd7735_sendData(0x01);							//     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 80009c8:	2001      	movs	r0, #1
 80009ca:	f000 f9a5 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 80009ce:	202c      	movs	r0, #44	@ 0x2c
 80009d0:	f000 f9a2 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 80009d4:	202d      	movs	r0, #45	@ 0x2d
 80009d6:	f000 f99f 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_FRMCTR2);		//  4: Frame rate control - idle mode
 80009da:	20b2      	movs	r0, #178	@ 0xb2
 80009dc:	f000 f986 	bl	8000cec <lcd7735_sendCmd>
	lcd7735_sendData(0x01);							//  Rate = fosc/(1x2+40) * (LINE+2C+2D)
 80009e0:	2001      	movs	r0, #1
 80009e2:	f000 f999 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 80009e6:	202c      	movs	r0, #44	@ 0x2c
 80009e8:	f000 f996 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 80009ec:	202d      	movs	r0, #45	@ 0x2d
 80009ee:	f000 f993 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_FRMCTR3);		//  5: Frame rate ctrl - partial mode
 80009f2:	20b3      	movs	r0, #179	@ 0xb3
 80009f4:	f000 f97a 	bl	8000cec <lcd7735_sendCmd>
	lcd7735_sendData(0x01);							//     Dot inversion mode
 80009f8:	2001      	movs	r0, #1
 80009fa:	f000 f98d 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 80009fe:	202c      	movs	r0, #44	@ 0x2c
 8000a00:	f000 f98a 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8000a04:	202d      	movs	r0, #45	@ 0x2d
 8000a06:	f000 f987 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x01);							//     Line inversion mode
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f000 f984 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 8000a10:	202c      	movs	r0, #44	@ 0x2c
 8000a12:	f000 f981 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8000a16:	202d      	movs	r0, #45	@ 0x2d
 8000a18:	f000 f97e 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_INVCTR);			//  6: Display inversion ctrl
 8000a1c:	20b4      	movs	r0, #180	@ 0xb4
 8000a1e:	f000 f965 	bl	8000cec <lcd7735_sendCmd>
	lcd7735_sendData(0x07);							//     No inversion
 8000a22:	2007      	movs	r0, #7
 8000a24:	f000 f978 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR1);			//  7: Power control
 8000a28:	20c0      	movs	r0, #192	@ 0xc0
 8000a2a:	f000 f95f 	bl	8000cec <lcd7735_sendCmd>
	lcd7735_sendData(0xA2);
 8000a2e:	20a2      	movs	r0, #162	@ 0xa2
 8000a30:	f000 f972 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x02);							//     -4.6V
 8000a34:	2002      	movs	r0, #2
 8000a36:	f000 f96f 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x84);							//     AUTO mode
 8000a3a:	2084      	movs	r0, #132	@ 0x84
 8000a3c:	f000 f96c 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR2);			//  8: Power control
 8000a40:	20c1      	movs	r0, #193	@ 0xc1
 8000a42:	f000 f953 	bl	8000cec <lcd7735_sendCmd>
	lcd7735_sendData(0xC5);							//     VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD
 8000a46:	20c5      	movs	r0, #197	@ 0xc5
 8000a48:	f000 f966 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR3);			//  9: Power control
 8000a4c:	20c2      	movs	r0, #194	@ 0xc2
 8000a4e:	f000 f94d 	bl	8000cec <lcd7735_sendCmd>
	lcd7735_sendData(0x0A);							//     Opamp current small
 8000a52:	200a      	movs	r0, #10
 8000a54:	f000 f960 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x00);							//     Boost frequency
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f000 f95d 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR4);			// 10: Power control
 8000a5e:	20c3      	movs	r0, #195	@ 0xc3
 8000a60:	f000 f944 	bl	8000cec <lcd7735_sendCmd>
	lcd7735_sendData(0x8A);							//     BCLK/2, Opamp current small & Medium low
 8000a64:	208a      	movs	r0, #138	@ 0x8a
 8000a66:	f000 f957 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x2A);
 8000a6a:	202a      	movs	r0, #42	@ 0x2a
 8000a6c:	f000 f954 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR5);			// 11: Power control
 8000a70:	20c4      	movs	r0, #196	@ 0xc4
 8000a72:	f000 f93b 	bl	8000cec <lcd7735_sendCmd>
	lcd7735_sendData(0x8A);
 8000a76:	208a      	movs	r0, #138	@ 0x8a
 8000a78:	f000 f94e 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0xEE);
 8000a7c:	20ee      	movs	r0, #238	@ 0xee
 8000a7e:	f000 f94b 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_VMCTR1);			// 12: Power control
 8000a82:	20c5      	movs	r0, #197	@ 0xc5
 8000a84:	f000 f932 	bl	8000cec <lcd7735_sendCmd>
	lcd7735_sendData(0x0E);
 8000a88:	200e      	movs	r0, #14
 8000a8a:	f000 f945 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_INVOFF);			// 13: Don't invert display
 8000a8e:	2020      	movs	r0, #32
 8000a90:	f000 f92c 	bl	8000cec <lcd7735_sendCmd>
	lcd7735_sendCmd(ST7735_MADCTL);			// 14: Memory access control (directions)
 8000a94:	2036      	movs	r0, #54	@ 0x36
 8000a96:	f000 f929 	bl	8000cec <lcd7735_sendCmd>
	lcd7735_sendData(ST7735_ROTATION);	//     row addr/col addr, bottom to top refresh
 8000a9a:	20c0      	movs	r0, #192	@ 0xc0
 8000a9c:	f000 f93c 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_COLMOD);			// 15: set color mode
 8000aa0:	203a      	movs	r0, #58	@ 0x3a
 8000aa2:	f000 f923 	bl	8000cec <lcd7735_sendCmd>
	lcd7735_sendData(0x05);							//     16-bit color
 8000aa6:	2005      	movs	r0, #5
 8000aa8:	f000 f936 	bl	8000d18 <lcd7735_sendData>
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <ST7735_Init_Command2>:
 
void ST7735_Init_Command2(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	lcd7735_sendCmd(ST7735_CASET);			//  1: Column addr set
 8000ab4:	202a      	movs	r0, #42	@ 0x2a
 8000ab6:	f000 f919 	bl	8000cec <lcd7735_sendCmd>
	lcd7735_sendData(0x00);							//     XSTART = 0
 8000aba:	2000      	movs	r0, #0
 8000abc:	f000 f92c 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f000 f929 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x00);							//     XEND = 127
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f000 f926 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x7F);
 8000acc:	207f      	movs	r0, #127	@ 0x7f
 8000ace:	f000 f923 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_RASET);			//  2: Row addr set
 8000ad2:	202b      	movs	r0, #43	@ 0x2b
 8000ad4:	f000 f90a 	bl	8000cec <lcd7735_sendCmd>
	lcd7735_sendData(0x00);							//     XSTART = 0
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f000 f91d 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f000 f91a 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x00);							//     XEND = 127
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f000 f917 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x7F);
 8000aea:	207f      	movs	r0, #127	@ 0x7f
 8000aec:	f000 f914 	bl	8000d18 <lcd7735_sendData>
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <ST7735_Init_Command3>:
 
void ST7735_Init_Command3(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	lcd7735_sendCmd(ST7735_GMCTRP1);  //  1: Magical unicorn dust
 8000af8:	20e0      	movs	r0, #224	@ 0xe0
 8000afa:	f000 f8f7 	bl	8000cec <lcd7735_sendCmd>
	lcd7735_sendData(0x02);
 8000afe:	2002      	movs	r0, #2
 8000b00:	f000 f90a 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x1C);
 8000b04:	201c      	movs	r0, #28
 8000b06:	f000 f907 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x07);
 8000b0a:	2007      	movs	r0, #7
 8000b0c:	f000 f904 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x12);
 8000b10:	2012      	movs	r0, #18
 8000b12:	f000 f901 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x37);
 8000b16:	2037      	movs	r0, #55	@ 0x37
 8000b18:	f000 f8fe 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x32);
 8000b1c:	2032      	movs	r0, #50	@ 0x32
 8000b1e:	f000 f8fb 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x29);
 8000b22:	2029      	movs	r0, #41	@ 0x29
 8000b24:	f000 f8f8 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8000b28:	202d      	movs	r0, #45	@ 0x2d
 8000b2a:	f000 f8f5 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x29);
 8000b2e:	2029      	movs	r0, #41	@ 0x29
 8000b30:	f000 f8f2 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x25);
 8000b34:	2025      	movs	r0, #37	@ 0x25
 8000b36:	f000 f8ef 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x2B);
 8000b3a:	202b      	movs	r0, #43	@ 0x2b
 8000b3c:	f000 f8ec 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x39);
 8000b40:	2039      	movs	r0, #57	@ 0x39
 8000b42:	f000 f8e9 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000b46:	2000      	movs	r0, #0
 8000b48:	f000 f8e6 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x01);
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f000 f8e3 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x03);
 8000b52:	2003      	movs	r0, #3
 8000b54:	f000 f8e0 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x10);
 8000b58:	2010      	movs	r0, #16
 8000b5a:	f000 f8dd 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_GMCTRN1);  //  2: Sparkles and rainbows
 8000b5e:	20e1      	movs	r0, #225	@ 0xe1
 8000b60:	f000 f8c4 	bl	8000cec <lcd7735_sendCmd>
	lcd7735_sendData(0x03);
 8000b64:	2003      	movs	r0, #3
 8000b66:	f000 f8d7 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x1D);
 8000b6a:	201d      	movs	r0, #29
 8000b6c:	f000 f8d4 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x07);
 8000b70:	2007      	movs	r0, #7
 8000b72:	f000 f8d1 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x06);
 8000b76:	2006      	movs	r0, #6
 8000b78:	f000 f8ce 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x2E);
 8000b7c:	202e      	movs	r0, #46	@ 0x2e
 8000b7e:	f000 f8cb 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 8000b82:	202c      	movs	r0, #44	@ 0x2c
 8000b84:	f000 f8c8 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x29);
 8000b88:	2029      	movs	r0, #41	@ 0x29
 8000b8a:	f000 f8c5 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8000b8e:	202d      	movs	r0, #45	@ 0x2d
 8000b90:	f000 f8c2 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x2E);
 8000b94:	202e      	movs	r0, #46	@ 0x2e
 8000b96:	f000 f8bf 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x2E);
 8000b9a:	202e      	movs	r0, #46	@ 0x2e
 8000b9c:	f000 f8bc 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x37);
 8000ba0:	2037      	movs	r0, #55	@ 0x37
 8000ba2:	f000 f8b9 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x3F);
 8000ba6:	203f      	movs	r0, #63	@ 0x3f
 8000ba8:	f000 f8b6 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000bac:	2000      	movs	r0, #0
 8000bae:	f000 f8b3 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	f000 f8b0 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x02);
 8000bb8:	2002      	movs	r0, #2
 8000bba:	f000 f8ad 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendData(0x10);
 8000bbe:	2010      	movs	r0, #16
 8000bc0:	f000 f8aa 	bl	8000d18 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_NORON);
 8000bc4:	2013      	movs	r0, #19
 8000bc6:	f000 f891 	bl	8000cec <lcd7735_sendCmd>
	HAL_Delay(10);
 8000bca:	200a      	movs	r0, #10
 8000bcc:	f000 fa88 	bl	80010e0 <HAL_Delay>
	lcd7735_sendCmd(ST7735_DISPON);
 8000bd0:	2029      	movs	r0, #41	@ 0x29
 8000bd2:	f000 f88b 	bl	8000cec <lcd7735_sendCmd>
	HAL_Delay(100);
 8000bd6:	2064      	movs	r0, #100	@ 0x64
 8000bd8:	f000 fa82 	bl	80010e0 <HAL_Delay>
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <ST7735_FillRectangle>:
    lcd7735_sendData(lo);
  }
	LCD_CS1;
}
	
void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4604      	mov	r4, r0
 8000be8:	4608      	mov	r0, r1
 8000bea:	4611      	mov	r1, r2
 8000bec:	461a      	mov	r2, r3
 8000bee:	4623      	mov	r3, r4
 8000bf0:	80fb      	strh	r3, [r7, #6]
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	80bb      	strh	r3, [r7, #4]
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	807b      	strh	r3, [r7, #2]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000bfe:	88fb      	ldrh	r3, [r7, #6]
 8000c00:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c02:	d85a      	bhi.n	8000cba <ST7735_FillRectangle+0xda>
 8000c04:	88bb      	ldrh	r3, [r7, #4]
 8000c06:	2b9f      	cmp	r3, #159	@ 0x9f
 8000c08:	d857      	bhi.n	8000cba <ST7735_FillRectangle+0xda>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000c0a:	88fa      	ldrh	r2, [r7, #6]
 8000c0c:	887b      	ldrh	r3, [r7, #2]
 8000c0e:	4413      	add	r3, r2
 8000c10:	2b80      	cmp	r3, #128	@ 0x80
 8000c12:	dd03      	ble.n	8000c1c <ST7735_FillRectangle+0x3c>
 8000c14:	88fb      	ldrh	r3, [r7, #6]
 8000c16:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000c1a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000c1c:	88ba      	ldrh	r2, [r7, #4]
 8000c1e:	883b      	ldrh	r3, [r7, #0]
 8000c20:	4413      	add	r3, r2
 8000c22:	2ba0      	cmp	r3, #160	@ 0xa0
 8000c24:	dd03      	ble.n	8000c2e <ST7735_FillRectangle+0x4e>
 8000c26:	88bb      	ldrh	r3, [r7, #4]
 8000c28:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8000c2c:	803b      	strh	r3, [r7, #0]
 
    LCD_CS0;
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2140      	movs	r1, #64	@ 0x40
 8000c32:	4824      	ldr	r0, [pc, #144]	@ (8000cc4 <ST7735_FillRectangle+0xe4>)
 8000c34:	f000 ff1a 	bl	8001a6c <HAL_GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	b2d8      	uxtb	r0, r3
 8000c3c:	88bb      	ldrh	r3, [r7, #4]
 8000c3e:	b2d9      	uxtb	r1, r3
 8000c40:	88fb      	ldrh	r3, [r7, #6]
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	887b      	ldrh	r3, [r7, #2]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	4413      	add	r3, r2
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	3b01      	subs	r3, #1
 8000c4e:	b2dc      	uxtb	r4, r3
 8000c50:	88bb      	ldrh	r3, [r7, #4]
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	883b      	ldrh	r3, [r7, #0]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	4413      	add	r3, r2
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	3b01      	subs	r3, #1
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	4622      	mov	r2, r4
 8000c62:	f7ff fe43 	bl	80008ec <ST7735_SetAddressWindow>
    LCD_DC1;
 8000c66:	2201      	movs	r2, #1
 8000c68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c6c:	4815      	ldr	r0, [pc, #84]	@ (8000cc4 <ST7735_FillRectangle+0xe4>)
 8000c6e:	f000 fefd 	bl	8001a6c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000c72:	883b      	ldrh	r3, [r7, #0]
 8000c74:	80bb      	strh	r3, [r7, #4]
 8000c76:	e017      	b.n	8000ca8 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {            
 8000c78:	887b      	ldrh	r3, [r7, #2]
 8000c7a:	80fb      	strh	r3, [r7, #6]
 8000c7c:	e00e      	b.n	8000c9c <ST7735_FillRectangle+0xbc>
					lcd7735_sendData(color>>8);
 8000c7e:	8b3b      	ldrh	r3, [r7, #24]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 f846 	bl	8000d18 <lcd7735_sendData>
					lcd7735_sendData(color);
 8000c8c:	8b3b      	ldrh	r3, [r7, #24]
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 f841 	bl	8000d18 <lcd7735_sendData>
        for(x = w; x > 0; x--) {            
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	80fb      	strh	r3, [r7, #6]
 8000c9c:	88fb      	ldrh	r3, [r7, #6]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d1ed      	bne.n	8000c7e <ST7735_FillRectangle+0x9e>
    for(y = h; y > 0; y--) {
 8000ca2:	88bb      	ldrh	r3, [r7, #4]
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	80bb      	strh	r3, [r7, #4]
 8000ca8:	88bb      	ldrh	r3, [r7, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1e4      	bne.n	8000c78 <ST7735_FillRectangle+0x98>
        }
    }
		
		LCD_CS1;  //Unselect
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2140      	movs	r1, #64	@ 0x40
 8000cb2:	4804      	ldr	r0, [pc, #16]	@ (8000cc4 <ST7735_FillRectangle+0xe4>)
 8000cb4:	f000 feda 	bl	8001a6c <HAL_GPIO_WritePin>
 8000cb8:	e000      	b.n	8000cbc <ST7735_FillRectangle+0xdc>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000cba:	bf00      	nop
}
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd90      	pop	{r4, r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	48000400 	.word	0x48000400

08000cc8 <ST7735_FillScreen>:
void ST7735_FillScreen(uint16_t color) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af02      	add	r7, sp, #8
 8000cce:	4603      	mov	r3, r0
 8000cd0:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000cd2:	88fb      	ldrh	r3, [r7, #6]
 8000cd4:	9300      	str	r3, [sp, #0]
 8000cd6:	23a0      	movs	r3, #160	@ 0xa0
 8000cd8:	2280      	movs	r2, #128	@ 0x80
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff ff7f 	bl	8000be0 <ST7735_FillRectangle>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <lcd7735_sendCmd>:
  //ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
	lcd7735_sendCmd(invert ? ST7735_INVON : ST7735_INVOFF);
  LCD_CS1;  //Unselect
}
 
void lcd7735_sendCmd(uint8_t cmd) {  //uint8_t       //unsigned char
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
   LCD_DC0; //Set DC low
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cfc:	4805      	ldr	r0, [pc, #20]	@ (8000d14 <lcd7735_sendCmd+0x28>)
 8000cfe:	f000 feb5 	bl	8001a6c <HAL_GPIO_WritePin>
   lcd7735_senddata(cmd);
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 f81d 	bl	8000d44 <lcd7735_senddata>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	48000400 	.word	0x48000400

08000d18 <lcd7735_sendData>:
 
 
void lcd7735_sendData(uint8_t data) {  //uint8_t      //unsigned char
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
   LCD_DC1;//Set DC HIGH
 8000d22:	2201      	movs	r2, #1
 8000d24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d28:	4805      	ldr	r0, [pc, #20]	@ (8000d40 <lcd7735_sendData+0x28>)
 8000d2a:	f000 fe9f 	bl	8001a6c <HAL_GPIO_WritePin>
   lcd7735_senddata(data);
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 f807 	bl	8000d44 <lcd7735_senddata>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	48000400 	.word	0x48000400

08000d44 <lcd7735_senddata>:
 
void lcd7735_senddata(uint8_t data) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi1, &data,sizeof(data),0x1);
 8000d4e:	1df9      	adds	r1, r7, #7
 8000d50:	2301      	movs	r3, #1
 8000d52:	2201      	movs	r2, #1
 8000d54:	4803      	ldr	r0, [pc, #12]	@ (8000d64 <lcd7735_senddata+0x20>)
 8000d56:	f002 fa7c 	bl	8003252 <HAL_SPI_Transmit>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	2000002c 	.word	0x2000002c

08000d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000dac <HAL_MspInit+0x44>)
 8000d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d72:	4a0e      	ldr	r2, [pc, #56]	@ (8000dac <HAL_MspInit+0x44>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dac <HAL_MspInit+0x44>)
 8000d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d86:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <HAL_MspInit+0x44>)
 8000d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d8a:	4a08      	ldr	r2, [pc, #32]	@ (8000dac <HAL_MspInit+0x44>)
 8000d8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d90:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d92:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <HAL_MspInit+0x44>)
 8000d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	603b      	str	r3, [r7, #0]
 8000d9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	40021000 	.word	0x40021000

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <NMI_Handler+0x4>

08000db8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <HardFault_Handler+0x4>

08000dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <MemManage_Handler+0x4>

08000dc8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <BusFault_Handler+0x4>

08000dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <UsageFault_Handler+0x4>

08000dd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e06:	f000 f94b 	bl	80010a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000e14:	4802      	ldr	r0, [pc, #8]	@ (8000e20 <DMA1_Channel2_IRQHandler+0x10>)
 8000e16:	f000 fbd0 	bl	80015ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000090 	.word	0x20000090

08000e24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e28:	4802      	ldr	r0, [pc, #8]	@ (8000e34 <USART2_IRQHandler+0x10>)
 8000e2a:	f002 fd3b 	bl	80038a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200000d8 	.word	0x200000d8

08000e38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8000e3c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000e40:	f000 fe2c 	bl	8001a9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e4c:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <SystemInit+0x20>)
 8000e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e52:	4a05      	ldr	r2, [pc, #20]	@ (8000e68 <SystemInit+0x20>)
 8000e54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e70:	4b14      	ldr	r3, [pc, #80]	@ (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000e72:	4a15      	ldr	r2, [pc, #84]	@ (8000ec8 <MX_USART2_UART_Init+0x5c>)
 8000e74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e76:	4b13      	ldr	r3, [pc, #76]	@ (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000e78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000e92:	220c      	movs	r2, #12
 8000e94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e96:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e9c:	4b09      	ldr	r3, [pc, #36]	@ (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ea2:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eae:	4805      	ldr	r0, [pc, #20]	@ (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000eb0:	f002 fcaa 	bl	8003808 <HAL_UART_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000eba:	f7ff fc62 	bl	8000782 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200000d8 	.word	0x200000d8
 8000ec8:	40004400 	.word	0x40004400

08000ecc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b0ac      	sub	sp, #176	@ 0xb0
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	2288      	movs	r2, #136	@ 0x88
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f003 fd1c 	bl	800492a <memset>
  if(uartHandle->Instance==USART2)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a25      	ldr	r2, [pc, #148]	@ (8000f8c <HAL_UART_MspInit+0xc0>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d143      	bne.n	8000f84 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000efc:	2302      	movs	r3, #2
 8000efe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f001 fc43 	bl	8002794 <HAL_RCCEx_PeriphCLKConfig>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f14:	f7ff fc35 	bl	8000782 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f18:	4b1d      	ldr	r3, [pc, #116]	@ (8000f90 <HAL_UART_MspInit+0xc4>)
 8000f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f1c:	4a1c      	ldr	r2, [pc, #112]	@ (8000f90 <HAL_UART_MspInit+0xc4>)
 8000f1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f22:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f24:	4b1a      	ldr	r3, [pc, #104]	@ (8000f90 <HAL_UART_MspInit+0xc4>)
 8000f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f30:	4b17      	ldr	r3, [pc, #92]	@ (8000f90 <HAL_UART_MspInit+0xc4>)
 8000f32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f34:	4a16      	ldr	r2, [pc, #88]	@ (8000f90 <HAL_UART_MspInit+0xc4>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f3c:	4b14      	ldr	r3, [pc, #80]	@ (8000f90 <HAL_UART_MspInit+0xc4>)
 8000f3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f48:	230c      	movs	r3, #12
 8000f4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f60:	2307      	movs	r3, #7
 8000f62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f66:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f70:	f000 fbd2 	bl	8001718 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2100      	movs	r1, #0
 8000f78:	2026      	movs	r0, #38	@ 0x26
 8000f7a:	f000 f9b0 	bl	80012de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f7e:	2026      	movs	r0, #38	@ 0x26
 8000f80:	f000 f9c9 	bl	8001316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f84:	bf00      	nop
 8000f86:	37b0      	adds	r7, #176	@ 0xb0
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40004400 	.word	0x40004400
 8000f90:	40021000 	.word	0x40021000

08000f94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fcc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f98:	f7ff ff56 	bl	8000e48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f9c:	480c      	ldr	r0, [pc, #48]	@ (8000fd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f9e:	490d      	ldr	r1, [pc, #52]	@ (8000fd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd8 <LoopForever+0xe>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa4:	e002      	b.n	8000fac <LoopCopyDataInit>

08000fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000faa:	3304      	adds	r3, #4

08000fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb0:	d3f9      	bcc.n	8000fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fb4:	4c0a      	ldr	r4, [pc, #40]	@ (8000fe0 <LoopForever+0x16>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb8:	e001      	b.n	8000fbe <LoopFillZerobss>

08000fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fbc:	3204      	adds	r2, #4

08000fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc0:	d3fb      	bcc.n	8000fba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fc2:	f003 fcbb 	bl	800493c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fc6:	f7ff faf9 	bl	80005bc <main>

08000fca <LoopForever>:

LoopForever:
    b LoopForever
 8000fca:	e7fe      	b.n	8000fca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fcc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000fd8:	080049f4 	.word	0x080049f4
  ldr r2, =_sbss
 8000fdc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000fe0:	20000164 	.word	0x20000164

08000fe4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC1_2_IRQHandler>
	...

08000fe8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <HAL_Init+0x3c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a0b      	ldr	r2, [pc, #44]	@ (8001024 <HAL_Init+0x3c>)
 8000ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ffc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffe:	2003      	movs	r0, #3
 8001000:	f000 f962 	bl	80012c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001004:	2000      	movs	r0, #0
 8001006:	f000 f80f 	bl	8001028 <HAL_InitTick>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d002      	beq.n	8001016 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	71fb      	strb	r3, [r7, #7]
 8001014:	e001      	b.n	800101a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001016:	f7ff fea7 	bl	8000d68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800101a:	79fb      	ldrb	r3, [r7, #7]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40022000 	.word	0x40022000

08001028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001034:	4b17      	ldr	r3, [pc, #92]	@ (8001094 <HAL_InitTick+0x6c>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d023      	beq.n	8001084 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800103c:	4b16      	ldr	r3, [pc, #88]	@ (8001098 <HAL_InitTick+0x70>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b14      	ldr	r3, [pc, #80]	@ (8001094 <HAL_InitTick+0x6c>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	4619      	mov	r1, r3
 8001046:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800104a:	fbb3 f3f1 	udiv	r3, r3, r1
 800104e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001052:	4618      	mov	r0, r3
 8001054:	f000 f96d 	bl	8001332 <HAL_SYSTICK_Config>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d10f      	bne.n	800107e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b0f      	cmp	r3, #15
 8001062:	d809      	bhi.n	8001078 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001064:	2200      	movs	r2, #0
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	f000 f937 	bl	80012de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001070:	4a0a      	ldr	r2, [pc, #40]	@ (800109c <HAL_InitTick+0x74>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	e007      	b.n	8001088 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	e004      	b.n	8001088 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	73fb      	strb	r3, [r7, #15]
 8001082:	e001      	b.n	8001088 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001088:	7bfb      	ldrb	r3, [r7, #15]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	2000000c 	.word	0x2000000c
 8001098:	20000004 	.word	0x20000004
 800109c:	20000008 	.word	0x20000008

080010a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010a4:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <HAL_IncTick+0x20>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <HAL_IncTick+0x24>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4413      	add	r3, r2
 80010b0:	4a04      	ldr	r2, [pc, #16]	@ (80010c4 <HAL_IncTick+0x24>)
 80010b2:	6013      	str	r3, [r2, #0]
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	2000000c 	.word	0x2000000c
 80010c4:	20000160 	.word	0x20000160

080010c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return uwTick;
 80010cc:	4b03      	ldr	r3, [pc, #12]	@ (80010dc <HAL_GetTick+0x14>)
 80010ce:	681b      	ldr	r3, [r3, #0]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000160 	.word	0x20000160

080010e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e8:	f7ff ffee 	bl	80010c8 <HAL_GetTick>
 80010ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f8:	d005      	beq.n	8001106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001124 <HAL_Delay+0x44>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	461a      	mov	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4413      	add	r3, r2
 8001104:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001106:	bf00      	nop
 8001108:	f7ff ffde 	bl	80010c8 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	429a      	cmp	r2, r3
 8001116:	d8f7      	bhi.n	8001108 <HAL_Delay+0x28>
  {
  }
}
 8001118:	bf00      	nop
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	2000000c 	.word	0x2000000c

08001128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001138:	4b0c      	ldr	r3, [pc, #48]	@ (800116c <__NVIC_SetPriorityGrouping+0x44>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001144:	4013      	ands	r3, r2
 8001146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001150:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001154:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800115a:	4a04      	ldr	r2, [pc, #16]	@ (800116c <__NVIC_SetPriorityGrouping+0x44>)
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	60d3      	str	r3, [r2, #12]
}
 8001160:	bf00      	nop
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001174:	4b04      	ldr	r3, [pc, #16]	@ (8001188 <__NVIC_GetPriorityGrouping+0x18>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	0a1b      	lsrs	r3, r3, #8
 800117a:	f003 0307 	and.w	r3, r3, #7
}
 800117e:	4618      	mov	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	2b00      	cmp	r3, #0
 800119c:	db0b      	blt.n	80011b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	f003 021f 	and.w	r2, r3, #31
 80011a4:	4907      	ldr	r1, [pc, #28]	@ (80011c4 <__NVIC_EnableIRQ+0x38>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	095b      	lsrs	r3, r3, #5
 80011ac:	2001      	movs	r0, #1
 80011ae:	fa00 f202 	lsl.w	r2, r0, r2
 80011b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000e100 	.word	0xe000e100

080011c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	db0a      	blt.n	80011f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	490c      	ldr	r1, [pc, #48]	@ (8001214 <__NVIC_SetPriority+0x4c>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	0112      	lsls	r2, r2, #4
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	440b      	add	r3, r1
 80011ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f0:	e00a      	b.n	8001208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4908      	ldr	r1, [pc, #32]	@ (8001218 <__NVIC_SetPriority+0x50>)
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	3b04      	subs	r3, #4
 8001200:	0112      	lsls	r2, r2, #4
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	440b      	add	r3, r1
 8001206:	761a      	strb	r2, [r3, #24]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000e100 	.word	0xe000e100
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121c:	b480      	push	{r7}
 800121e:	b089      	sub	sp, #36	@ 0x24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f1c3 0307 	rsb	r3, r3, #7
 8001236:	2b04      	cmp	r3, #4
 8001238:	bf28      	it	cs
 800123a:	2304      	movcs	r3, #4
 800123c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3304      	adds	r3, #4
 8001242:	2b06      	cmp	r3, #6
 8001244:	d902      	bls.n	800124c <NVIC_EncodePriority+0x30>
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3b03      	subs	r3, #3
 800124a:	e000      	b.n	800124e <NVIC_EncodePriority+0x32>
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	f04f 32ff 	mov.w	r2, #4294967295
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43da      	mvns	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	401a      	ands	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001264:	f04f 31ff 	mov.w	r1, #4294967295
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	43d9      	mvns	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	4313      	orrs	r3, r2
         );
}
 8001276:	4618      	mov	r0, r3
 8001278:	3724      	adds	r7, #36	@ 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3b01      	subs	r3, #1
 8001290:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001294:	d301      	bcc.n	800129a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001296:	2301      	movs	r3, #1
 8001298:	e00f      	b.n	80012ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129a:	4a0a      	ldr	r2, [pc, #40]	@ (80012c4 <SysTick_Config+0x40>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012a2:	210f      	movs	r1, #15
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	f7ff ff8e 	bl	80011c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ac:	4b05      	ldr	r3, [pc, #20]	@ (80012c4 <SysTick_Config+0x40>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b2:	4b04      	ldr	r3, [pc, #16]	@ (80012c4 <SysTick_Config+0x40>)
 80012b4:	2207      	movs	r2, #7
 80012b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	e000e010 	.word	0xe000e010

080012c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ff29 	bl	8001128 <__NVIC_SetPriorityGrouping>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b086      	sub	sp, #24
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	4603      	mov	r3, r0
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	607a      	str	r2, [r7, #4]
 80012ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012f0:	f7ff ff3e 	bl	8001170 <__NVIC_GetPriorityGrouping>
 80012f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	68b9      	ldr	r1, [r7, #8]
 80012fa:	6978      	ldr	r0, [r7, #20]
 80012fc:	f7ff ff8e 	bl	800121c <NVIC_EncodePriority>
 8001300:	4602      	mov	r2, r0
 8001302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001306:	4611      	mov	r1, r2
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff5d 	bl	80011c8 <__NVIC_SetPriority>
}
 800130e:	bf00      	nop
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff31 	bl	800118c <__NVIC_EnableIRQ>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ffa2 	bl	8001284 <SysTick_Config>
 8001340:	4603      	mov	r3, r0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e098      	b.n	8001490 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	4b4d      	ldr	r3, [pc, #308]	@ (800149c <HAL_DMA_Init+0x150>)
 8001366:	429a      	cmp	r2, r3
 8001368:	d80f      	bhi.n	800138a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	4b4b      	ldr	r3, [pc, #300]	@ (80014a0 <HAL_DMA_Init+0x154>)
 8001372:	4413      	add	r3, r2
 8001374:	4a4b      	ldr	r2, [pc, #300]	@ (80014a4 <HAL_DMA_Init+0x158>)
 8001376:	fba2 2303 	umull	r2, r3, r2, r3
 800137a:	091b      	lsrs	r3, r3, #4
 800137c:	009a      	lsls	r2, r3, #2
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a48      	ldr	r2, [pc, #288]	@ (80014a8 <HAL_DMA_Init+0x15c>)
 8001386:	641a      	str	r2, [r3, #64]	@ 0x40
 8001388:	e00e      	b.n	80013a8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	461a      	mov	r2, r3
 8001390:	4b46      	ldr	r3, [pc, #280]	@ (80014ac <HAL_DMA_Init+0x160>)
 8001392:	4413      	add	r3, r2
 8001394:	4a43      	ldr	r2, [pc, #268]	@ (80014a4 <HAL_DMA_Init+0x158>)
 8001396:	fba2 2303 	umull	r2, r3, r2, r3
 800139a:	091b      	lsrs	r3, r3, #4
 800139c:	009a      	lsls	r2, r3, #2
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a42      	ldr	r2, [pc, #264]	@ (80014b0 <HAL_DMA_Init+0x164>)
 80013a6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2202      	movs	r2, #2
 80013ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80013be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80013c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80013cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001402:	d039      	beq.n	8001478 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001408:	4a27      	ldr	r2, [pc, #156]	@ (80014a8 <HAL_DMA_Init+0x15c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d11a      	bne.n	8001444 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800140e:	4b29      	ldr	r3, [pc, #164]	@ (80014b4 <HAL_DMA_Init+0x168>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001416:	f003 031c 	and.w	r3, r3, #28
 800141a:	210f      	movs	r1, #15
 800141c:	fa01 f303 	lsl.w	r3, r1, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	4924      	ldr	r1, [pc, #144]	@ (80014b4 <HAL_DMA_Init+0x168>)
 8001424:	4013      	ands	r3, r2
 8001426:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001428:	4b22      	ldr	r3, [pc, #136]	@ (80014b4 <HAL_DMA_Init+0x168>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6859      	ldr	r1, [r3, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001434:	f003 031c 	and.w	r3, r3, #28
 8001438:	fa01 f303 	lsl.w	r3, r1, r3
 800143c:	491d      	ldr	r1, [pc, #116]	@ (80014b4 <HAL_DMA_Init+0x168>)
 800143e:	4313      	orrs	r3, r2
 8001440:	600b      	str	r3, [r1, #0]
 8001442:	e019      	b.n	8001478 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001444:	4b1c      	ldr	r3, [pc, #112]	@ (80014b8 <HAL_DMA_Init+0x16c>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144c:	f003 031c 	and.w	r3, r3, #28
 8001450:	210f      	movs	r1, #15
 8001452:	fa01 f303 	lsl.w	r3, r1, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	4917      	ldr	r1, [pc, #92]	@ (80014b8 <HAL_DMA_Init+0x16c>)
 800145a:	4013      	ands	r3, r2
 800145c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800145e:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <HAL_DMA_Init+0x16c>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6859      	ldr	r1, [r3, #4]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146a:	f003 031c 	and.w	r3, r3, #28
 800146e:	fa01 f303 	lsl.w	r3, r1, r3
 8001472:	4911      	ldr	r1, [pc, #68]	@ (80014b8 <HAL_DMA_Init+0x16c>)
 8001474:	4313      	orrs	r3, r2
 8001476:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2201      	movs	r2, #1
 8001482:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	40020407 	.word	0x40020407
 80014a0:	bffdfff8 	.word	0xbffdfff8
 80014a4:	cccccccd 	.word	0xcccccccd
 80014a8:	40020000 	.word	0x40020000
 80014ac:	bffdfbf8 	.word	0xbffdfbf8
 80014b0:	40020400 	.word	0x40020400
 80014b4:	400200a8 	.word	0x400200a8
 80014b8:	400204a8 	.word	0x400204a8

080014bc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d008      	beq.n	80014e6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2204      	movs	r2, #4
 80014d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e022      	b.n	800152c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 020e 	bic.w	r2, r2, #14
 80014f4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 0201 	bic.w	r2, r2, #1
 8001504:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150a:	f003 021c 	and.w	r2, r3, #28
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	2101      	movs	r1, #1
 8001514:	fa01 f202 	lsl.w	r2, r1, r2
 8001518:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800152a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800152c:	4618      	mov	r0, r3
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d005      	beq.n	800155c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2204      	movs	r2, #4
 8001554:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	73fb      	strb	r3, [r7, #15]
 800155a:	e029      	b.n	80015b0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 020e 	bic.w	r2, r2, #14
 800156a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 0201 	bic.w	r2, r2, #1
 800157a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001580:	f003 021c 	and.w	r2, r3, #28
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001588:	2101      	movs	r1, #1
 800158a:	fa01 f202 	lsl.w	r2, r1, r2
 800158e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	4798      	blx	r3
    }
  }
  return status;
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b084      	sub	sp, #16
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d6:	f003 031c 	and.w	r3, r3, #28
 80015da:	2204      	movs	r2, #4
 80015dc:	409a      	lsls	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d026      	beq.n	8001634 <HAL_DMA_IRQHandler+0x7a>
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d021      	beq.n	8001634 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0320 	and.w	r3, r3, #32
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d107      	bne.n	800160e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 0204 	bic.w	r2, r2, #4
 800160c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001612:	f003 021c 	and.w	r2, r3, #28
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161a:	2104      	movs	r1, #4
 800161c:	fa01 f202 	lsl.w	r2, r1, r2
 8001620:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	2b00      	cmp	r3, #0
 8001628:	d071      	beq.n	800170e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001632:	e06c      	b.n	800170e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001638:	f003 031c 	and.w	r3, r3, #28
 800163c:	2202      	movs	r2, #2
 800163e:	409a      	lsls	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4013      	ands	r3, r2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d02e      	beq.n	80016a6 <HAL_DMA_IRQHandler+0xec>
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d029      	beq.n	80016a6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0320 	and.w	r3, r3, #32
 800165c:	2b00      	cmp	r3, #0
 800165e:	d10b      	bne.n	8001678 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 020a 	bic.w	r2, r2, #10
 800166e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167c:	f003 021c 	and.w	r2, r3, #28
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001684:	2102      	movs	r1, #2
 8001686:	fa01 f202 	lsl.w	r2, r1, r2
 800168a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001698:	2b00      	cmp	r3, #0
 800169a:	d038      	beq.n	800170e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80016a4:	e033      	b.n	800170e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016aa:	f003 031c 	and.w	r3, r3, #28
 80016ae:	2208      	movs	r2, #8
 80016b0:	409a      	lsls	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	4013      	ands	r3, r2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d02a      	beq.n	8001710 <HAL_DMA_IRQHandler+0x156>
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d025      	beq.n	8001710 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 020e 	bic.w	r2, r2, #14
 80016d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d8:	f003 021c 	and.w	r2, r3, #28
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e0:	2101      	movs	r1, #1
 80016e2:	fa01 f202 	lsl.w	r2, r1, r2
 80016e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001702:	2b00      	cmp	r3, #0
 8001704:	d004      	beq.n	8001710 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800170e:	bf00      	nop
 8001710:	bf00      	nop
}
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001718:	b480      	push	{r7}
 800171a:	b087      	sub	sp, #28
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001726:	e17f      	b.n	8001a28 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	2101      	movs	r1, #1
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	fa01 f303 	lsl.w	r3, r1, r3
 8001734:	4013      	ands	r3, r2
 8001736:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 8171 	beq.w	8001a22 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 0303 	and.w	r3, r3, #3
 8001748:	2b01      	cmp	r3, #1
 800174a:	d005      	beq.n	8001758 <HAL_GPIO_Init+0x40>
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d130      	bne.n	80017ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	2203      	movs	r2, #3
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	4013      	ands	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	68da      	ldr	r2, [r3, #12]
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4313      	orrs	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800178e:	2201      	movs	r2, #1
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4013      	ands	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	091b      	lsrs	r3, r3, #4
 80017a4:	f003 0201 	and.w	r2, r3, #1
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	d118      	bne.n	80017f8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017cc:	2201      	movs	r2, #1
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4013      	ands	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	08db      	lsrs	r3, r3, #3
 80017e2:	f003 0201 	and.w	r2, r3, #1
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	2b03      	cmp	r3, #3
 8001802:	d017      	beq.n	8001834 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	2203      	movs	r2, #3
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	4313      	orrs	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d123      	bne.n	8001888 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	08da      	lsrs	r2, r3, #3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3208      	adds	r2, #8
 8001848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800184c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	220f      	movs	r2, #15
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	4013      	ands	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	691a      	ldr	r2, [r3, #16]
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4313      	orrs	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	08da      	lsrs	r2, r3, #3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	3208      	adds	r2, #8
 8001882:	6939      	ldr	r1, [r7, #16]
 8001884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	2203      	movs	r2, #3
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4013      	ands	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0203 	and.w	r2, r3, #3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 80ac 	beq.w	8001a22 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ca:	4b5f      	ldr	r3, [pc, #380]	@ (8001a48 <HAL_GPIO_Init+0x330>)
 80018cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ce:	4a5e      	ldr	r2, [pc, #376]	@ (8001a48 <HAL_GPIO_Init+0x330>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80018d6:	4b5c      	ldr	r3, [pc, #368]	@ (8001a48 <HAL_GPIO_Init+0x330>)
 80018d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018e2:	4a5a      	ldr	r2, [pc, #360]	@ (8001a4c <HAL_GPIO_Init+0x334>)
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	089b      	lsrs	r3, r3, #2
 80018e8:	3302      	adds	r3, #2
 80018ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	220f      	movs	r2, #15
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800190c:	d025      	beq.n	800195a <HAL_GPIO_Init+0x242>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a4f      	ldr	r2, [pc, #316]	@ (8001a50 <HAL_GPIO_Init+0x338>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d01f      	beq.n	8001956 <HAL_GPIO_Init+0x23e>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a4e      	ldr	r2, [pc, #312]	@ (8001a54 <HAL_GPIO_Init+0x33c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d019      	beq.n	8001952 <HAL_GPIO_Init+0x23a>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a4d      	ldr	r2, [pc, #308]	@ (8001a58 <HAL_GPIO_Init+0x340>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d013      	beq.n	800194e <HAL_GPIO_Init+0x236>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a4c      	ldr	r2, [pc, #304]	@ (8001a5c <HAL_GPIO_Init+0x344>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d00d      	beq.n	800194a <HAL_GPIO_Init+0x232>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a4b      	ldr	r2, [pc, #300]	@ (8001a60 <HAL_GPIO_Init+0x348>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d007      	beq.n	8001946 <HAL_GPIO_Init+0x22e>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a4a      	ldr	r2, [pc, #296]	@ (8001a64 <HAL_GPIO_Init+0x34c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d101      	bne.n	8001942 <HAL_GPIO_Init+0x22a>
 800193e:	2306      	movs	r3, #6
 8001940:	e00c      	b.n	800195c <HAL_GPIO_Init+0x244>
 8001942:	2307      	movs	r3, #7
 8001944:	e00a      	b.n	800195c <HAL_GPIO_Init+0x244>
 8001946:	2305      	movs	r3, #5
 8001948:	e008      	b.n	800195c <HAL_GPIO_Init+0x244>
 800194a:	2304      	movs	r3, #4
 800194c:	e006      	b.n	800195c <HAL_GPIO_Init+0x244>
 800194e:	2303      	movs	r3, #3
 8001950:	e004      	b.n	800195c <HAL_GPIO_Init+0x244>
 8001952:	2302      	movs	r3, #2
 8001954:	e002      	b.n	800195c <HAL_GPIO_Init+0x244>
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <HAL_GPIO_Init+0x244>
 800195a:	2300      	movs	r3, #0
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	f002 0203 	and.w	r2, r2, #3
 8001962:	0092      	lsls	r2, r2, #2
 8001964:	4093      	lsls	r3, r2
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800196c:	4937      	ldr	r1, [pc, #220]	@ (8001a4c <HAL_GPIO_Init+0x334>)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	089b      	lsrs	r3, r3, #2
 8001972:	3302      	adds	r3, #2
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800197a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a68 <HAL_GPIO_Init+0x350>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	43db      	mvns	r3, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4313      	orrs	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800199e:	4a32      	ldr	r2, [pc, #200]	@ (8001a68 <HAL_GPIO_Init+0x350>)
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019a4:	4b30      	ldr	r3, [pc, #192]	@ (8001a68 <HAL_GPIO_Init+0x350>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4013      	ands	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019c8:	4a27      	ldr	r2, [pc, #156]	@ (8001a68 <HAL_GPIO_Init+0x350>)
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019ce:	4b26      	ldr	r3, [pc, #152]	@ (8001a68 <HAL_GPIO_Init+0x350>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019f2:	4a1d      	ldr	r2, [pc, #116]	@ (8001a68 <HAL_GPIO_Init+0x350>)
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a68 <HAL_GPIO_Init+0x350>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4013      	ands	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a1c:	4a12      	ldr	r2, [pc, #72]	@ (8001a68 <HAL_GPIO_Init+0x350>)
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	3301      	adds	r3, #1
 8001a26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f47f ae78 	bne.w	8001728 <HAL_GPIO_Init+0x10>
  }
}
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop
 8001a3c:	371c      	adds	r7, #28
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40010000 	.word	0x40010000
 8001a50:	48000400 	.word	0x48000400
 8001a54:	48000800 	.word	0x48000800
 8001a58:	48000c00 	.word	0x48000c00
 8001a5c:	48001000 	.word	0x48001000
 8001a60:	48001400 	.word	0x48001400
 8001a64:	48001800 	.word	0x48001800
 8001a68:	40010400 	.word	0x40010400

08001a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	807b      	strh	r3, [r7, #2]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a7c:	787b      	ldrb	r3, [r7, #1]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a82:	887a      	ldrh	r2, [r7, #2]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a88:	e002      	b.n	8001a90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a8a:	887a      	ldrh	r2, [r7, #2]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001aa6:	4b08      	ldr	r3, [pc, #32]	@ (8001ac8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001aa8:	695a      	ldr	r2, [r3, #20]
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	4013      	ands	r3, r2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d006      	beq.n	8001ac0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ab2:	4a05      	ldr	r2, [pc, #20]	@ (8001ac8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ab4:	88fb      	ldrh	r3, [r7, #6]
 8001ab6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ab8:	88fb      	ldrh	r3, [r7, #6]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fdf4 	bl	80006a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40010400 	.word	0x40010400

08001acc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ad0:	4b04      	ldr	r3, [pc, #16]	@ (8001ae4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40007000 	.word	0x40007000

08001ae8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001af6:	d130      	bne.n	8001b5a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001af8:	4b23      	ldr	r3, [pc, #140]	@ (8001b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b04:	d038      	beq.n	8001b78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b06:	4b20      	ldr	r3, [pc, #128]	@ (8001b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b0e:	4a1e      	ldr	r2, [pc, #120]	@ (8001b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b10:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b14:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b16:	4b1d      	ldr	r3, [pc, #116]	@ (8001b8c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2232      	movs	r2, #50	@ 0x32
 8001b1c:	fb02 f303 	mul.w	r3, r2, r3
 8001b20:	4a1b      	ldr	r2, [pc, #108]	@ (8001b90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b22:	fba2 2303 	umull	r2, r3, r2, r3
 8001b26:	0c9b      	lsrs	r3, r3, #18
 8001b28:	3301      	adds	r3, #1
 8001b2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b2c:	e002      	b.n	8001b34 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	3b01      	subs	r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b34:	4b14      	ldr	r3, [pc, #80]	@ (8001b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b40:	d102      	bne.n	8001b48 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1f2      	bne.n	8001b2e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b48:	4b0f      	ldr	r3, [pc, #60]	@ (8001b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b54:	d110      	bne.n	8001b78 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e00f      	b.n	8001b7a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b66:	d007      	beq.n	8001b78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b68:	4b07      	ldr	r3, [pc, #28]	@ (8001b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b70:	4a05      	ldr	r2, [pc, #20]	@ (8001b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b76:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40007000 	.word	0x40007000
 8001b8c:	20000004 	.word	0x20000004
 8001b90:	431bde83 	.word	0x431bde83

08001b94 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e3ca      	b.n	800233c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ba6:	4b97      	ldr	r3, [pc, #604]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 030c 	and.w	r3, r3, #12
 8001bae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bb0:	4b94      	ldr	r3, [pc, #592]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0310 	and.w	r3, r3, #16
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 80e4 	beq.w	8001d90 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d007      	beq.n	8001bde <HAL_RCC_OscConfig+0x4a>
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	2b0c      	cmp	r3, #12
 8001bd2:	f040 808b 	bne.w	8001cec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	f040 8087 	bne.w	8001cec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bde:	4b89      	ldr	r3, [pc, #548]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d005      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x62>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e3a2      	b.n	800233c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a1a      	ldr	r2, [r3, #32]
 8001bfa:	4b82      	ldr	r3, [pc, #520]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d004      	beq.n	8001c10 <HAL_RCC_OscConfig+0x7c>
 8001c06:	4b7f      	ldr	r3, [pc, #508]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c0e:	e005      	b.n	8001c1c <HAL_RCC_OscConfig+0x88>
 8001c10:	4b7c      	ldr	r3, [pc, #496]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c16:	091b      	lsrs	r3, r3, #4
 8001c18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d223      	bcs.n	8001c68 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f000 fd55 	bl	80026d4 <RCC_SetFlashLatencyFromMSIRange>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e383      	b.n	800233c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c34:	4b73      	ldr	r3, [pc, #460]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a72      	ldr	r2, [pc, #456]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001c3a:	f043 0308 	orr.w	r3, r3, #8
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	4b70      	ldr	r3, [pc, #448]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	496d      	ldr	r1, [pc, #436]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c52:	4b6c      	ldr	r3, [pc, #432]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	021b      	lsls	r3, r3, #8
 8001c60:	4968      	ldr	r1, [pc, #416]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	604b      	str	r3, [r1, #4]
 8001c66:	e025      	b.n	8001cb4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c68:	4b66      	ldr	r3, [pc, #408]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a65      	ldr	r2, [pc, #404]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001c6e:	f043 0308 	orr.w	r3, r3, #8
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	4b63      	ldr	r3, [pc, #396]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	4960      	ldr	r1, [pc, #384]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c86:	4b5f      	ldr	r3, [pc, #380]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	021b      	lsls	r3, r3, #8
 8001c94:	495b      	ldr	r1, [pc, #364]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d109      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f000 fd15 	bl	80026d4 <RCC_SetFlashLatencyFromMSIRange>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e343      	b.n	800233c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cb4:	f000 fc4a 	bl	800254c <HAL_RCC_GetSysClockFreq>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	4b52      	ldr	r3, [pc, #328]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	091b      	lsrs	r3, r3, #4
 8001cc0:	f003 030f 	and.w	r3, r3, #15
 8001cc4:	4950      	ldr	r1, [pc, #320]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001cc6:	5ccb      	ldrb	r3, [r1, r3]
 8001cc8:	f003 031f 	and.w	r3, r3, #31
 8001ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd0:	4a4e      	ldr	r2, [pc, #312]	@ (8001e0c <HAL_RCC_OscConfig+0x278>)
 8001cd2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cd4:	4b4e      	ldr	r3, [pc, #312]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff f9a5 	bl	8001028 <HAL_InitTick>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d052      	beq.n	8001d8e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
 8001cea:	e327      	b.n	800233c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d032      	beq.n	8001d5a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cf4:	4b43      	ldr	r3, [pc, #268]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a42      	ldr	r2, [pc, #264]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d00:	f7ff f9e2 	bl	80010c8 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d08:	f7ff f9de 	bl	80010c8 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e310      	b.n	800233c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d1a:	4b3a      	ldr	r3, [pc, #232]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0f0      	beq.n	8001d08 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d26:	4b37      	ldr	r3, [pc, #220]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a36      	ldr	r2, [pc, #216]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001d2c:	f043 0308 	orr.w	r3, r3, #8
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	4b34      	ldr	r3, [pc, #208]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	4931      	ldr	r1, [pc, #196]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d44:	4b2f      	ldr	r3, [pc, #188]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	021b      	lsls	r3, r3, #8
 8001d52:	492c      	ldr	r1, [pc, #176]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	604b      	str	r3, [r1, #4]
 8001d58:	e01a      	b.n	8001d90 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a29      	ldr	r2, [pc, #164]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001d60:	f023 0301 	bic.w	r3, r3, #1
 8001d64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d66:	f7ff f9af 	bl	80010c8 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d6e:	f7ff f9ab 	bl	80010c8 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e2dd      	b.n	800233c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d80:	4b20      	ldr	r3, [pc, #128]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1f0      	bne.n	8001d6e <HAL_RCC_OscConfig+0x1da>
 8001d8c:	e000      	b.n	8001d90 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d8e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d074      	beq.n	8001e86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	d005      	beq.n	8001dae <HAL_RCC_OscConfig+0x21a>
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	2b0c      	cmp	r3, #12
 8001da6:	d10e      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	2b03      	cmp	r3, #3
 8001dac:	d10b      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dae:	4b15      	ldr	r3, [pc, #84]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d064      	beq.n	8001e84 <HAL_RCC_OscConfig+0x2f0>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d160      	bne.n	8001e84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e2ba      	b.n	800233c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dce:	d106      	bne.n	8001dde <HAL_RCC_OscConfig+0x24a>
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0b      	ldr	r2, [pc, #44]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001dd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	e026      	b.n	8001e2c <HAL_RCC_OscConfig+0x298>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001de6:	d115      	bne.n	8001e14 <HAL_RCC_OscConfig+0x280>
 8001de8:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a05      	ldr	r2, [pc, #20]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001dee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	4b03      	ldr	r3, [pc, #12]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a02      	ldr	r2, [pc, #8]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001dfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	e014      	b.n	8001e2c <HAL_RCC_OscConfig+0x298>
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000
 8001e08:	0800499c 	.word	0x0800499c
 8001e0c:	20000004 	.word	0x20000004
 8001e10:	20000008 	.word	0x20000008
 8001e14:	4ba0      	ldr	r3, [pc, #640]	@ (8002098 <HAL_RCC_OscConfig+0x504>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a9f      	ldr	r2, [pc, #636]	@ (8002098 <HAL_RCC_OscConfig+0x504>)
 8001e1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e1e:	6013      	str	r3, [r2, #0]
 8001e20:	4b9d      	ldr	r3, [pc, #628]	@ (8002098 <HAL_RCC_OscConfig+0x504>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a9c      	ldr	r2, [pc, #624]	@ (8002098 <HAL_RCC_OscConfig+0x504>)
 8001e26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d013      	beq.n	8001e5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e34:	f7ff f948 	bl	80010c8 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e3c:	f7ff f944 	bl	80010c8 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b64      	cmp	r3, #100	@ 0x64
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e276      	b.n	800233c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e4e:	4b92      	ldr	r3, [pc, #584]	@ (8002098 <HAL_RCC_OscConfig+0x504>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCC_OscConfig+0x2a8>
 8001e5a:	e014      	b.n	8001e86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5c:	f7ff f934 	bl	80010c8 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e64:	f7ff f930 	bl	80010c8 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b64      	cmp	r3, #100	@ 0x64
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e262      	b.n	800233c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e76:	4b88      	ldr	r3, [pc, #544]	@ (8002098 <HAL_RCC_OscConfig+0x504>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f0      	bne.n	8001e64 <HAL_RCC_OscConfig+0x2d0>
 8001e82:	e000      	b.n	8001e86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d060      	beq.n	8001f54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d005      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x310>
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	2b0c      	cmp	r3, #12
 8001e9c:	d119      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d116      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ea4:	4b7c      	ldr	r3, [pc, #496]	@ (8002098 <HAL_RCC_OscConfig+0x504>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d005      	beq.n	8001ebc <HAL_RCC_OscConfig+0x328>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e23f      	b.n	800233c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ebc:	4b76      	ldr	r3, [pc, #472]	@ (8002098 <HAL_RCC_OscConfig+0x504>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	061b      	lsls	r3, r3, #24
 8001eca:	4973      	ldr	r1, [pc, #460]	@ (8002098 <HAL_RCC_OscConfig+0x504>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ed0:	e040      	b.n	8001f54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d023      	beq.n	8001f22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eda:	4b6f      	ldr	r3, [pc, #444]	@ (8002098 <HAL_RCC_OscConfig+0x504>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a6e      	ldr	r2, [pc, #440]	@ (8002098 <HAL_RCC_OscConfig+0x504>)
 8001ee0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee6:	f7ff f8ef 	bl	80010c8 <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eee:	f7ff f8eb 	bl	80010c8 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e21d      	b.n	800233c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f00:	4b65      	ldr	r3, [pc, #404]	@ (8002098 <HAL_RCC_OscConfig+0x504>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0f0      	beq.n	8001eee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0c:	4b62      	ldr	r3, [pc, #392]	@ (8002098 <HAL_RCC_OscConfig+0x504>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	061b      	lsls	r3, r3, #24
 8001f1a:	495f      	ldr	r1, [pc, #380]	@ (8002098 <HAL_RCC_OscConfig+0x504>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	604b      	str	r3, [r1, #4]
 8001f20:	e018      	b.n	8001f54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f22:	4b5d      	ldr	r3, [pc, #372]	@ (8002098 <HAL_RCC_OscConfig+0x504>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a5c      	ldr	r2, [pc, #368]	@ (8002098 <HAL_RCC_OscConfig+0x504>)
 8001f28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2e:	f7ff f8cb 	bl	80010c8 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f36:	f7ff f8c7 	bl	80010c8 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e1f9      	b.n	800233c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f48:	4b53      	ldr	r3, [pc, #332]	@ (8002098 <HAL_RCC_OscConfig+0x504>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1f0      	bne.n	8001f36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d03c      	beq.n	8001fda <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	695b      	ldr	r3, [r3, #20]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d01c      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f68:	4b4b      	ldr	r3, [pc, #300]	@ (8002098 <HAL_RCC_OscConfig+0x504>)
 8001f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f6e:	4a4a      	ldr	r2, [pc, #296]	@ (8002098 <HAL_RCC_OscConfig+0x504>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f78:	f7ff f8a6 	bl	80010c8 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f80:	f7ff f8a2 	bl	80010c8 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e1d4      	b.n	800233c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f92:	4b41      	ldr	r3, [pc, #260]	@ (8002098 <HAL_RCC_OscConfig+0x504>)
 8001f94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0ef      	beq.n	8001f80 <HAL_RCC_OscConfig+0x3ec>
 8001fa0:	e01b      	b.n	8001fda <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fa2:	4b3d      	ldr	r3, [pc, #244]	@ (8002098 <HAL_RCC_OscConfig+0x504>)
 8001fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fa8:	4a3b      	ldr	r2, [pc, #236]	@ (8002098 <HAL_RCC_OscConfig+0x504>)
 8001faa:	f023 0301 	bic.w	r3, r3, #1
 8001fae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb2:	f7ff f889 	bl	80010c8 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fba:	f7ff f885 	bl	80010c8 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e1b7      	b.n	800233c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fcc:	4b32      	ldr	r3, [pc, #200]	@ (8002098 <HAL_RCC_OscConfig+0x504>)
 8001fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1ef      	bne.n	8001fba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0304 	and.w	r3, r3, #4
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 80a6 	beq.w	8002134 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fec:	4b2a      	ldr	r3, [pc, #168]	@ (8002098 <HAL_RCC_OscConfig+0x504>)
 8001fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10d      	bne.n	8002014 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ff8:	4b27      	ldr	r3, [pc, #156]	@ (8002098 <HAL_RCC_OscConfig+0x504>)
 8001ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffc:	4a26      	ldr	r2, [pc, #152]	@ (8002098 <HAL_RCC_OscConfig+0x504>)
 8001ffe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002002:	6593      	str	r3, [r2, #88]	@ 0x58
 8002004:	4b24      	ldr	r3, [pc, #144]	@ (8002098 <HAL_RCC_OscConfig+0x504>)
 8002006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002008:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002010:	2301      	movs	r3, #1
 8002012:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002014:	4b21      	ldr	r3, [pc, #132]	@ (800209c <HAL_RCC_OscConfig+0x508>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800201c:	2b00      	cmp	r3, #0
 800201e:	d118      	bne.n	8002052 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002020:	4b1e      	ldr	r3, [pc, #120]	@ (800209c <HAL_RCC_OscConfig+0x508>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a1d      	ldr	r2, [pc, #116]	@ (800209c <HAL_RCC_OscConfig+0x508>)
 8002026:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800202a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800202c:	f7ff f84c 	bl	80010c8 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002034:	f7ff f848 	bl	80010c8 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e17a      	b.n	800233c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002046:	4b15      	ldr	r3, [pc, #84]	@ (800209c <HAL_RCC_OscConfig+0x508>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d108      	bne.n	800206c <HAL_RCC_OscConfig+0x4d8>
 800205a:	4b0f      	ldr	r3, [pc, #60]	@ (8002098 <HAL_RCC_OscConfig+0x504>)
 800205c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002060:	4a0d      	ldr	r2, [pc, #52]	@ (8002098 <HAL_RCC_OscConfig+0x504>)
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800206a:	e029      	b.n	80020c0 <HAL_RCC_OscConfig+0x52c>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2b05      	cmp	r3, #5
 8002072:	d115      	bne.n	80020a0 <HAL_RCC_OscConfig+0x50c>
 8002074:	4b08      	ldr	r3, [pc, #32]	@ (8002098 <HAL_RCC_OscConfig+0x504>)
 8002076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800207a:	4a07      	ldr	r2, [pc, #28]	@ (8002098 <HAL_RCC_OscConfig+0x504>)
 800207c:	f043 0304 	orr.w	r3, r3, #4
 8002080:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002084:	4b04      	ldr	r3, [pc, #16]	@ (8002098 <HAL_RCC_OscConfig+0x504>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800208a:	4a03      	ldr	r2, [pc, #12]	@ (8002098 <HAL_RCC_OscConfig+0x504>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002094:	e014      	b.n	80020c0 <HAL_RCC_OscConfig+0x52c>
 8002096:	bf00      	nop
 8002098:	40021000 	.word	0x40021000
 800209c:	40007000 	.word	0x40007000
 80020a0:	4b9c      	ldr	r3, [pc, #624]	@ (8002314 <HAL_RCC_OscConfig+0x780>)
 80020a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a6:	4a9b      	ldr	r2, [pc, #620]	@ (8002314 <HAL_RCC_OscConfig+0x780>)
 80020a8:	f023 0301 	bic.w	r3, r3, #1
 80020ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020b0:	4b98      	ldr	r3, [pc, #608]	@ (8002314 <HAL_RCC_OscConfig+0x780>)
 80020b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020b6:	4a97      	ldr	r2, [pc, #604]	@ (8002314 <HAL_RCC_OscConfig+0x780>)
 80020b8:	f023 0304 	bic.w	r3, r3, #4
 80020bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d016      	beq.n	80020f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7fe fffe 	bl	80010c8 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ce:	e00a      	b.n	80020e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d0:	f7fe fffa 	bl	80010c8 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020de:	4293      	cmp	r3, r2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e12a      	b.n	800233c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e6:	4b8b      	ldr	r3, [pc, #556]	@ (8002314 <HAL_RCC_OscConfig+0x780>)
 80020e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0ed      	beq.n	80020d0 <HAL_RCC_OscConfig+0x53c>
 80020f4:	e015      	b.n	8002122 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f6:	f7fe ffe7 	bl	80010c8 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020fc:	e00a      	b.n	8002114 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fe:	f7fe ffe3 	bl	80010c8 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	f241 3288 	movw	r2, #5000	@ 0x1388
 800210c:	4293      	cmp	r3, r2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e113      	b.n	800233c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002114:	4b7f      	ldr	r3, [pc, #508]	@ (8002314 <HAL_RCC_OscConfig+0x780>)
 8002116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1ed      	bne.n	80020fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002122:	7ffb      	ldrb	r3, [r7, #31]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d105      	bne.n	8002134 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002128:	4b7a      	ldr	r3, [pc, #488]	@ (8002314 <HAL_RCC_OscConfig+0x780>)
 800212a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212c:	4a79      	ldr	r2, [pc, #484]	@ (8002314 <HAL_RCC_OscConfig+0x780>)
 800212e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002132:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 80fe 	beq.w	800233a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002142:	2b02      	cmp	r3, #2
 8002144:	f040 80d0 	bne.w	80022e8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002148:	4b72      	ldr	r3, [pc, #456]	@ (8002314 <HAL_RCC_OscConfig+0x780>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f003 0203 	and.w	r2, r3, #3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002158:	429a      	cmp	r2, r3
 800215a:	d130      	bne.n	80021be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002166:	3b01      	subs	r3, #1
 8002168:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800216a:	429a      	cmp	r2, r3
 800216c:	d127      	bne.n	80021be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002178:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800217a:	429a      	cmp	r2, r3
 800217c:	d11f      	bne.n	80021be <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002188:	2a07      	cmp	r2, #7
 800218a:	bf14      	ite	ne
 800218c:	2201      	movne	r2, #1
 800218e:	2200      	moveq	r2, #0
 8002190:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002192:	4293      	cmp	r3, r2
 8002194:	d113      	bne.n	80021be <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a0:	085b      	lsrs	r3, r3, #1
 80021a2:	3b01      	subs	r3, #1
 80021a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d109      	bne.n	80021be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b4:	085b      	lsrs	r3, r3, #1
 80021b6:	3b01      	subs	r3, #1
 80021b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d06e      	beq.n	800229c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	2b0c      	cmp	r3, #12
 80021c2:	d069      	beq.n	8002298 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021c4:	4b53      	ldr	r3, [pc, #332]	@ (8002314 <HAL_RCC_OscConfig+0x780>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d105      	bne.n	80021dc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80021d0:	4b50      	ldr	r3, [pc, #320]	@ (8002314 <HAL_RCC_OscConfig+0x780>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0ad      	b.n	800233c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021e0:	4b4c      	ldr	r3, [pc, #304]	@ (8002314 <HAL_RCC_OscConfig+0x780>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a4b      	ldr	r2, [pc, #300]	@ (8002314 <HAL_RCC_OscConfig+0x780>)
 80021e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021ea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021ec:	f7fe ff6c 	bl	80010c8 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f4:	f7fe ff68 	bl	80010c8 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e09a      	b.n	800233c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002206:	4b43      	ldr	r3, [pc, #268]	@ (8002314 <HAL_RCC_OscConfig+0x780>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f0      	bne.n	80021f4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002212:	4b40      	ldr	r3, [pc, #256]	@ (8002314 <HAL_RCC_OscConfig+0x780>)
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	4b40      	ldr	r3, [pc, #256]	@ (8002318 <HAL_RCC_OscConfig+0x784>)
 8002218:	4013      	ands	r3, r2
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002222:	3a01      	subs	r2, #1
 8002224:	0112      	lsls	r2, r2, #4
 8002226:	4311      	orrs	r1, r2
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800222c:	0212      	lsls	r2, r2, #8
 800222e:	4311      	orrs	r1, r2
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002234:	0852      	lsrs	r2, r2, #1
 8002236:	3a01      	subs	r2, #1
 8002238:	0552      	lsls	r2, r2, #21
 800223a:	4311      	orrs	r1, r2
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002240:	0852      	lsrs	r2, r2, #1
 8002242:	3a01      	subs	r2, #1
 8002244:	0652      	lsls	r2, r2, #25
 8002246:	4311      	orrs	r1, r2
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800224c:	0912      	lsrs	r2, r2, #4
 800224e:	0452      	lsls	r2, r2, #17
 8002250:	430a      	orrs	r2, r1
 8002252:	4930      	ldr	r1, [pc, #192]	@ (8002314 <HAL_RCC_OscConfig+0x780>)
 8002254:	4313      	orrs	r3, r2
 8002256:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002258:	4b2e      	ldr	r3, [pc, #184]	@ (8002314 <HAL_RCC_OscConfig+0x780>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a2d      	ldr	r2, [pc, #180]	@ (8002314 <HAL_RCC_OscConfig+0x780>)
 800225e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002262:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002264:	4b2b      	ldr	r3, [pc, #172]	@ (8002314 <HAL_RCC_OscConfig+0x780>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	4a2a      	ldr	r2, [pc, #168]	@ (8002314 <HAL_RCC_OscConfig+0x780>)
 800226a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800226e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002270:	f7fe ff2a 	bl	80010c8 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002278:	f7fe ff26 	bl	80010c8 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e058      	b.n	800233c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800228a:	4b22      	ldr	r3, [pc, #136]	@ (8002314 <HAL_RCC_OscConfig+0x780>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002296:	e050      	b.n	800233a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e04f      	b.n	800233c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800229c:	4b1d      	ldr	r3, [pc, #116]	@ (8002314 <HAL_RCC_OscConfig+0x780>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d148      	bne.n	800233a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002314 <HAL_RCC_OscConfig+0x780>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a19      	ldr	r2, [pc, #100]	@ (8002314 <HAL_RCC_OscConfig+0x780>)
 80022ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022b4:	4b17      	ldr	r3, [pc, #92]	@ (8002314 <HAL_RCC_OscConfig+0x780>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	4a16      	ldr	r2, [pc, #88]	@ (8002314 <HAL_RCC_OscConfig+0x780>)
 80022ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022c0:	f7fe ff02 	bl	80010c8 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c8:	f7fe fefe 	bl	80010c8 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e030      	b.n	800233c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022da:	4b0e      	ldr	r3, [pc, #56]	@ (8002314 <HAL_RCC_OscConfig+0x780>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCC_OscConfig+0x734>
 80022e6:	e028      	b.n	800233a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	2b0c      	cmp	r3, #12
 80022ec:	d023      	beq.n	8002336 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ee:	4b09      	ldr	r3, [pc, #36]	@ (8002314 <HAL_RCC_OscConfig+0x780>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a08      	ldr	r2, [pc, #32]	@ (8002314 <HAL_RCC_OscConfig+0x780>)
 80022f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fa:	f7fe fee5 	bl	80010c8 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002300:	e00c      	b.n	800231c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002302:	f7fe fee1 	bl	80010c8 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d905      	bls.n	800231c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e013      	b.n	800233c <HAL_RCC_OscConfig+0x7a8>
 8002314:	40021000 	.word	0x40021000
 8002318:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800231c:	4b09      	ldr	r3, [pc, #36]	@ (8002344 <HAL_RCC_OscConfig+0x7b0>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1ec      	bne.n	8002302 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002328:	4b06      	ldr	r3, [pc, #24]	@ (8002344 <HAL_RCC_OscConfig+0x7b0>)
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	4905      	ldr	r1, [pc, #20]	@ (8002344 <HAL_RCC_OscConfig+0x7b0>)
 800232e:	4b06      	ldr	r3, [pc, #24]	@ (8002348 <HAL_RCC_OscConfig+0x7b4>)
 8002330:	4013      	ands	r3, r2
 8002332:	60cb      	str	r3, [r1, #12]
 8002334:	e001      	b.n	800233a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3720      	adds	r7, #32
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40021000 	.word	0x40021000
 8002348:	feeefffc 	.word	0xfeeefffc

0800234c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0e7      	b.n	8002530 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002360:	4b75      	ldr	r3, [pc, #468]	@ (8002538 <HAL_RCC_ClockConfig+0x1ec>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d910      	bls.n	8002390 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236e:	4b72      	ldr	r3, [pc, #456]	@ (8002538 <HAL_RCC_ClockConfig+0x1ec>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 0207 	bic.w	r2, r3, #7
 8002376:	4970      	ldr	r1, [pc, #448]	@ (8002538 <HAL_RCC_ClockConfig+0x1ec>)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	4313      	orrs	r3, r2
 800237c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800237e:	4b6e      	ldr	r3, [pc, #440]	@ (8002538 <HAL_RCC_ClockConfig+0x1ec>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d001      	beq.n	8002390 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0cf      	b.n	8002530 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d010      	beq.n	80023be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	4b66      	ldr	r3, [pc, #408]	@ (800253c <HAL_RCC_ClockConfig+0x1f0>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d908      	bls.n	80023be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ac:	4b63      	ldr	r3, [pc, #396]	@ (800253c <HAL_RCC_ClockConfig+0x1f0>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	4960      	ldr	r1, [pc, #384]	@ (800253c <HAL_RCC_ClockConfig+0x1f0>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d04c      	beq.n	8002464 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	d107      	bne.n	80023e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023d2:	4b5a      	ldr	r3, [pc, #360]	@ (800253c <HAL_RCC_ClockConfig+0x1f0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d121      	bne.n	8002422 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e0a6      	b.n	8002530 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d107      	bne.n	80023fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ea:	4b54      	ldr	r3, [pc, #336]	@ (800253c <HAL_RCC_ClockConfig+0x1f0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d115      	bne.n	8002422 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e09a      	b.n	8002530 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d107      	bne.n	8002412 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002402:	4b4e      	ldr	r3, [pc, #312]	@ (800253c <HAL_RCC_ClockConfig+0x1f0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d109      	bne.n	8002422 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e08e      	b.n	8002530 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002412:	4b4a      	ldr	r3, [pc, #296]	@ (800253c <HAL_RCC_ClockConfig+0x1f0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e086      	b.n	8002530 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002422:	4b46      	ldr	r3, [pc, #280]	@ (800253c <HAL_RCC_ClockConfig+0x1f0>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f023 0203 	bic.w	r2, r3, #3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	4943      	ldr	r1, [pc, #268]	@ (800253c <HAL_RCC_ClockConfig+0x1f0>)
 8002430:	4313      	orrs	r3, r2
 8002432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002434:	f7fe fe48 	bl	80010c8 <HAL_GetTick>
 8002438:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243a:	e00a      	b.n	8002452 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800243c:	f7fe fe44 	bl	80010c8 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e06e      	b.n	8002530 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002452:	4b3a      	ldr	r3, [pc, #232]	@ (800253c <HAL_RCC_ClockConfig+0x1f0>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 020c 	and.w	r2, r3, #12
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	429a      	cmp	r2, r3
 8002462:	d1eb      	bne.n	800243c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d010      	beq.n	8002492 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	4b31      	ldr	r3, [pc, #196]	@ (800253c <HAL_RCC_ClockConfig+0x1f0>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800247c:	429a      	cmp	r2, r3
 800247e:	d208      	bcs.n	8002492 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002480:	4b2e      	ldr	r3, [pc, #184]	@ (800253c <HAL_RCC_ClockConfig+0x1f0>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	492b      	ldr	r1, [pc, #172]	@ (800253c <HAL_RCC_ClockConfig+0x1f0>)
 800248e:	4313      	orrs	r3, r2
 8002490:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002492:	4b29      	ldr	r3, [pc, #164]	@ (8002538 <HAL_RCC_ClockConfig+0x1ec>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d210      	bcs.n	80024c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a0:	4b25      	ldr	r3, [pc, #148]	@ (8002538 <HAL_RCC_ClockConfig+0x1ec>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f023 0207 	bic.w	r2, r3, #7
 80024a8:	4923      	ldr	r1, [pc, #140]	@ (8002538 <HAL_RCC_ClockConfig+0x1ec>)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b0:	4b21      	ldr	r3, [pc, #132]	@ (8002538 <HAL_RCC_ClockConfig+0x1ec>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d001      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e036      	b.n	8002530 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0304 	and.w	r3, r3, #4
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d008      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ce:	4b1b      	ldr	r3, [pc, #108]	@ (800253c <HAL_RCC_ClockConfig+0x1f0>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	4918      	ldr	r1, [pc, #96]	@ (800253c <HAL_RCC_ClockConfig+0x1f0>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0308 	and.w	r3, r3, #8
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d009      	beq.n	8002500 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ec:	4b13      	ldr	r3, [pc, #76]	@ (800253c <HAL_RCC_ClockConfig+0x1f0>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	4910      	ldr	r1, [pc, #64]	@ (800253c <HAL_RCC_ClockConfig+0x1f0>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002500:	f000 f824 	bl	800254c <HAL_RCC_GetSysClockFreq>
 8002504:	4602      	mov	r2, r0
 8002506:	4b0d      	ldr	r3, [pc, #52]	@ (800253c <HAL_RCC_ClockConfig+0x1f0>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	091b      	lsrs	r3, r3, #4
 800250c:	f003 030f 	and.w	r3, r3, #15
 8002510:	490b      	ldr	r1, [pc, #44]	@ (8002540 <HAL_RCC_ClockConfig+0x1f4>)
 8002512:	5ccb      	ldrb	r3, [r1, r3]
 8002514:	f003 031f 	and.w	r3, r3, #31
 8002518:	fa22 f303 	lsr.w	r3, r2, r3
 800251c:	4a09      	ldr	r2, [pc, #36]	@ (8002544 <HAL_RCC_ClockConfig+0x1f8>)
 800251e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002520:	4b09      	ldr	r3, [pc, #36]	@ (8002548 <HAL_RCC_ClockConfig+0x1fc>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f7fe fd7f 	bl	8001028 <HAL_InitTick>
 800252a:	4603      	mov	r3, r0
 800252c:	72fb      	strb	r3, [r7, #11]

  return status;
 800252e:	7afb      	ldrb	r3, [r7, #11]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40022000 	.word	0x40022000
 800253c:	40021000 	.word	0x40021000
 8002540:	0800499c 	.word	0x0800499c
 8002544:	20000004 	.word	0x20000004
 8002548:	20000008 	.word	0x20000008

0800254c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800254c:	b480      	push	{r7}
 800254e:	b089      	sub	sp, #36	@ 0x24
 8002550:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
 8002556:	2300      	movs	r3, #0
 8002558:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800255a:	4b3e      	ldr	r3, [pc, #248]	@ (8002654 <HAL_RCC_GetSysClockFreq+0x108>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002564:	4b3b      	ldr	r3, [pc, #236]	@ (8002654 <HAL_RCC_GetSysClockFreq+0x108>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f003 0303 	and.w	r3, r3, #3
 800256c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d005      	beq.n	8002580 <HAL_RCC_GetSysClockFreq+0x34>
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	2b0c      	cmp	r3, #12
 8002578:	d121      	bne.n	80025be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d11e      	bne.n	80025be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002580:	4b34      	ldr	r3, [pc, #208]	@ (8002654 <HAL_RCC_GetSysClockFreq+0x108>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0308 	and.w	r3, r3, #8
 8002588:	2b00      	cmp	r3, #0
 800258a:	d107      	bne.n	800259c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800258c:	4b31      	ldr	r3, [pc, #196]	@ (8002654 <HAL_RCC_GetSysClockFreq+0x108>)
 800258e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002592:	0a1b      	lsrs	r3, r3, #8
 8002594:	f003 030f 	and.w	r3, r3, #15
 8002598:	61fb      	str	r3, [r7, #28]
 800259a:	e005      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800259c:	4b2d      	ldr	r3, [pc, #180]	@ (8002654 <HAL_RCC_GetSysClockFreq+0x108>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	091b      	lsrs	r3, r3, #4
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025a8:	4a2b      	ldr	r2, [pc, #172]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10d      	bne.n	80025d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025bc:	e00a      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d102      	bne.n	80025ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025c4:	4b25      	ldr	r3, [pc, #148]	@ (800265c <HAL_RCC_GetSysClockFreq+0x110>)
 80025c6:	61bb      	str	r3, [r7, #24]
 80025c8:	e004      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	d101      	bne.n	80025d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025d0:	4b23      	ldr	r3, [pc, #140]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x114>)
 80025d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	2b0c      	cmp	r3, #12
 80025d8:	d134      	bne.n	8002644 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025da:	4b1e      	ldr	r3, [pc, #120]	@ (8002654 <HAL_RCC_GetSysClockFreq+0x108>)
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d003      	beq.n	80025f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d003      	beq.n	80025f8 <HAL_RCC_GetSysClockFreq+0xac>
 80025f0:	e005      	b.n	80025fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025f2:	4b1a      	ldr	r3, [pc, #104]	@ (800265c <HAL_RCC_GetSysClockFreq+0x110>)
 80025f4:	617b      	str	r3, [r7, #20]
      break;
 80025f6:	e005      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025f8:	4b19      	ldr	r3, [pc, #100]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x114>)
 80025fa:	617b      	str	r3, [r7, #20]
      break;
 80025fc:	e002      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	617b      	str	r3, [r7, #20]
      break;
 8002602:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002604:	4b13      	ldr	r3, [pc, #76]	@ (8002654 <HAL_RCC_GetSysClockFreq+0x108>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	3301      	adds	r3, #1
 8002610:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002612:	4b10      	ldr	r3, [pc, #64]	@ (8002654 <HAL_RCC_GetSysClockFreq+0x108>)
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	0a1b      	lsrs	r3, r3, #8
 8002618:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	fb03 f202 	mul.w	r2, r3, r2
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	fbb2 f3f3 	udiv	r3, r2, r3
 8002628:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800262a:	4b0a      	ldr	r3, [pc, #40]	@ (8002654 <HAL_RCC_GetSysClockFreq+0x108>)
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	0e5b      	lsrs	r3, r3, #25
 8002630:	f003 0303 	and.w	r3, r3, #3
 8002634:	3301      	adds	r3, #1
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002642:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002644:	69bb      	ldr	r3, [r7, #24]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3724      	adds	r7, #36	@ 0x24
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	40021000 	.word	0x40021000
 8002658:	080049b4 	.word	0x080049b4
 800265c:	00f42400 	.word	0x00f42400
 8002660:	007a1200 	.word	0x007a1200

08002664 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002668:	4b03      	ldr	r3, [pc, #12]	@ (8002678 <HAL_RCC_GetHCLKFreq+0x14>)
 800266a:	681b      	ldr	r3, [r3, #0]
}
 800266c:	4618      	mov	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	20000004 	.word	0x20000004

0800267c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002680:	f7ff fff0 	bl	8002664 <HAL_RCC_GetHCLKFreq>
 8002684:	4602      	mov	r2, r0
 8002686:	4b06      	ldr	r3, [pc, #24]	@ (80026a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	0a1b      	lsrs	r3, r3, #8
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	4904      	ldr	r1, [pc, #16]	@ (80026a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002692:	5ccb      	ldrb	r3, [r1, r3]
 8002694:	f003 031f 	and.w	r3, r3, #31
 8002698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800269c:	4618      	mov	r0, r3
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40021000 	.word	0x40021000
 80026a4:	080049ac 	.word	0x080049ac

080026a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026ac:	f7ff ffda 	bl	8002664 <HAL_RCC_GetHCLKFreq>
 80026b0:	4602      	mov	r2, r0
 80026b2:	4b06      	ldr	r3, [pc, #24]	@ (80026cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	0adb      	lsrs	r3, r3, #11
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	4904      	ldr	r1, [pc, #16]	@ (80026d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026be:	5ccb      	ldrb	r3, [r1, r3]
 80026c0:	f003 031f 	and.w	r3, r3, #31
 80026c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40021000 	.word	0x40021000
 80026d0:	080049ac 	.word	0x080049ac

080026d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026dc:	2300      	movs	r3, #0
 80026de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026e0:	4b2a      	ldr	r3, [pc, #168]	@ (800278c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80026ec:	f7ff f9ee 	bl	8001acc <HAL_PWREx_GetVoltageRange>
 80026f0:	6178      	str	r0, [r7, #20]
 80026f2:	e014      	b.n	800271e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026f4:	4b25      	ldr	r3, [pc, #148]	@ (800278c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f8:	4a24      	ldr	r2, [pc, #144]	@ (800278c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002700:	4b22      	ldr	r3, [pc, #136]	@ (800278c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002704:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800270c:	f7ff f9de 	bl	8001acc <HAL_PWREx_GetVoltageRange>
 8002710:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002712:	4b1e      	ldr	r3, [pc, #120]	@ (800278c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002716:	4a1d      	ldr	r2, [pc, #116]	@ (800278c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002718:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800271c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002724:	d10b      	bne.n	800273e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b80      	cmp	r3, #128	@ 0x80
 800272a:	d919      	bls.n	8002760 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002730:	d902      	bls.n	8002738 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002732:	2302      	movs	r3, #2
 8002734:	613b      	str	r3, [r7, #16]
 8002736:	e013      	b.n	8002760 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002738:	2301      	movs	r3, #1
 800273a:	613b      	str	r3, [r7, #16]
 800273c:	e010      	b.n	8002760 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b80      	cmp	r3, #128	@ 0x80
 8002742:	d902      	bls.n	800274a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002744:	2303      	movs	r3, #3
 8002746:	613b      	str	r3, [r7, #16]
 8002748:	e00a      	b.n	8002760 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b80      	cmp	r3, #128	@ 0x80
 800274e:	d102      	bne.n	8002756 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002750:	2302      	movs	r3, #2
 8002752:	613b      	str	r3, [r7, #16]
 8002754:	e004      	b.n	8002760 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b70      	cmp	r3, #112	@ 0x70
 800275a:	d101      	bne.n	8002760 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800275c:	2301      	movs	r3, #1
 800275e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002760:	4b0b      	ldr	r3, [pc, #44]	@ (8002790 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f023 0207 	bic.w	r2, r3, #7
 8002768:	4909      	ldr	r1, [pc, #36]	@ (8002790 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002770:	4b07      	ldr	r3, [pc, #28]	@ (8002790 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	429a      	cmp	r2, r3
 800277c:	d001      	beq.n	8002782 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40021000 	.word	0x40021000
 8002790:	40022000 	.word	0x40022000

08002794 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800279c:	2300      	movs	r3, #0
 800279e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027a0:	2300      	movs	r3, #0
 80027a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d041      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027b4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80027b8:	d02a      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80027ba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80027be:	d824      	bhi.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80027c4:	d008      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80027ca:	d81e      	bhi.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00a      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80027d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027d4:	d010      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027d6:	e018      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027d8:	4b86      	ldr	r3, [pc, #536]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	4a85      	ldr	r2, [pc, #532]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027e4:	e015      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3304      	adds	r3, #4
 80027ea:	2100      	movs	r1, #0
 80027ec:	4618      	mov	r0, r3
 80027ee:	f000 fabb 	bl	8002d68 <RCCEx_PLLSAI1_Config>
 80027f2:	4603      	mov	r3, r0
 80027f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027f6:	e00c      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3320      	adds	r3, #32
 80027fc:	2100      	movs	r1, #0
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 fba6 	bl	8002f50 <RCCEx_PLLSAI2_Config>
 8002804:	4603      	mov	r3, r0
 8002806:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002808:	e003      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	74fb      	strb	r3, [r7, #19]
      break;
 800280e:	e000      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002810:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002812:	7cfb      	ldrb	r3, [r7, #19]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10b      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002818:	4b76      	ldr	r3, [pc, #472]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800281e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002826:	4973      	ldr	r1, [pc, #460]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800282e:	e001      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002830:	7cfb      	ldrb	r3, [r7, #19]
 8002832:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d041      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002844:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002848:	d02a      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800284a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800284e:	d824      	bhi.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002850:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002854:	d008      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002856:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800285a:	d81e      	bhi.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00a      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002860:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002864:	d010      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002866:	e018      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002868:	4b62      	ldr	r3, [pc, #392]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	4a61      	ldr	r2, [pc, #388]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800286e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002872:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002874:	e015      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3304      	adds	r3, #4
 800287a:	2100      	movs	r1, #0
 800287c:	4618      	mov	r0, r3
 800287e:	f000 fa73 	bl	8002d68 <RCCEx_PLLSAI1_Config>
 8002882:	4603      	mov	r3, r0
 8002884:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002886:	e00c      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3320      	adds	r3, #32
 800288c:	2100      	movs	r1, #0
 800288e:	4618      	mov	r0, r3
 8002890:	f000 fb5e 	bl	8002f50 <RCCEx_PLLSAI2_Config>
 8002894:	4603      	mov	r3, r0
 8002896:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002898:	e003      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	74fb      	strb	r3, [r7, #19]
      break;
 800289e:	e000      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80028a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028a2:	7cfb      	ldrb	r3, [r7, #19]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10b      	bne.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028a8:	4b52      	ldr	r3, [pc, #328]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028b6:	494f      	ldr	r1, [pc, #316]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80028be:	e001      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028c0:	7cfb      	ldrb	r3, [r7, #19]
 80028c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 80a0 	beq.w	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028d2:	2300      	movs	r3, #0
 80028d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028d6:	4b47      	ldr	r3, [pc, #284]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80028e6:	2300      	movs	r3, #0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00d      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ec:	4b41      	ldr	r3, [pc, #260]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f0:	4a40      	ldr	r2, [pc, #256]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80028f8:	4b3e      	ldr	r3, [pc, #248]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002904:	2301      	movs	r3, #1
 8002906:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002908:	4b3b      	ldr	r3, [pc, #236]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a3a      	ldr	r2, [pc, #232]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800290e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002912:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002914:	f7fe fbd8 	bl	80010c8 <HAL_GetTick>
 8002918:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800291a:	e009      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800291c:	f7fe fbd4 	bl	80010c8 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d902      	bls.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	74fb      	strb	r3, [r7, #19]
        break;
 800292e:	e005      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002930:	4b31      	ldr	r3, [pc, #196]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0ef      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800293c:	7cfb      	ldrb	r3, [r7, #19]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d15c      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002942:	4b2c      	ldr	r3, [pc, #176]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002948:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800294c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d01f      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	429a      	cmp	r2, r3
 800295e:	d019      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002960:	4b24      	ldr	r3, [pc, #144]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002966:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800296a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800296c:	4b21      	ldr	r3, [pc, #132]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800296e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002972:	4a20      	ldr	r2, [pc, #128]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002978:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800297c:	4b1d      	ldr	r3, [pc, #116]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002982:	4a1c      	ldr	r2, [pc, #112]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002984:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002988:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800298c:	4a19      	ldr	r2, [pc, #100]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d016      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299e:	f7fe fb93 	bl	80010c8 <HAL_GetTick>
 80029a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029a4:	e00b      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a6:	f7fe fb8f 	bl	80010c8 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d902      	bls.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	74fb      	strb	r3, [r7, #19]
            break;
 80029bc:	e006      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029be:	4b0d      	ldr	r3, [pc, #52]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0ec      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80029cc:	7cfb      	ldrb	r3, [r7, #19]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10c      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029d2:	4b08      	ldr	r3, [pc, #32]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029e2:	4904      	ldr	r1, [pc, #16]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80029ea:	e009      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029ec:	7cfb      	ldrb	r3, [r7, #19]
 80029ee:	74bb      	strb	r3, [r7, #18]
 80029f0:	e006      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80029f2:	bf00      	nop
 80029f4:	40021000 	.word	0x40021000
 80029f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029fc:	7cfb      	ldrb	r3, [r7, #19]
 80029fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a00:	7c7b      	ldrb	r3, [r7, #17]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d105      	bne.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a06:	4b9e      	ldr	r3, [pc, #632]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a0a:	4a9d      	ldr	r2, [pc, #628]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a10:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00a      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a1e:	4b98      	ldr	r3, [pc, #608]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a24:	f023 0203 	bic.w	r2, r3, #3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a2c:	4994      	ldr	r1, [pc, #592]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00a      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a40:	4b8f      	ldr	r3, [pc, #572]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a46:	f023 020c 	bic.w	r2, r3, #12
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a4e:	498c      	ldr	r1, [pc, #560]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00a      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a62:	4b87      	ldr	r3, [pc, #540]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a68:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a70:	4983      	ldr	r1, [pc, #524]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00a      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a84:	4b7e      	ldr	r3, [pc, #504]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a8a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a92:	497b      	ldr	r1, [pc, #492]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0310 	and.w	r3, r3, #16
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00a      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002aa6:	4b76      	ldr	r3, [pc, #472]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ab4:	4972      	ldr	r1, [pc, #456]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0320 	and.w	r3, r3, #32
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00a      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ac8:	4b6d      	ldr	r3, [pc, #436]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ace:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad6:	496a      	ldr	r1, [pc, #424]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00a      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002aea:	4b65      	ldr	r3, [pc, #404]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af8:	4961      	ldr	r1, [pc, #388]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00a      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b0c:	4b5c      	ldr	r3, [pc, #368]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b12:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b1a:	4959      	ldr	r1, [pc, #356]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00a      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b2e:	4b54      	ldr	r3, [pc, #336]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b34:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b3c:	4950      	ldr	r1, [pc, #320]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00a      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b50:	4b4b      	ldr	r3, [pc, #300]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b56:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b5e:	4948      	ldr	r1, [pc, #288]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b72:	4b43      	ldr	r3, [pc, #268]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b78:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b80:	493f      	ldr	r1, [pc, #252]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d028      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b94:	4b3a      	ldr	r3, [pc, #232]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b9a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ba2:	4937      	ldr	r1, [pc, #220]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bb2:	d106      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bb4:	4b32      	ldr	r3, [pc, #200]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	4a31      	ldr	r2, [pc, #196]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bbe:	60d3      	str	r3, [r2, #12]
 8002bc0:	e011      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bc6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002bca:	d10c      	bne.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3304      	adds	r3, #4
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 f8c8 	bl	8002d68 <RCCEx_PLLSAI1_Config>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002bdc:	7cfb      	ldrb	r3, [r7, #19]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002be2:	7cfb      	ldrb	r3, [r7, #19]
 8002be4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d028      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bf2:	4b23      	ldr	r3, [pc, #140]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bf8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c00:	491f      	ldr	r1, [pc, #124]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c10:	d106      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c12:	4b1b      	ldr	r3, [pc, #108]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	4a1a      	ldr	r2, [pc, #104]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c18:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c1c:	60d3      	str	r3, [r2, #12]
 8002c1e:	e011      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c28:	d10c      	bne.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	2101      	movs	r1, #1
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 f899 	bl	8002d68 <RCCEx_PLLSAI1_Config>
 8002c36:	4603      	mov	r3, r0
 8002c38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c3a:	7cfb      	ldrb	r3, [r7, #19]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002c40:	7cfb      	ldrb	r3, [r7, #19]
 8002c42:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d02b      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c50:	4b0b      	ldr	r3, [pc, #44]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c5e:	4908      	ldr	r1, [pc, #32]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c6e:	d109      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c70:	4b03      	ldr	r3, [pc, #12]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	4a02      	ldr	r2, [pc, #8]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c7a:	60d3      	str	r3, [r2, #12]
 8002c7c:	e014      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002c7e:	bf00      	nop
 8002c80:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c8c:	d10c      	bne.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3304      	adds	r3, #4
 8002c92:	2101      	movs	r1, #1
 8002c94:	4618      	mov	r0, r3
 8002c96:	f000 f867 	bl	8002d68 <RCCEx_PLLSAI1_Config>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c9e:	7cfb      	ldrb	r3, [r7, #19]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002ca4:	7cfb      	ldrb	r3, [r7, #19]
 8002ca6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d02f      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cb4:	4b2b      	ldr	r3, [pc, #172]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002cc2:	4928      	ldr	r1, [pc, #160]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002cce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cd2:	d10d      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	2102      	movs	r1, #2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 f844 	bl	8002d68 <RCCEx_PLLSAI1_Config>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ce4:	7cfb      	ldrb	r3, [r7, #19]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d014      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002cea:	7cfb      	ldrb	r3, [r7, #19]
 8002cec:	74bb      	strb	r3, [r7, #18]
 8002cee:	e011      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002cf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cf8:	d10c      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3320      	adds	r3, #32
 8002cfe:	2102      	movs	r1, #2
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 f925 	bl	8002f50 <RCCEx_PLLSAI2_Config>
 8002d06:	4603      	mov	r3, r0
 8002d08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d0a:	7cfb      	ldrb	r3, [r7, #19]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d10:	7cfb      	ldrb	r3, [r7, #19]
 8002d12:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00a      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d20:	4b10      	ldr	r3, [pc, #64]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d26:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d2e:	490d      	ldr	r1, [pc, #52]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00b      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d42:	4b08      	ldr	r3, [pc, #32]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d48:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d52:	4904      	ldr	r1, [pc, #16]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d5a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40021000 	.word	0x40021000

08002d68 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d76:	4b75      	ldr	r3, [pc, #468]	@ (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d018      	beq.n	8002db4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d82:	4b72      	ldr	r3, [pc, #456]	@ (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f003 0203 	and.w	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d10d      	bne.n	8002dae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
       ||
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d009      	beq.n	8002dae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d9a:	4b6c      	ldr	r3, [pc, #432]	@ (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	091b      	lsrs	r3, r3, #4
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
       ||
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d047      	beq.n	8002e3e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	73fb      	strb	r3, [r7, #15]
 8002db2:	e044      	b.n	8002e3e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b03      	cmp	r3, #3
 8002dba:	d018      	beq.n	8002dee <RCCEx_PLLSAI1_Config+0x86>
 8002dbc:	2b03      	cmp	r3, #3
 8002dbe:	d825      	bhi.n	8002e0c <RCCEx_PLLSAI1_Config+0xa4>
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d002      	beq.n	8002dca <RCCEx_PLLSAI1_Config+0x62>
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d009      	beq.n	8002ddc <RCCEx_PLLSAI1_Config+0x74>
 8002dc8:	e020      	b.n	8002e0c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dca:	4b60      	ldr	r3, [pc, #384]	@ (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d11d      	bne.n	8002e12 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dda:	e01a      	b.n	8002e12 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ddc:	4b5b      	ldr	r3, [pc, #364]	@ (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d116      	bne.n	8002e16 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dec:	e013      	b.n	8002e16 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dee:	4b57      	ldr	r3, [pc, #348]	@ (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10f      	bne.n	8002e1a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dfa:	4b54      	ldr	r3, [pc, #336]	@ (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d109      	bne.n	8002e1a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e0a:	e006      	b.n	8002e1a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e10:	e004      	b.n	8002e1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e12:	bf00      	nop
 8002e14:	e002      	b.n	8002e1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e16:	bf00      	nop
 8002e18:	e000      	b.n	8002e1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10d      	bne.n	8002e3e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e22:	4b4a      	ldr	r3, [pc, #296]	@ (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6819      	ldr	r1, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	430b      	orrs	r3, r1
 8002e38:	4944      	ldr	r1, [pc, #272]	@ (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d17d      	bne.n	8002f40 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e44:	4b41      	ldr	r3, [pc, #260]	@ (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a40      	ldr	r2, [pc, #256]	@ (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e4a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002e4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e50:	f7fe f93a 	bl	80010c8 <HAL_GetTick>
 8002e54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e56:	e009      	b.n	8002e6c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e58:	f7fe f936 	bl	80010c8 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d902      	bls.n	8002e6c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	73fb      	strb	r3, [r7, #15]
        break;
 8002e6a:	e005      	b.n	8002e78 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e6c:	4b37      	ldr	r3, [pc, #220]	@ (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1ef      	bne.n	8002e58 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d160      	bne.n	8002f40 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d111      	bne.n	8002ea8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e84:	4b31      	ldr	r3, [pc, #196]	@ (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002e8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6892      	ldr	r2, [r2, #8]
 8002e94:	0211      	lsls	r1, r2, #8
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	68d2      	ldr	r2, [r2, #12]
 8002e9a:	0912      	lsrs	r2, r2, #4
 8002e9c:	0452      	lsls	r2, r2, #17
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	492a      	ldr	r1, [pc, #168]	@ (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	610b      	str	r3, [r1, #16]
 8002ea6:	e027      	b.n	8002ef8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d112      	bne.n	8002ed4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002eae:	4b27      	ldr	r3, [pc, #156]	@ (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002eb6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6892      	ldr	r2, [r2, #8]
 8002ebe:	0211      	lsls	r1, r2, #8
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6912      	ldr	r2, [r2, #16]
 8002ec4:	0852      	lsrs	r2, r2, #1
 8002ec6:	3a01      	subs	r2, #1
 8002ec8:	0552      	lsls	r2, r2, #21
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	491f      	ldr	r1, [pc, #124]	@ (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	610b      	str	r3, [r1, #16]
 8002ed2:	e011      	b.n	8002ef8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002edc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6892      	ldr	r2, [r2, #8]
 8002ee4:	0211      	lsls	r1, r2, #8
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6952      	ldr	r2, [r2, #20]
 8002eea:	0852      	lsrs	r2, r2, #1
 8002eec:	3a01      	subs	r2, #1
 8002eee:	0652      	lsls	r2, r2, #25
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	4916      	ldr	r1, [pc, #88]	@ (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ef8:	4b14      	ldr	r3, [pc, #80]	@ (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a13      	ldr	r2, [pc, #76]	@ (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002efe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f04:	f7fe f8e0 	bl	80010c8 <HAL_GetTick>
 8002f08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f0a:	e009      	b.n	8002f20 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f0c:	f7fe f8dc 	bl	80010c8 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d902      	bls.n	8002f20 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	73fb      	strb	r3, [r7, #15]
          break;
 8002f1e:	e005      	b.n	8002f2c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f20:	4b0a      	ldr	r3, [pc, #40]	@ (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0ef      	beq.n	8002f0c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d106      	bne.n	8002f40 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f32:	4b06      	ldr	r3, [pc, #24]	@ (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f34:	691a      	ldr	r2, [r3, #16]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	4904      	ldr	r1, [pc, #16]	@ (8002f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40021000 	.word	0x40021000

08002f50 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f5e:	4b6a      	ldr	r3, [pc, #424]	@ (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d018      	beq.n	8002f9c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f6a:	4b67      	ldr	r3, [pc, #412]	@ (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f003 0203 	and.w	r2, r3, #3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d10d      	bne.n	8002f96 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
       ||
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d009      	beq.n	8002f96 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002f82:	4b61      	ldr	r3, [pc, #388]	@ (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	091b      	lsrs	r3, r3, #4
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
       ||
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d047      	beq.n	8003026 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	73fb      	strb	r3, [r7, #15]
 8002f9a:	e044      	b.n	8003026 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d018      	beq.n	8002fd6 <RCCEx_PLLSAI2_Config+0x86>
 8002fa4:	2b03      	cmp	r3, #3
 8002fa6:	d825      	bhi.n	8002ff4 <RCCEx_PLLSAI2_Config+0xa4>
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d002      	beq.n	8002fb2 <RCCEx_PLLSAI2_Config+0x62>
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d009      	beq.n	8002fc4 <RCCEx_PLLSAI2_Config+0x74>
 8002fb0:	e020      	b.n	8002ff4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fb2:	4b55      	ldr	r3, [pc, #340]	@ (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d11d      	bne.n	8002ffa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fc2:	e01a      	b.n	8002ffa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fc4:	4b50      	ldr	r3, [pc, #320]	@ (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d116      	bne.n	8002ffe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fd4:	e013      	b.n	8002ffe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fd6:	4b4c      	ldr	r3, [pc, #304]	@ (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10f      	bne.n	8003002 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fe2:	4b49      	ldr	r3, [pc, #292]	@ (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d109      	bne.n	8003002 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ff2:	e006      	b.n	8003002 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ff8:	e004      	b.n	8003004 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ffa:	bf00      	nop
 8002ffc:	e002      	b.n	8003004 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ffe:	bf00      	nop
 8003000:	e000      	b.n	8003004 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003002:	bf00      	nop
    }

    if(status == HAL_OK)
 8003004:	7bfb      	ldrb	r3, [r7, #15]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10d      	bne.n	8003026 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800300a:	4b3f      	ldr	r3, [pc, #252]	@ (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6819      	ldr	r1, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	3b01      	subs	r3, #1
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	430b      	orrs	r3, r1
 8003020:	4939      	ldr	r1, [pc, #228]	@ (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003022:	4313      	orrs	r3, r2
 8003024:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003026:	7bfb      	ldrb	r3, [r7, #15]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d167      	bne.n	80030fc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800302c:	4b36      	ldr	r3, [pc, #216]	@ (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a35      	ldr	r2, [pc, #212]	@ (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003032:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003036:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003038:	f7fe f846 	bl	80010c8 <HAL_GetTick>
 800303c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800303e:	e009      	b.n	8003054 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003040:	f7fe f842 	bl	80010c8 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d902      	bls.n	8003054 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	73fb      	strb	r3, [r7, #15]
        break;
 8003052:	e005      	b.n	8003060 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003054:	4b2c      	ldr	r3, [pc, #176]	@ (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1ef      	bne.n	8003040 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003060:	7bfb      	ldrb	r3, [r7, #15]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d14a      	bne.n	80030fc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d111      	bne.n	8003090 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800306c:	4b26      	ldr	r3, [pc, #152]	@ (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003074:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6892      	ldr	r2, [r2, #8]
 800307c:	0211      	lsls	r1, r2, #8
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	68d2      	ldr	r2, [r2, #12]
 8003082:	0912      	lsrs	r2, r2, #4
 8003084:	0452      	lsls	r2, r2, #17
 8003086:	430a      	orrs	r2, r1
 8003088:	491f      	ldr	r1, [pc, #124]	@ (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 800308a:	4313      	orrs	r3, r2
 800308c:	614b      	str	r3, [r1, #20]
 800308e:	e011      	b.n	80030b4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003090:	4b1d      	ldr	r3, [pc, #116]	@ (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003098:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6892      	ldr	r2, [r2, #8]
 80030a0:	0211      	lsls	r1, r2, #8
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6912      	ldr	r2, [r2, #16]
 80030a6:	0852      	lsrs	r2, r2, #1
 80030a8:	3a01      	subs	r2, #1
 80030aa:	0652      	lsls	r2, r2, #25
 80030ac:	430a      	orrs	r2, r1
 80030ae:	4916      	ldr	r1, [pc, #88]	@ (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80030b4:	4b14      	ldr	r3, [pc, #80]	@ (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a13      	ldr	r2, [pc, #76]	@ (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c0:	f7fe f802 	bl	80010c8 <HAL_GetTick>
 80030c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030c6:	e009      	b.n	80030dc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030c8:	f7fd fffe 	bl	80010c8 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d902      	bls.n	80030dc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	73fb      	strb	r3, [r7, #15]
          break;
 80030da:	e005      	b.n	80030e8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0ef      	beq.n	80030c8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d106      	bne.n	80030fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80030ee:	4b06      	ldr	r3, [pc, #24]	@ (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f0:	695a      	ldr	r2, [r3, #20]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	4904      	ldr	r1, [pc, #16]	@ (8003108 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40021000 	.word	0x40021000

0800310c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e095      	b.n	800324a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003122:	2b00      	cmp	r3, #0
 8003124:	d108      	bne.n	8003138 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800312e:	d009      	beq.n	8003144 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	61da      	str	r2, [r3, #28]
 8003136:	e005      	b.n	8003144 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d106      	bne.n	8003164 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7fd fb54 	bl	800080c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800317a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003184:	d902      	bls.n	800318c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003186:	2300      	movs	r3, #0
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	e002      	b.n	8003192 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800318c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003190:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800319a:	d007      	beq.n	80031ac <HAL_SPI_Init+0xa0>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80031a4:	d002      	beq.n	80031ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80031bc:	431a      	orrs	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	431a      	orrs	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031e4:	431a      	orrs	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ee:	ea42 0103 	orr.w	r1, r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	0c1b      	lsrs	r3, r3, #16
 8003208:	f003 0204 	and.w	r2, r3, #4
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003210:	f003 0310 	and.w	r3, r3, #16
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003228:	ea42 0103 	orr.w	r1, r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b088      	sub	sp, #32
 8003256:	af00      	add	r7, sp, #0
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	603b      	str	r3, [r7, #0]
 800325e:	4613      	mov	r3, r2
 8003260:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003262:	f7fd ff31 	bl	80010c8 <HAL_GetTick>
 8003266:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003268:	88fb      	ldrh	r3, [r7, #6]
 800326a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b01      	cmp	r3, #1
 8003276:	d001      	beq.n	800327c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003278:	2302      	movs	r3, #2
 800327a:	e15c      	b.n	8003536 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d002      	beq.n	8003288 <HAL_SPI_Transmit+0x36>
 8003282:	88fb      	ldrh	r3, [r7, #6]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e154      	b.n	8003536 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003292:	2b01      	cmp	r3, #1
 8003294:	d101      	bne.n	800329a <HAL_SPI_Transmit+0x48>
 8003296:	2302      	movs	r3, #2
 8003298:	e14d      	b.n	8003536 <HAL_SPI_Transmit+0x2e4>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2203      	movs	r2, #3
 80032a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	88fa      	ldrh	r2, [r7, #6]
 80032ba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	88fa      	ldrh	r2, [r7, #6]
 80032c0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032ec:	d10f      	bne.n	800330e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800330c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003318:	2b40      	cmp	r3, #64	@ 0x40
 800331a:	d007      	beq.n	800332c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800332a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003334:	d952      	bls.n	80033dc <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <HAL_SPI_Transmit+0xf2>
 800333e:	8b7b      	ldrh	r3, [r7, #26]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d145      	bne.n	80033d0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003348:	881a      	ldrh	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003354:	1c9a      	adds	r2, r3, #2
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800335e:	b29b      	uxth	r3, r3
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003368:	e032      	b.n	80033d0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b02      	cmp	r3, #2
 8003376:	d112      	bne.n	800339e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800337c:	881a      	ldrh	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003388:	1c9a      	adds	r2, r3, #2
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003392:	b29b      	uxth	r3, r3
 8003394:	3b01      	subs	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800339c:	e018      	b.n	80033d0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800339e:	f7fd fe93 	bl	80010c8 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d803      	bhi.n	80033b6 <HAL_SPI_Transmit+0x164>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b4:	d102      	bne.n	80033bc <HAL_SPI_Transmit+0x16a>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d109      	bne.n	80033d0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e0b2      	b.n	8003536 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1c7      	bne.n	800336a <HAL_SPI_Transmit+0x118>
 80033da:	e083      	b.n	80034e4 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <HAL_SPI_Transmit+0x198>
 80033e4:	8b7b      	ldrh	r3, [r7, #26]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d177      	bne.n	80034da <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d912      	bls.n	800341a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f8:	881a      	ldrh	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003404:	1c9a      	adds	r2, r3, #2
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800340e:	b29b      	uxth	r3, r3
 8003410:	3b02      	subs	r3, #2
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003418:	e05f      	b.n	80034da <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	330c      	adds	r3, #12
 8003424:	7812      	ldrb	r2, [r2, #0]
 8003426:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003436:	b29b      	uxth	r3, r3
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003440:	e04b      	b.n	80034da <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b02      	cmp	r3, #2
 800344e:	d12b      	bne.n	80034a8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b01      	cmp	r3, #1
 8003458:	d912      	bls.n	8003480 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800345e:	881a      	ldrh	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800346a:	1c9a      	adds	r2, r3, #2
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003474:	b29b      	uxth	r3, r3
 8003476:	3b02      	subs	r3, #2
 8003478:	b29a      	uxth	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800347e:	e02c      	b.n	80034da <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	330c      	adds	r3, #12
 800348a:	7812      	ldrb	r2, [r2, #0]
 800348c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003492:	1c5a      	adds	r2, r3, #1
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800349c:	b29b      	uxth	r3, r3
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034a6:	e018      	b.n	80034da <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034a8:	f7fd fe0e 	bl	80010c8 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d803      	bhi.n	80034c0 <HAL_SPI_Transmit+0x26e>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034be:	d102      	bne.n	80034c6 <HAL_SPI_Transmit+0x274>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d109      	bne.n	80034da <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e02d      	b.n	8003536 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034de:	b29b      	uxth	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1ae      	bne.n	8003442 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034e4:	69fa      	ldr	r2, [r7, #28]
 80034e6:	6839      	ldr	r1, [r7, #0]
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f947 	bl	800377c <SPI_EndRxTxTransaction>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2220      	movs	r2, #32
 80034f8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10a      	bne.n	8003518 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	617b      	str	r3, [r7, #20]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e000      	b.n	8003536 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003534:	2300      	movs	r3, #0
  }
}
 8003536:	4618      	mov	r0, r3
 8003538:	3720      	adds	r7, #32
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b088      	sub	sp, #32
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	603b      	str	r3, [r7, #0]
 800354c:	4613      	mov	r3, r2
 800354e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003550:	f7fd fdba 	bl	80010c8 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	4413      	add	r3, r2
 800355e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003560:	f7fd fdb2 	bl	80010c8 <HAL_GetTick>
 8003564:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003566:	4b39      	ldr	r3, [pc, #228]	@ (800364c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	015b      	lsls	r3, r3, #5
 800356c:	0d1b      	lsrs	r3, r3, #20
 800356e:	69fa      	ldr	r2, [r7, #28]
 8003570:	fb02 f303 	mul.w	r3, r2, r3
 8003574:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003576:	e054      	b.n	8003622 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357e:	d050      	beq.n	8003622 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003580:	f7fd fda2 	bl	80010c8 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	69fa      	ldr	r2, [r7, #28]
 800358c:	429a      	cmp	r2, r3
 800358e:	d902      	bls.n	8003596 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d13d      	bne.n	8003612 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80035a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035ae:	d111      	bne.n	80035d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035b8:	d004      	beq.n	80035c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035c2:	d107      	bne.n	80035d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035dc:	d10f      	bne.n	80035fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e017      	b.n	8003642 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	3b01      	subs	r3, #1
 8003620:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	4013      	ands	r3, r2
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	429a      	cmp	r2, r3
 8003630:	bf0c      	ite	eq
 8003632:	2301      	moveq	r3, #1
 8003634:	2300      	movne	r3, #0
 8003636:	b2db      	uxtb	r3, r3
 8003638:	461a      	mov	r2, r3
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	429a      	cmp	r2, r3
 800363e:	d19b      	bne.n	8003578 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3720      	adds	r7, #32
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	20000004 	.word	0x20000004

08003650 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08a      	sub	sp, #40	@ 0x28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800365e:	2300      	movs	r3, #0
 8003660:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003662:	f7fd fd31 	bl	80010c8 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800366a:	1a9b      	subs	r3, r3, r2
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	4413      	add	r3, r2
 8003670:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003672:	f7fd fd29 	bl	80010c8 <HAL_GetTick>
 8003676:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	330c      	adds	r3, #12
 800367e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003680:	4b3d      	ldr	r3, [pc, #244]	@ (8003778 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	4613      	mov	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	00da      	lsls	r2, r3, #3
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	0d1b      	lsrs	r3, r3, #20
 8003690:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003692:	fb02 f303 	mul.w	r3, r2, r3
 8003696:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003698:	e060      	b.n	800375c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80036a0:	d107      	bne.n	80036b2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d104      	bne.n	80036b2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80036b0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b8:	d050      	beq.n	800375c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036ba:	f7fd fd05 	bl	80010c8 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d902      	bls.n	80036d0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80036ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d13d      	bne.n	800374c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80036de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036e8:	d111      	bne.n	800370e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036f2:	d004      	beq.n	80036fe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036fc:	d107      	bne.n	800370e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800370c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003712:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003716:	d10f      	bne.n	8003738 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003736:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e010      	b.n	800376e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003752:	2300      	movs	r3, #0
 8003754:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	3b01      	subs	r3, #1
 800375a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	4013      	ands	r3, r2
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	429a      	cmp	r2, r3
 800376a:	d196      	bne.n	800369a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3728      	adds	r7, #40	@ 0x28
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	20000004 	.word	0x20000004

0800377c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af02      	add	r7, sp, #8
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2200      	movs	r2, #0
 8003790:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f7ff ff5b 	bl	8003650 <SPI_WaitFifoStateUntilTimeout>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d007      	beq.n	80037b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037a4:	f043 0220 	orr.w	r2, r3, #32
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e027      	b.n	8003800 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2200      	movs	r2, #0
 80037b8:	2180      	movs	r1, #128	@ 0x80
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f7ff fec0 	bl	8003540 <SPI_WaitFlagStateUntilTimeout>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d007      	beq.n	80037d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ca:	f043 0220 	orr.w	r2, r3, #32
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e014      	b.n	8003800 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2200      	movs	r2, #0
 80037de:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f7ff ff34 	bl	8003650 <SPI_WaitFifoStateUntilTimeout>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d007      	beq.n	80037fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037f2:	f043 0220 	orr.w	r2, r3, #32
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e000      	b.n	8003800 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e040      	b.n	800389c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7fd fb4e 	bl	8000ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2224      	movs	r2, #36	@ 0x24
 8003834:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0201 	bic.w	r2, r2, #1
 8003844:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384a:	2b00      	cmp	r3, #0
 800384c:	d002      	beq.n	8003854 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 fe06 	bl	8004460 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 fb4b 	bl	8003ef0 <UART_SetConfig>
 800385a:	4603      	mov	r3, r0
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e01b      	b.n	800389c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003872:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003882:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 fe85 	bl	80045a4 <UART_CheckIdleState>
 800389a:	4603      	mov	r3, r0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b0ba      	sub	sp, #232	@ 0xe8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80038ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80038ce:	f640 030f 	movw	r3, #2063	@ 0x80f
 80038d2:	4013      	ands	r3, r2
 80038d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80038d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d115      	bne.n	800390c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80038e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038e4:	f003 0320 	and.w	r3, r3, #32
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00f      	beq.n	800390c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80038ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d009      	beq.n	800390c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 82ca 	beq.w	8003e96 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	4798      	blx	r3
      }
      return;
 800390a:	e2c4      	b.n	8003e96 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800390c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 8117 	beq.w	8003b44 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d106      	bne.n	8003930 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003922:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003926:	4b85      	ldr	r3, [pc, #532]	@ (8003b3c <HAL_UART_IRQHandler+0x298>)
 8003928:	4013      	ands	r3, r2
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 810a 	beq.w	8003b44 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b00      	cmp	r3, #0
 800393a:	d011      	beq.n	8003960 <HAL_UART_IRQHandler+0xbc>
 800393c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00b      	beq.n	8003960 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2201      	movs	r2, #1
 800394e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003956:	f043 0201 	orr.w	r2, r3, #1
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d011      	beq.n	8003990 <HAL_UART_IRQHandler+0xec>
 800396c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00b      	beq.n	8003990 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2202      	movs	r2, #2
 800397e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003986:	f043 0204 	orr.w	r2, r3, #4
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	d011      	beq.n	80039c0 <HAL_UART_IRQHandler+0x11c>
 800399c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00b      	beq.n	80039c0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2204      	movs	r2, #4
 80039ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039b6:	f043 0202 	orr.w	r2, r3, #2
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80039c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039c4:	f003 0308 	and.w	r3, r3, #8
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d017      	beq.n	80039fc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039d0:	f003 0320 	and.w	r3, r3, #32
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d105      	bne.n	80039e4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80039d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00b      	beq.n	80039fc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2208      	movs	r2, #8
 80039ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039f2:	f043 0208 	orr.w	r2, r3, #8
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80039fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d012      	beq.n	8003a2e <HAL_UART_IRQHandler+0x18a>
 8003a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00c      	beq.n	8003a2e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a24:	f043 0220 	orr.w	r2, r3, #32
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 8230 	beq.w	8003e9a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00d      	beq.n	8003a62 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a4a:	f003 0320 	and.w	r3, r3, #32
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d007      	beq.n	8003a62 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a68:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a76:	2b40      	cmp	r3, #64	@ 0x40
 8003a78:	d005      	beq.n	8003a86 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a7e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d04f      	beq.n	8003b26 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 fea1 	bl	80047ce <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a96:	2b40      	cmp	r3, #64	@ 0x40
 8003a98:	d141      	bne.n	8003b1e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	3308      	adds	r3, #8
 8003aa0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003aa8:	e853 3f00 	ldrex	r3, [r3]
 8003aac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003ab0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ab4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	3308      	adds	r3, #8
 8003ac2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003ac6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003aca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ace:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003ad2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003ad6:	e841 2300 	strex	r3, r2, [r1]
 8003ada:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003ade:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1d9      	bne.n	8003a9a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d013      	beq.n	8003b16 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003af2:	4a13      	ldr	r2, [pc, #76]	@ (8003b40 <HAL_UART_IRQHandler+0x29c>)
 8003af4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fd fd1c 	bl	8001538 <HAL_DMA_Abort_IT>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d017      	beq.n	8003b36 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003b10:	4610      	mov	r0, r2
 8003b12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b14:	e00f      	b.n	8003b36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f9d4 	bl	8003ec4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b1c:	e00b      	b.n	8003b36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f9d0 	bl	8003ec4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b24:	e007      	b.n	8003b36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f9cc 	bl	8003ec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003b34:	e1b1      	b.n	8003e9a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b36:	bf00      	nop
    return;
 8003b38:	e1af      	b.n	8003e9a <HAL_UART_IRQHandler+0x5f6>
 8003b3a:	bf00      	nop
 8003b3c:	04000120 	.word	0x04000120
 8003b40:	08004897 	.word	0x08004897

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	f040 816a 	bne.w	8003e22 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b52:	f003 0310 	and.w	r3, r3, #16
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 8163 	beq.w	8003e22 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b60:	f003 0310 	and.w	r3, r3, #16
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 815c 	beq.w	8003e22 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2210      	movs	r2, #16
 8003b70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b7c:	2b40      	cmp	r3, #64	@ 0x40
 8003b7e:	f040 80d4 	bne.w	8003d2a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b8e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 80ad 	beq.w	8003cf2 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003b9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	f080 80a5 	bcs.w	8003cf2 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0320 	and.w	r3, r3, #32
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f040 8086 	bne.w	8003cd0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003bd0:	e853 3f00 	ldrex	r3, [r3]
 8003bd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003bd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003bdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003be0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	461a      	mov	r2, r3
 8003bea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003bee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003bf2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003bfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003bfe:	e841 2300 	strex	r3, r2, [r1]
 8003c02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003c06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1da      	bne.n	8003bc4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	3308      	adds	r3, #8
 8003c14:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c18:	e853 3f00 	ldrex	r3, [r3]
 8003c1c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003c1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c20:	f023 0301 	bic.w	r3, r3, #1
 8003c24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	3308      	adds	r3, #8
 8003c2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c32:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003c36:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c38:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003c3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003c3e:	e841 2300 	strex	r3, r2, [r1]
 8003c42:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003c44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1e1      	bne.n	8003c0e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3308      	adds	r3, #8
 8003c50:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c54:	e853 3f00 	ldrex	r3, [r3]
 8003c58:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003c5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	3308      	adds	r3, #8
 8003c6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003c6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c70:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c72:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003c74:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c76:	e841 2300 	strex	r3, r2, [r1]
 8003c7a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003c7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1e3      	bne.n	8003c4a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c98:	e853 3f00 	ldrex	r3, [r3]
 8003c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003c9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ca0:	f023 0310 	bic.w	r3, r3, #16
 8003ca4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	461a      	mov	r2, r3
 8003cae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003cb2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003cb4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003cb8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003cba:	e841 2300 	strex	r3, r2, [r1]
 8003cbe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003cc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1e4      	bne.n	8003c90 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fd fbf6 	bl	80014bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	4619      	mov	r1, r3
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f8f4 	bl	8003ed8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003cf0:	e0d5      	b.n	8003e9e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003cf8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	f040 80ce 	bne.w	8003e9e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b20      	cmp	r3, #32
 8003d10:	f040 80c5 	bne.w	8003e9e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003d20:	4619      	mov	r1, r3
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f8d8 	bl	8003ed8 <HAL_UARTEx_RxEventCallback>
      return;
 8003d28:	e0b9      	b.n	8003e9e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 80ab 	beq.w	8003ea2 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003d4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 80a6 	beq.w	8003ea2 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d5e:	e853 3f00 	ldrex	r3, [r3]
 8003d62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003d78:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d7a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d80:	e841 2300 	strex	r3, r2, [r1]
 8003d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1e4      	bne.n	8003d56 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	3308      	adds	r3, #8
 8003d92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d96:	e853 3f00 	ldrex	r3, [r3]
 8003d9a:	623b      	str	r3, [r7, #32]
   return(result);
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	f023 0301 	bic.w	r3, r3, #1
 8003da2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3308      	adds	r3, #8
 8003dac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003db0:	633a      	str	r2, [r7, #48]	@ 0x30
 8003db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003db6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003db8:	e841 2300 	strex	r3, r2, [r1]
 8003dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1e3      	bne.n	8003d8c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	e853 3f00 	ldrex	r3, [r3]
 8003de4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f023 0310 	bic.w	r3, r3, #16
 8003dec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	461a      	mov	r2, r3
 8003df6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003dfa:	61fb      	str	r3, [r7, #28]
 8003dfc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfe:	69b9      	ldr	r1, [r7, #24]
 8003e00:	69fa      	ldr	r2, [r7, #28]
 8003e02:	e841 2300 	strex	r3, r2, [r1]
 8003e06:	617b      	str	r3, [r7, #20]
   return(result);
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1e4      	bne.n	8003dd8 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2202      	movs	r2, #2
 8003e12:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e18:	4619      	mov	r1, r3
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f85c 	bl	8003ed8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e20:	e03f      	b.n	8003ea2 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00e      	beq.n	8003e4c <HAL_UART_IRQHandler+0x5a8>
 8003e2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d008      	beq.n	8003e4c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003e42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 fd66 	bl	8004916 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e4a:	e02d      	b.n	8003ea8 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00e      	beq.n	8003e76 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d008      	beq.n	8003e76 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d01c      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	4798      	blx	r3
    }
    return;
 8003e74:	e017      	b.n	8003ea6 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d012      	beq.n	8003ea8 <HAL_UART_IRQHandler+0x604>
 8003e82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00c      	beq.n	8003ea8 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 fd17 	bl	80048c2 <UART_EndTransmit_IT>
    return;
 8003e94:	e008      	b.n	8003ea8 <HAL_UART_IRQHandler+0x604>
      return;
 8003e96:	bf00      	nop
 8003e98:	e006      	b.n	8003ea8 <HAL_UART_IRQHandler+0x604>
    return;
 8003e9a:	bf00      	nop
 8003e9c:	e004      	b.n	8003ea8 <HAL_UART_IRQHandler+0x604>
      return;
 8003e9e:	bf00      	nop
 8003ea0:	e002      	b.n	8003ea8 <HAL_UART_IRQHandler+0x604>
      return;
 8003ea2:	bf00      	nop
 8003ea4:	e000      	b.n	8003ea8 <HAL_UART_IRQHandler+0x604>
    return;
 8003ea6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003ea8:	37e8      	adds	r7, #232	@ 0xe8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop

08003eb0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ef4:	b08a      	sub	sp, #40	@ 0x28
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003efa:	2300      	movs	r3, #0
 8003efc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	4ba4      	ldr	r3, [pc, #656]	@ (80041b0 <UART_SetConfig+0x2c0>)
 8003f20:	4013      	ands	r3, r2
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	6812      	ldr	r2, [r2, #0]
 8003f26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f28:	430b      	orrs	r3, r1
 8003f2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a99      	ldr	r2, [pc, #612]	@ (80041b4 <UART_SetConfig+0x2c4>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d004      	beq.n	8003f5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a90      	ldr	r2, [pc, #576]	@ (80041b8 <UART_SetConfig+0x2c8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d126      	bne.n	8003fc8 <UART_SetConfig+0xd8>
 8003f7a:	4b90      	ldr	r3, [pc, #576]	@ (80041bc <UART_SetConfig+0x2cc>)
 8003f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f80:	f003 0303 	and.w	r3, r3, #3
 8003f84:	2b03      	cmp	r3, #3
 8003f86:	d81b      	bhi.n	8003fc0 <UART_SetConfig+0xd0>
 8003f88:	a201      	add	r2, pc, #4	@ (adr r2, 8003f90 <UART_SetConfig+0xa0>)
 8003f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8e:	bf00      	nop
 8003f90:	08003fa1 	.word	0x08003fa1
 8003f94:	08003fb1 	.word	0x08003fb1
 8003f98:	08003fa9 	.word	0x08003fa9
 8003f9c:	08003fb9 	.word	0x08003fb9
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fa6:	e116      	b.n	80041d6 <UART_SetConfig+0x2e6>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fae:	e112      	b.n	80041d6 <UART_SetConfig+0x2e6>
 8003fb0:	2304      	movs	r3, #4
 8003fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fb6:	e10e      	b.n	80041d6 <UART_SetConfig+0x2e6>
 8003fb8:	2308      	movs	r3, #8
 8003fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fbe:	e10a      	b.n	80041d6 <UART_SetConfig+0x2e6>
 8003fc0:	2310      	movs	r3, #16
 8003fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fc6:	e106      	b.n	80041d6 <UART_SetConfig+0x2e6>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a7c      	ldr	r2, [pc, #496]	@ (80041c0 <UART_SetConfig+0x2d0>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d138      	bne.n	8004044 <UART_SetConfig+0x154>
 8003fd2:	4b7a      	ldr	r3, [pc, #488]	@ (80041bc <UART_SetConfig+0x2cc>)
 8003fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd8:	f003 030c 	and.w	r3, r3, #12
 8003fdc:	2b0c      	cmp	r3, #12
 8003fde:	d82d      	bhi.n	800403c <UART_SetConfig+0x14c>
 8003fe0:	a201      	add	r2, pc, #4	@ (adr r2, 8003fe8 <UART_SetConfig+0xf8>)
 8003fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe6:	bf00      	nop
 8003fe8:	0800401d 	.word	0x0800401d
 8003fec:	0800403d 	.word	0x0800403d
 8003ff0:	0800403d 	.word	0x0800403d
 8003ff4:	0800403d 	.word	0x0800403d
 8003ff8:	0800402d 	.word	0x0800402d
 8003ffc:	0800403d 	.word	0x0800403d
 8004000:	0800403d 	.word	0x0800403d
 8004004:	0800403d 	.word	0x0800403d
 8004008:	08004025 	.word	0x08004025
 800400c:	0800403d 	.word	0x0800403d
 8004010:	0800403d 	.word	0x0800403d
 8004014:	0800403d 	.word	0x0800403d
 8004018:	08004035 	.word	0x08004035
 800401c:	2300      	movs	r3, #0
 800401e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004022:	e0d8      	b.n	80041d6 <UART_SetConfig+0x2e6>
 8004024:	2302      	movs	r3, #2
 8004026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800402a:	e0d4      	b.n	80041d6 <UART_SetConfig+0x2e6>
 800402c:	2304      	movs	r3, #4
 800402e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004032:	e0d0      	b.n	80041d6 <UART_SetConfig+0x2e6>
 8004034:	2308      	movs	r3, #8
 8004036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800403a:	e0cc      	b.n	80041d6 <UART_SetConfig+0x2e6>
 800403c:	2310      	movs	r3, #16
 800403e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004042:	e0c8      	b.n	80041d6 <UART_SetConfig+0x2e6>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a5e      	ldr	r2, [pc, #376]	@ (80041c4 <UART_SetConfig+0x2d4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d125      	bne.n	800409a <UART_SetConfig+0x1aa>
 800404e:	4b5b      	ldr	r3, [pc, #364]	@ (80041bc <UART_SetConfig+0x2cc>)
 8004050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004054:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004058:	2b30      	cmp	r3, #48	@ 0x30
 800405a:	d016      	beq.n	800408a <UART_SetConfig+0x19a>
 800405c:	2b30      	cmp	r3, #48	@ 0x30
 800405e:	d818      	bhi.n	8004092 <UART_SetConfig+0x1a2>
 8004060:	2b20      	cmp	r3, #32
 8004062:	d00a      	beq.n	800407a <UART_SetConfig+0x18a>
 8004064:	2b20      	cmp	r3, #32
 8004066:	d814      	bhi.n	8004092 <UART_SetConfig+0x1a2>
 8004068:	2b00      	cmp	r3, #0
 800406a:	d002      	beq.n	8004072 <UART_SetConfig+0x182>
 800406c:	2b10      	cmp	r3, #16
 800406e:	d008      	beq.n	8004082 <UART_SetConfig+0x192>
 8004070:	e00f      	b.n	8004092 <UART_SetConfig+0x1a2>
 8004072:	2300      	movs	r3, #0
 8004074:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004078:	e0ad      	b.n	80041d6 <UART_SetConfig+0x2e6>
 800407a:	2302      	movs	r3, #2
 800407c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004080:	e0a9      	b.n	80041d6 <UART_SetConfig+0x2e6>
 8004082:	2304      	movs	r3, #4
 8004084:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004088:	e0a5      	b.n	80041d6 <UART_SetConfig+0x2e6>
 800408a:	2308      	movs	r3, #8
 800408c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004090:	e0a1      	b.n	80041d6 <UART_SetConfig+0x2e6>
 8004092:	2310      	movs	r3, #16
 8004094:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004098:	e09d      	b.n	80041d6 <UART_SetConfig+0x2e6>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a4a      	ldr	r2, [pc, #296]	@ (80041c8 <UART_SetConfig+0x2d8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d125      	bne.n	80040f0 <UART_SetConfig+0x200>
 80040a4:	4b45      	ldr	r3, [pc, #276]	@ (80041bc <UART_SetConfig+0x2cc>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80040ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80040b0:	d016      	beq.n	80040e0 <UART_SetConfig+0x1f0>
 80040b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80040b4:	d818      	bhi.n	80040e8 <UART_SetConfig+0x1f8>
 80040b6:	2b80      	cmp	r3, #128	@ 0x80
 80040b8:	d00a      	beq.n	80040d0 <UART_SetConfig+0x1e0>
 80040ba:	2b80      	cmp	r3, #128	@ 0x80
 80040bc:	d814      	bhi.n	80040e8 <UART_SetConfig+0x1f8>
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d002      	beq.n	80040c8 <UART_SetConfig+0x1d8>
 80040c2:	2b40      	cmp	r3, #64	@ 0x40
 80040c4:	d008      	beq.n	80040d8 <UART_SetConfig+0x1e8>
 80040c6:	e00f      	b.n	80040e8 <UART_SetConfig+0x1f8>
 80040c8:	2300      	movs	r3, #0
 80040ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040ce:	e082      	b.n	80041d6 <UART_SetConfig+0x2e6>
 80040d0:	2302      	movs	r3, #2
 80040d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040d6:	e07e      	b.n	80041d6 <UART_SetConfig+0x2e6>
 80040d8:	2304      	movs	r3, #4
 80040da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040de:	e07a      	b.n	80041d6 <UART_SetConfig+0x2e6>
 80040e0:	2308      	movs	r3, #8
 80040e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040e6:	e076      	b.n	80041d6 <UART_SetConfig+0x2e6>
 80040e8:	2310      	movs	r3, #16
 80040ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040ee:	e072      	b.n	80041d6 <UART_SetConfig+0x2e6>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a35      	ldr	r2, [pc, #212]	@ (80041cc <UART_SetConfig+0x2dc>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d12a      	bne.n	8004150 <UART_SetConfig+0x260>
 80040fa:	4b30      	ldr	r3, [pc, #192]	@ (80041bc <UART_SetConfig+0x2cc>)
 80040fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004100:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004104:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004108:	d01a      	beq.n	8004140 <UART_SetConfig+0x250>
 800410a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800410e:	d81b      	bhi.n	8004148 <UART_SetConfig+0x258>
 8004110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004114:	d00c      	beq.n	8004130 <UART_SetConfig+0x240>
 8004116:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800411a:	d815      	bhi.n	8004148 <UART_SetConfig+0x258>
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <UART_SetConfig+0x238>
 8004120:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004124:	d008      	beq.n	8004138 <UART_SetConfig+0x248>
 8004126:	e00f      	b.n	8004148 <UART_SetConfig+0x258>
 8004128:	2300      	movs	r3, #0
 800412a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800412e:	e052      	b.n	80041d6 <UART_SetConfig+0x2e6>
 8004130:	2302      	movs	r3, #2
 8004132:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004136:	e04e      	b.n	80041d6 <UART_SetConfig+0x2e6>
 8004138:	2304      	movs	r3, #4
 800413a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800413e:	e04a      	b.n	80041d6 <UART_SetConfig+0x2e6>
 8004140:	2308      	movs	r3, #8
 8004142:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004146:	e046      	b.n	80041d6 <UART_SetConfig+0x2e6>
 8004148:	2310      	movs	r3, #16
 800414a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800414e:	e042      	b.n	80041d6 <UART_SetConfig+0x2e6>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a17      	ldr	r2, [pc, #92]	@ (80041b4 <UART_SetConfig+0x2c4>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d13a      	bne.n	80041d0 <UART_SetConfig+0x2e0>
 800415a:	4b18      	ldr	r3, [pc, #96]	@ (80041bc <UART_SetConfig+0x2cc>)
 800415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004160:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004164:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004168:	d01a      	beq.n	80041a0 <UART_SetConfig+0x2b0>
 800416a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800416e:	d81b      	bhi.n	80041a8 <UART_SetConfig+0x2b8>
 8004170:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004174:	d00c      	beq.n	8004190 <UART_SetConfig+0x2a0>
 8004176:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800417a:	d815      	bhi.n	80041a8 <UART_SetConfig+0x2b8>
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <UART_SetConfig+0x298>
 8004180:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004184:	d008      	beq.n	8004198 <UART_SetConfig+0x2a8>
 8004186:	e00f      	b.n	80041a8 <UART_SetConfig+0x2b8>
 8004188:	2300      	movs	r3, #0
 800418a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800418e:	e022      	b.n	80041d6 <UART_SetConfig+0x2e6>
 8004190:	2302      	movs	r3, #2
 8004192:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004196:	e01e      	b.n	80041d6 <UART_SetConfig+0x2e6>
 8004198:	2304      	movs	r3, #4
 800419a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800419e:	e01a      	b.n	80041d6 <UART_SetConfig+0x2e6>
 80041a0:	2308      	movs	r3, #8
 80041a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041a6:	e016      	b.n	80041d6 <UART_SetConfig+0x2e6>
 80041a8:	2310      	movs	r3, #16
 80041aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041ae:	e012      	b.n	80041d6 <UART_SetConfig+0x2e6>
 80041b0:	efff69f3 	.word	0xefff69f3
 80041b4:	40008000 	.word	0x40008000
 80041b8:	40013800 	.word	0x40013800
 80041bc:	40021000 	.word	0x40021000
 80041c0:	40004400 	.word	0x40004400
 80041c4:	40004800 	.word	0x40004800
 80041c8:	40004c00 	.word	0x40004c00
 80041cc:	40005000 	.word	0x40005000
 80041d0:	2310      	movs	r3, #16
 80041d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a9f      	ldr	r2, [pc, #636]	@ (8004458 <UART_SetConfig+0x568>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d17a      	bne.n	80042d6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d824      	bhi.n	8004232 <UART_SetConfig+0x342>
 80041e8:	a201      	add	r2, pc, #4	@ (adr r2, 80041f0 <UART_SetConfig+0x300>)
 80041ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ee:	bf00      	nop
 80041f0:	08004215 	.word	0x08004215
 80041f4:	08004233 	.word	0x08004233
 80041f8:	0800421d 	.word	0x0800421d
 80041fc:	08004233 	.word	0x08004233
 8004200:	08004223 	.word	0x08004223
 8004204:	08004233 	.word	0x08004233
 8004208:	08004233 	.word	0x08004233
 800420c:	08004233 	.word	0x08004233
 8004210:	0800422b 	.word	0x0800422b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004214:	f7fe fa32 	bl	800267c <HAL_RCC_GetPCLK1Freq>
 8004218:	61f8      	str	r0, [r7, #28]
        break;
 800421a:	e010      	b.n	800423e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800421c:	4b8f      	ldr	r3, [pc, #572]	@ (800445c <UART_SetConfig+0x56c>)
 800421e:	61fb      	str	r3, [r7, #28]
        break;
 8004220:	e00d      	b.n	800423e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004222:	f7fe f993 	bl	800254c <HAL_RCC_GetSysClockFreq>
 8004226:	61f8      	str	r0, [r7, #28]
        break;
 8004228:	e009      	b.n	800423e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800422a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800422e:	61fb      	str	r3, [r7, #28]
        break;
 8004230:	e005      	b.n	800423e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004232:	2300      	movs	r3, #0
 8004234:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800423c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 80fb 	beq.w	800443c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	4613      	mov	r3, r2
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	4413      	add	r3, r2
 8004250:	69fa      	ldr	r2, [r7, #28]
 8004252:	429a      	cmp	r2, r3
 8004254:	d305      	bcc.n	8004262 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800425c:	69fa      	ldr	r2, [r7, #28]
 800425e:	429a      	cmp	r2, r3
 8004260:	d903      	bls.n	800426a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004268:	e0e8      	b.n	800443c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	2200      	movs	r2, #0
 800426e:	461c      	mov	r4, r3
 8004270:	4615      	mov	r5, r2
 8004272:	f04f 0200 	mov.w	r2, #0
 8004276:	f04f 0300 	mov.w	r3, #0
 800427a:	022b      	lsls	r3, r5, #8
 800427c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004280:	0222      	lsls	r2, r4, #8
 8004282:	68f9      	ldr	r1, [r7, #12]
 8004284:	6849      	ldr	r1, [r1, #4]
 8004286:	0849      	lsrs	r1, r1, #1
 8004288:	2000      	movs	r0, #0
 800428a:	4688      	mov	r8, r1
 800428c:	4681      	mov	r9, r0
 800428e:	eb12 0a08 	adds.w	sl, r2, r8
 8004292:	eb43 0b09 	adc.w	fp, r3, r9
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	603b      	str	r3, [r7, #0]
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042a4:	4650      	mov	r0, sl
 80042a6:	4659      	mov	r1, fp
 80042a8:	f7fb ff8e 	bl	80001c8 <__aeabi_uldivmod>
 80042ac:	4602      	mov	r2, r0
 80042ae:	460b      	mov	r3, r1
 80042b0:	4613      	mov	r3, r2
 80042b2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042ba:	d308      	bcc.n	80042ce <UART_SetConfig+0x3de>
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042c2:	d204      	bcs.n	80042ce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	60da      	str	r2, [r3, #12]
 80042cc:	e0b6      	b.n	800443c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80042d4:	e0b2      	b.n	800443c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042de:	d15e      	bne.n	800439e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80042e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80042e4:	2b08      	cmp	r3, #8
 80042e6:	d828      	bhi.n	800433a <UART_SetConfig+0x44a>
 80042e8:	a201      	add	r2, pc, #4	@ (adr r2, 80042f0 <UART_SetConfig+0x400>)
 80042ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ee:	bf00      	nop
 80042f0:	08004315 	.word	0x08004315
 80042f4:	0800431d 	.word	0x0800431d
 80042f8:	08004325 	.word	0x08004325
 80042fc:	0800433b 	.word	0x0800433b
 8004300:	0800432b 	.word	0x0800432b
 8004304:	0800433b 	.word	0x0800433b
 8004308:	0800433b 	.word	0x0800433b
 800430c:	0800433b 	.word	0x0800433b
 8004310:	08004333 	.word	0x08004333
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004314:	f7fe f9b2 	bl	800267c <HAL_RCC_GetPCLK1Freq>
 8004318:	61f8      	str	r0, [r7, #28]
        break;
 800431a:	e014      	b.n	8004346 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800431c:	f7fe f9c4 	bl	80026a8 <HAL_RCC_GetPCLK2Freq>
 8004320:	61f8      	str	r0, [r7, #28]
        break;
 8004322:	e010      	b.n	8004346 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004324:	4b4d      	ldr	r3, [pc, #308]	@ (800445c <UART_SetConfig+0x56c>)
 8004326:	61fb      	str	r3, [r7, #28]
        break;
 8004328:	e00d      	b.n	8004346 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800432a:	f7fe f90f 	bl	800254c <HAL_RCC_GetSysClockFreq>
 800432e:	61f8      	str	r0, [r7, #28]
        break;
 8004330:	e009      	b.n	8004346 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004332:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004336:	61fb      	str	r3, [r7, #28]
        break;
 8004338:	e005      	b.n	8004346 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800433a:	2300      	movs	r3, #0
 800433c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004344:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d077      	beq.n	800443c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	005a      	lsls	r2, r3, #1
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	085b      	lsrs	r3, r3, #1
 8004356:	441a      	add	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004360:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	2b0f      	cmp	r3, #15
 8004366:	d916      	bls.n	8004396 <UART_SetConfig+0x4a6>
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800436e:	d212      	bcs.n	8004396 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	b29b      	uxth	r3, r3
 8004374:	f023 030f 	bic.w	r3, r3, #15
 8004378:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	085b      	lsrs	r3, r3, #1
 800437e:	b29b      	uxth	r3, r3
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	b29a      	uxth	r2, r3
 8004386:	8afb      	ldrh	r3, [r7, #22]
 8004388:	4313      	orrs	r3, r2
 800438a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	8afa      	ldrh	r2, [r7, #22]
 8004392:	60da      	str	r2, [r3, #12]
 8004394:	e052      	b.n	800443c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800439c:	e04e      	b.n	800443c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800439e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d827      	bhi.n	80043f6 <UART_SetConfig+0x506>
 80043a6:	a201      	add	r2, pc, #4	@ (adr r2, 80043ac <UART_SetConfig+0x4bc>)
 80043a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ac:	080043d1 	.word	0x080043d1
 80043b0:	080043d9 	.word	0x080043d9
 80043b4:	080043e1 	.word	0x080043e1
 80043b8:	080043f7 	.word	0x080043f7
 80043bc:	080043e7 	.word	0x080043e7
 80043c0:	080043f7 	.word	0x080043f7
 80043c4:	080043f7 	.word	0x080043f7
 80043c8:	080043f7 	.word	0x080043f7
 80043cc:	080043ef 	.word	0x080043ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043d0:	f7fe f954 	bl	800267c <HAL_RCC_GetPCLK1Freq>
 80043d4:	61f8      	str	r0, [r7, #28]
        break;
 80043d6:	e014      	b.n	8004402 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043d8:	f7fe f966 	bl	80026a8 <HAL_RCC_GetPCLK2Freq>
 80043dc:	61f8      	str	r0, [r7, #28]
        break;
 80043de:	e010      	b.n	8004402 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043e0:	4b1e      	ldr	r3, [pc, #120]	@ (800445c <UART_SetConfig+0x56c>)
 80043e2:	61fb      	str	r3, [r7, #28]
        break;
 80043e4:	e00d      	b.n	8004402 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043e6:	f7fe f8b1 	bl	800254c <HAL_RCC_GetSysClockFreq>
 80043ea:	61f8      	str	r0, [r7, #28]
        break;
 80043ec:	e009      	b.n	8004402 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043f2:	61fb      	str	r3, [r7, #28]
        break;
 80043f4:	e005      	b.n	8004402 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004400:	bf00      	nop
    }

    if (pclk != 0U)
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d019      	beq.n	800443c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	085a      	lsrs	r2, r3, #1
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	441a      	add	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	fbb2 f3f3 	udiv	r3, r2, r3
 800441a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	2b0f      	cmp	r3, #15
 8004420:	d909      	bls.n	8004436 <UART_SetConfig+0x546>
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004428:	d205      	bcs.n	8004436 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	60da      	str	r2, [r3, #12]
 8004434:	e002      	b.n	800443c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004448:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800444c:	4618      	mov	r0, r3
 800444e:	3728      	adds	r7, #40	@ 0x28
 8004450:	46bd      	mov	sp, r7
 8004452:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004456:	bf00      	nop
 8004458:	40008000 	.word	0x40008000
 800445c:	00f42400 	.word	0x00f42400

08004460 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00a      	beq.n	800448a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00a      	beq.n	80044ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00a      	beq.n	80044ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d2:	f003 0304 	and.w	r3, r3, #4
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f4:	f003 0310 	and.w	r3, r3, #16
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00a      	beq.n	8004512 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004516:	f003 0320 	and.w	r3, r3, #32
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800453c:	2b00      	cmp	r3, #0
 800453e:	d01a      	beq.n	8004576 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800455e:	d10a      	bne.n	8004576 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	605a      	str	r2, [r3, #4]
  }
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b098      	sub	sp, #96	@ 0x60
 80045a8:	af02      	add	r7, sp, #8
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045b4:	f7fc fd88 	bl	80010c8 <HAL_GetTick>
 80045b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0308 	and.w	r3, r3, #8
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d12e      	bne.n	8004626 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045d0:	2200      	movs	r2, #0
 80045d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f88c 	bl	80046f4 <UART_WaitOnFlagUntilTimeout>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d021      	beq.n	8004626 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ea:	e853 3f00 	ldrex	r3, [r3]
 80045ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	461a      	mov	r2, r3
 80045fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004600:	647b      	str	r3, [r7, #68]	@ 0x44
 8004602:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004604:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004606:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004608:	e841 2300 	strex	r3, r2, [r1]
 800460c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800460e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1e6      	bne.n	80045e2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2220      	movs	r2, #32
 8004618:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e062      	b.n	80046ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0304 	and.w	r3, r3, #4
 8004630:	2b04      	cmp	r3, #4
 8004632:	d149      	bne.n	80046c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004634:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800463c:	2200      	movs	r2, #0
 800463e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f856 	bl	80046f4 <UART_WaitOnFlagUntilTimeout>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d03c      	beq.n	80046c8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004656:	e853 3f00 	ldrex	r3, [r3]
 800465a:	623b      	str	r3, [r7, #32]
   return(result);
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004662:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	461a      	mov	r2, r3
 800466a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800466c:	633b      	str	r3, [r7, #48]	@ 0x30
 800466e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004670:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004672:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004674:	e841 2300 	strex	r3, r2, [r1]
 8004678:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800467a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1e6      	bne.n	800464e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3308      	adds	r3, #8
 8004686:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	e853 3f00 	ldrex	r3, [r3]
 800468e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f023 0301 	bic.w	r3, r3, #1
 8004696:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3308      	adds	r3, #8
 800469e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046a0:	61fa      	str	r2, [r7, #28]
 80046a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a4:	69b9      	ldr	r1, [r7, #24]
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	e841 2300 	strex	r3, r2, [r1]
 80046ac:	617b      	str	r3, [r7, #20]
   return(result);
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1e5      	bne.n	8004680 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2220      	movs	r2, #32
 80046b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e011      	b.n	80046ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2220      	movs	r2, #32
 80046cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3758      	adds	r7, #88	@ 0x58
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	603b      	str	r3, [r7, #0]
 8004700:	4613      	mov	r3, r2
 8004702:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004704:	e04f      	b.n	80047a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470c:	d04b      	beq.n	80047a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800470e:	f7fc fcdb 	bl	80010c8 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	429a      	cmp	r2, r3
 800471c:	d302      	bcc.n	8004724 <UART_WaitOnFlagUntilTimeout+0x30>
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e04e      	b.n	80047c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0304 	and.w	r3, r3, #4
 8004732:	2b00      	cmp	r3, #0
 8004734:	d037      	beq.n	80047a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	2b80      	cmp	r3, #128	@ 0x80
 800473a:	d034      	beq.n	80047a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	2b40      	cmp	r3, #64	@ 0x40
 8004740:	d031      	beq.n	80047a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	69db      	ldr	r3, [r3, #28]
 8004748:	f003 0308 	and.w	r3, r3, #8
 800474c:	2b08      	cmp	r3, #8
 800474e:	d110      	bne.n	8004772 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2208      	movs	r2, #8
 8004756:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f000 f838 	bl	80047ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2208      	movs	r2, #8
 8004762:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e029      	b.n	80047c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	69db      	ldr	r3, [r3, #28]
 8004778:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800477c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004780:	d111      	bne.n	80047a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800478a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 f81e 	bl	80047ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2220      	movs	r2, #32
 8004796:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e00f      	b.n	80047c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69da      	ldr	r2, [r3, #28]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	4013      	ands	r3, r2
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	bf0c      	ite	eq
 80047b6:	2301      	moveq	r3, #1
 80047b8:	2300      	movne	r3, #0
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	461a      	mov	r2, r3
 80047be:	79fb      	ldrb	r3, [r7, #7]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d0a0      	beq.n	8004706 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b095      	sub	sp, #84	@ 0x54
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047de:	e853 3f00 	ldrex	r3, [r3]
 80047e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	461a      	mov	r2, r3
 80047f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80047f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047fc:	e841 2300 	strex	r3, r2, [r1]
 8004800:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1e6      	bne.n	80047d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3308      	adds	r3, #8
 800480e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004810:	6a3b      	ldr	r3, [r7, #32]
 8004812:	e853 3f00 	ldrex	r3, [r3]
 8004816:	61fb      	str	r3, [r7, #28]
   return(result);
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	f023 0301 	bic.w	r3, r3, #1
 800481e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	3308      	adds	r3, #8
 8004826:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004828:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800482a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800482e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004830:	e841 2300 	strex	r3, r2, [r1]
 8004834:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1e5      	bne.n	8004808 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004840:	2b01      	cmp	r3, #1
 8004842:	d118      	bne.n	8004876 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	e853 3f00 	ldrex	r3, [r3]
 8004850:	60bb      	str	r3, [r7, #8]
   return(result);
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	f023 0310 	bic.w	r3, r3, #16
 8004858:	647b      	str	r3, [r7, #68]	@ 0x44
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	461a      	mov	r2, r3
 8004860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004862:	61bb      	str	r3, [r7, #24]
 8004864:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004866:	6979      	ldr	r1, [r7, #20]
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	e841 2300 	strex	r3, r2, [r1]
 800486e:	613b      	str	r3, [r7, #16]
   return(result);
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1e6      	bne.n	8004844 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2220      	movs	r2, #32
 800487a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800488a:	bf00      	nop
 800488c:	3754      	adds	r7, #84	@ 0x54
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b084      	sub	sp, #16
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f7ff fb05 	bl	8003ec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048ba:	bf00      	nop
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b088      	sub	sp, #32
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	e853 3f00 	ldrex	r3, [r3]
 80048d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048de:	61fb      	str	r3, [r7, #28]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	461a      	mov	r2, r3
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	61bb      	str	r3, [r7, #24]
 80048ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ec:	6979      	ldr	r1, [r7, #20]
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	e841 2300 	strex	r3, r2, [r1]
 80048f4:	613b      	str	r3, [r7, #16]
   return(result);
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1e6      	bne.n	80048ca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2220      	movs	r2, #32
 8004900:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f7ff fad1 	bl	8003eb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800490e:	bf00      	nop
 8004910:	3720      	adds	r7, #32
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <memset>:
 800492a:	4402      	add	r2, r0
 800492c:	4603      	mov	r3, r0
 800492e:	4293      	cmp	r3, r2
 8004930:	d100      	bne.n	8004934 <memset+0xa>
 8004932:	4770      	bx	lr
 8004934:	f803 1b01 	strb.w	r1, [r3], #1
 8004938:	e7f9      	b.n	800492e <memset+0x4>
	...

0800493c <__libc_init_array>:
 800493c:	b570      	push	{r4, r5, r6, lr}
 800493e:	4d0d      	ldr	r5, [pc, #52]	@ (8004974 <__libc_init_array+0x38>)
 8004940:	4c0d      	ldr	r4, [pc, #52]	@ (8004978 <__libc_init_array+0x3c>)
 8004942:	1b64      	subs	r4, r4, r5
 8004944:	10a4      	asrs	r4, r4, #2
 8004946:	2600      	movs	r6, #0
 8004948:	42a6      	cmp	r6, r4
 800494a:	d109      	bne.n	8004960 <__libc_init_array+0x24>
 800494c:	4d0b      	ldr	r5, [pc, #44]	@ (800497c <__libc_init_array+0x40>)
 800494e:	4c0c      	ldr	r4, [pc, #48]	@ (8004980 <__libc_init_array+0x44>)
 8004950:	f000 f818 	bl	8004984 <_init>
 8004954:	1b64      	subs	r4, r4, r5
 8004956:	10a4      	asrs	r4, r4, #2
 8004958:	2600      	movs	r6, #0
 800495a:	42a6      	cmp	r6, r4
 800495c:	d105      	bne.n	800496a <__libc_init_array+0x2e>
 800495e:	bd70      	pop	{r4, r5, r6, pc}
 8004960:	f855 3b04 	ldr.w	r3, [r5], #4
 8004964:	4798      	blx	r3
 8004966:	3601      	adds	r6, #1
 8004968:	e7ee      	b.n	8004948 <__libc_init_array+0xc>
 800496a:	f855 3b04 	ldr.w	r3, [r5], #4
 800496e:	4798      	blx	r3
 8004970:	3601      	adds	r6, #1
 8004972:	e7f2      	b.n	800495a <__libc_init_array+0x1e>
 8004974:	080049ec 	.word	0x080049ec
 8004978:	080049ec 	.word	0x080049ec
 800497c:	080049ec 	.word	0x080049ec
 8004980:	080049f0 	.word	0x080049f0

08004984 <_init>:
 8004984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004986:	bf00      	nop
 8004988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800498a:	bc08      	pop	{r3}
 800498c:	469e      	mov	lr, r3
 800498e:	4770      	bx	lr

08004990 <_fini>:
 8004990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004992:	bf00      	nop
 8004994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004996:	bc08      	pop	{r3}
 8004998:	469e      	mov	lr, r3
 800499a:	4770      	bx	lr
